From: jingi_jeong <jingi_jeong@tmax.co.kr>
Date: Mon, 17 May 2021 17:56:28 +0900
Subject: [feat] desktop-icons-ng : handle both nemo and nautilus File Manager

- Check which filemanager is default app before launching ding.js
- Parse clipboard data, preference settings differently
- Set string value appropriately

[IMS] N/A
---
 extensions/desktop-icons-ng/README.md           |   3 +-
 extensions/desktop-icons-ng/askRenamePopup.js   |   2 +-
 extensions/desktop-icons-ng/constants.js        |  35 +++++
 extensions/desktop-icons-ng/dbusUtils.js        |  70 ++++++++--
 extensions/desktop-icons-ng/desktopIconsUtil.js |  11 +-
 extensions/desktop-icons-ng/desktopManager.js   | 168 ++++++++++++++++--------
 extensions/desktop-icons-ng/ding.js             |   9 ++
 extensions/desktop-icons-ng/enums.js            |   4 +-
 extensions/desktop-icons-ng/extension.js        |  24 ++++
 extensions/desktop-icons-ng/fileItem.js         |  26 ++--
 extensions/desktop-icons-ng/po/ko.po            |  12 +-
 extensions/desktop-icons-ng/preferences.js      |  41 +++---
 12 files changed, 288 insertions(+), 117 deletions(-)
 create mode 100644 extensions/desktop-icons-ng/constants.js

diff --git a/extensions/desktop-icons-ng/README.md b/extensions/desktop-icons-ng/README.md
index 0183904..7c4f4f6 100644
--- a/extensions/desktop-icons-ng/README.md
+++ b/extensions/desktop-icons-ng/README.md
@@ -5,7 +5,7 @@
 Desktop Icons NG for GNOME Shell. It is a fork/rewrite of the official 'Desktop Icons' extension,
 with these advantages:
 
- * Drag'n'Drop, both inside the desktop, between desktop and applications, and nemo windows
+ * Drag'n'Drop, both inside the desktop, between desktop and applications, and nemo or nautilus windows
  * Allows to use "Open with..." option with several files
  * When hovering or clicking on an icon with a name too large to fit, it shows the full name
  * Doesn't hang the compositor when there is too much activity in the desktop folder
@@ -19,6 +19,7 @@ Version 0.15.0
 ## Requirements
 
 * GNOME Shell >= 3.38
+* Nautilus >= 3.38
 * Nemo >= 4.8.5
 
 ## TO-DO
diff --git a/extensions/desktop-icons-ng/askRenamePopup.js b/extensions/desktop-icons-ng/askRenamePopup.js
index 6adcfd5..cb6238a 100644
--- a/extensions/desktop-icons-ng/askRenamePopup.js
+++ b/extensions/desktop-icons-ng/askRenamePopup.js
@@ -79,7 +79,7 @@ var AskRenamePopup = class {
     }
 
     _doRename() {
-        DBusUtils.NemoFileOperationsProxy.RenameFileRemote(this._fileItem.file.get_uri(),
+        DBusUtils.FileOperationsProxy.RenameFileRemote(this._fileItem.file.get_uri(),
             this._textArea.text,
             (result, error) => {
                 if (error)
diff --git a/extensions/desktop-icons-ng/constants.js b/extensions/desktop-icons-ng/constants.js
new file mode 100644
index 0000000..dc8898b
--- /dev/null
+++ b/extensions/desktop-icons-ng/constants.js
@@ -0,0 +1,35 @@
+/* exported init SCHEMA_FILEMANAGER SCRIPT_DIR isFileManagerNemo ICON_POSITION_METADATA DND_POSITION_METADATA SCRIPT_SELECTED_FILE_PATHS SCRIPT_SELECTED_URIS SCRIPT_CURRENT_URI CLIPBOARD_TEXT*/
+
+var SCHEMA_FILEMANAGER;
+var SCRIPT_DIR;
+var isFileManagerNemo;
+var ICON_POSITION_METADATA;
+var DND_POSITION_METADATA;
+var SCRIPT_SELECTED_FILE_PATHS;
+var SCRIPT_SELECTED_URIS;
+var SCRIPT_CURRENT_URI;
+var CLIPBOARD_TEXT;
+
+function init(filemanager) {
+    if (filemanager === 'nemo') {
+        isFileManagerNemo = true;
+        SCHEMA_FILEMANAGER = 'org.nemo.preferences';
+        SCRIPT_DIR = '.local/share/nemo/scripts';
+        ICON_POSITION_METADATA = 'metadata::nemo-icon-position';
+        DND_POSITION_METADATA = 'metadata::nemo-drop-position';
+        SCRIPT_SELECTED_FILE_PATHS = 'NEMO_SCRIPT_SELECTED_FILE_PATHS';
+        SCRIPT_SELECTED_URIS = 'NEMO_SCRIPT_SELECTED_URIS';
+        SCRIPT_CURRENT_URI = 'NEMO_SCRIPT_CURRENT_URI';
+        CLIPBOARD_TEXT = 'x-special/nemo-clipboard';
+        return;
+    }
+    isFileManagerNemo = false;
+    SCHEMA_FILEMANAGER = 'org.gnome.nautilus.preferences';
+    SCRIPT_DIR = '.local/share/nautilus/scripts';
+    ICON_POSITION_METADATA = 'metadata::nautilus-icon-position';
+    DND_POSITION_METADATA = 'metadata::nautilus-drop-position';
+    SCRIPT_SELECTED_FILE_PATHS = 'NAUTILUS_SCRIPT_SELECTED_FILE_PATHS';
+    SCRIPT_SELECTED_URIS = 'NAUTILUS_SCRIPT_SELECTED_URIS';
+    SCRIPT_CURRENT_URI = 'NAUTILUS_SCRIPT_CURRENT_URI';
+    CLIPBOARD_TEXT = 'x-special/nautilus-clipboard';
+}
diff --git a/extensions/desktop-icons-ng/dbusUtils.js b/extensions/desktop-icons-ng/dbusUtils.js
index c2822a4..60f210a 100644
--- a/extensions/desktop-icons-ng/dbusUtils.js
+++ b/extensions/desktop-icons-ng/dbusUtils.js
@@ -1,4 +1,4 @@
-/* exported NemoFileOperationsProxy FreeDesktopFileManagerProxy GnomeNautilusPreviewProxy discreteGpuAvailable GnomeArchiveManagerProxy init */
+/* exported FileOperationsProxy FreeDesktopFileManagerProxy GnomeNautilusPreviewProxy discreteGpuAvailable GnomeArchiveManagerProxy init */
 /* DING: Desktop Icons New Generation for GNOME Shell
  *
  * Copyright (C) 2019 Sergio Costas (rastersoft@gmail.com)
@@ -18,7 +18,8 @@
  */
 
 const Gio = imports.gi.Gio;
-var NemoFileOperationsProxy;
+const Constants = imports.constants;
+var FileOperationsProxy;
 var FreeDesktopFileManagerProxy;
 var GnomeNautilusPreviewProxy;
 var SwitcherooControlProxyClass;
@@ -58,6 +59,38 @@ const NemoFileOperationsInterface = `<node>
 
 const NemoFileOperationsProxyInterface = Gio.DBusProxy.makeProxyWrapper(NemoFileOperationsInterface);
 
+const NautilusFileOperationsInterface = `<node>
+<interface name='org.gnome.Nautilus.FileOperations'>
+    <method name='CopyURIs'>
+        <arg name='URIs' type='as' direction='in'/>
+        <arg name='Destination' type='s' direction='in'/>
+    </method>
+    <method name='MoveURIs'>
+        <arg name='URIs' type='as' direction='in'/>
+        <arg name='Destination' type='s' direction='in'/>
+    </method>
+    <method name='EmptyTrash'>
+    </method>
+    <method name='TrashFiles'>
+        <arg name='URIs' type='as' direction='in'/>
+    </method>
+    <method name='CreateFolder'>
+        <arg name='URI' type='s' direction='in'/>
+    </method>
+    <method name='RenameFile'>
+        <arg name='URI' type='s' direction='in'/>
+        <arg name='NewName' type='s' direction='in'/>
+    </method>
+    <method name='Undo'>
+    </method>
+    <method name='Redo'>
+    </method>
+    <property name='UndoStatus' type='i' access='read'/>
+</interface>
+</node>`;
+
+const NautilusFileOperationsProxyInterface = Gio.DBusProxy.makeProxyWrapper(NautilusFileOperationsInterface);
+
 const FreeDesktopFileManagerInterface = `<node>
 <interface name='org.freedesktop.FileManager1'>
     <method name='ShowItems'>
@@ -208,16 +241,27 @@ const GnomeArchiveManagerInterface = `<node>
 const GnomeArchiveManagerProxyInterface = Gio.DBusProxy.makeProxyWrapper(GnomeArchiveManagerInterface);
 
 function init() {
-    NemoFileOperationsProxy = new NemoFileOperationsProxyInterface(
-        Gio.DBus.session,
-        'org.Nemo',
-        '/org/Nemo',
-        (proxy, error) => {
-            if (error)
-                log('Error connecting to Nemo');
-
-        }
-    );
+    if (Constants.isFileManagerNemo) {
+        FileOperationsProxy = new NemoFileOperationsProxyInterface(
+            Gio.DBus.session,
+            'org.Nemo',
+            '/org/Nemo',
+            (proxy, error) => {
+                if (error)
+                    log('Error connecting to Nemo');
+            }
+        );
+    } else {
+        FileOperationsProxy = new NautilusFileOperationsProxyInterface(
+            Gio.DBus.session,
+            'org.gnome.Nautilus',
+            '/org/gnome/Nautilus',
+            (proxy, error) => {
+                if (error)
+                    log('Error connecting to Nautilus');
+            }
+        );
+    }
 
     FreeDesktopFileManagerProxy = new FreeDesktopFileManagerProxyInterface(
         Gio.DBus.session,
@@ -225,7 +269,7 @@ function init() {
         '/org/freedesktop/FileManager1',
         (proxy, error) => {
             if (error)
-                log('Error connecting to Nemo');
+                log('Error connecting to File Manager');
 
         }
     );
diff --git a/extensions/desktop-icons-ng/desktopIconsUtil.js b/extensions/desktop-icons-ng/desktopIconsUtil.js
index ce1f8af..97903c1 100644
--- a/extensions/desktop-icons-ng/desktopIconsUtil.js
+++ b/extensions/desktop-icons-ng/desktopIconsUtil.js
@@ -1,4 +1,4 @@
-/* exported getDesktopDir getScriptsDir clamp spawnCommandLine distanceBetweenPoints getExtraFolders getMounts launchTerminal getFileExtensionOffset getFilesFromNemoDnD isExecutable writeTextFileToDesktop */
+/* exported getDesktopDir getScriptsDir clamp spawnCommandLine distanceBetweenPoints getExtraFolders getMounts launchTerminal getFileExtensionOffset getFilesFromFileManagerDnD isExecutable writeTextFileToDesktop */
 /* DING: Desktop Icons New Generation for GNOME Shell
  *
  * Copyright (C) 2019 Sergio Costas (rastersoft@gmail.com)
@@ -22,6 +22,7 @@ const Gio = imports.gi.Gio;
 const GLib = imports.gi.GLib;
 const Prefs = imports.preferences;
 const Enums = imports.enums;
+const Constants = imports.constants;
 const Gettext = imports.gettext.domain('ding');
 
 const _ = Gettext.gettext;
@@ -32,7 +33,7 @@ function getDesktopDir() {
 }
 
 function getScriptsDir() {
-    let scriptsDir =  GLib.build_filenamev([GLib.get_home_dir(), Enums.NEMO_SCRIPTS_DIR]);
+    let scriptsDir =  GLib.build_filenamev([GLib.get_home_dir(), Constants.SCRIPT_DIR]);
     return Gio.File.new_for_commandline_arg(scriptsDir);
 }
 
@@ -160,7 +161,7 @@ function getFileExtensionOffset(filename, isDirectory) {
     return offset;
 }
 
-function getFilesFromNemoDnD(selection, type) {
+function getFilesFromFileManagerDnD(selection, type) {
     let data = String.fromCharCode.apply(null, selection.get_data());
     let retval = [];
     let elements = data.split('\r\n');
@@ -187,7 +188,7 @@ function getFilesFromNemoDnD(selection, type) {
 function isExecutable(mimetype, fileName) {
 
     if (Gio.content_type_can_be_executable(mimetype)) {
-        switch (Prefs.nemoSettings.get_string('executable-text-activation')) {
+        switch (Prefs.fileManagerSettings.get_string('executable-text-activation')) {
         case 'launch': {
             return Enums.WhatToDoWithExecutable.EXECUTE;
         }
@@ -238,7 +239,7 @@ function writeTextFileToDesktop(text, filename, dropCoordinates) {
 
     if (dropCoordinates !== null) {
         let info = new Gio.FileInfo();
-        info.set_attribute_string('metadata::nemo-drop-position', `${dropCoordinates[0]},${dropCoordinates[1]}`);
+        info.set_attribute_string(Constants.DND_POSITION_METADATA, `${dropCoordinates[0]},${dropCoordinates[1]}`);
         try {
             file.set_attributes_from_info(info, Gio.FileQueryInfoFlags.NONE, null);
         } catch (e) {}
diff --git a/extensions/desktop-icons-ng/desktopManager.js b/extensions/desktop-icons-ng/desktopManager.js
index 6ccbebc..2774c3e 100644
--- a/extensions/desktop-icons-ng/desktopManager.js
+++ b/extensions/desktop-icons-ng/desktopManager.js
@@ -34,6 +34,7 @@ const AskRenamePopup = imports.askRenamePopup;
 const AskConfirmPopup = imports.askConfirmPopup;
 const ShowErrorPopup = imports.showErrorPopup;
 const TemplateManager = imports.templateManager;
+const Constants = imports.constants;
 
 const Gettext = imports.gettext.domain('ding');
 
@@ -95,7 +96,7 @@ var DesktopManager = class {
                 this._updateDesktop();
             }
         });
-        Prefs.nemoSettings.connect('changed', (obj, key) => {
+        Prefs.fileManagerSettings.connect('changed', (obj, key) => {
             if (key === 'show-image-thumbnails')
                 this._updateDesktop();
 
@@ -123,19 +124,20 @@ var DesktopManager = class {
         this._createDesktopBackgroundMenu();
         this._createGrids();
 
-        DBusUtils.NemoFileOperationsProxy.connect('g-properties-changed', this._undoStatusChanged.bind(this));
+        DBusUtils.FileOperationsProxy.connect('g-properties-changed', this._undoStatusChanged.bind(this));
         this._fileList = [];
         this._readFileList();
 
         this._scriptsList = [];
         this._readScriptFileList();
 
-        // Check if Nemo is available
+        // Check if File Manager is available
         try {
-            DesktopIconsUtil.trySpawn(null, ['nemo', '--version']);
+            let currentFileManager = Constants.isFileManagerNemo ? 'nemo' : 'nautilus';
+            DesktopIconsUtil.trySpawn(null, [currentFileManager, '--version']);
         } catch (e) {
-            this._errorWindow = new ShowErrorPopup.ShowErrorPopup(_('Nemo File Manager not found'),
-                _('The Nemo File Manager is mandatory to work with Desktop Icons NG.'),
+            this._errorWindow = new ShowErrorPopup.ShowErrorPopup(_('File Manager not found'),
+                _('Nemo or Nautilus File Manager is mandatory to work with Desktop Icons NG.'),
                 null,
                 true);
         }
@@ -203,9 +205,9 @@ var DesktopManager = class {
                 continue;
             }
             let info = new Gio.FileInfo();
-            info.set_attribute_string('metadata::nemo-icon-position', '');
+            info.set_attribute_string(Constants.ICON_POSITION_METADATA, '');
             if (dropCoordinates !== null)
-                info.set_attribute_string('metadata::nemo-drop-position', `${dropCoordinates[0]},${dropCoordinates[1]}`);
+                info.set_attribute_string(Constants.DND_POSITION_METADATA, `${dropCoordinates[0]},${dropCoordinates[1]}`);
 
             try {
                 file.set_attributes_from_info(info, Gio.FileQueryInfoFlags.NONE, null);
@@ -281,7 +283,7 @@ var DesktopManager = class {
 
     onDragDataReceived(xDestination, yDestination, selection, info) {
         this.onDragLeave();
-        let fileList = DesktopIconsUtil.getFilesFromNemoDnD(selection, info);
+        let fileList = DesktopIconsUtil.getFilesFromFileManagerDnD(selection, info);
         switch (info) {
         case 0:
             if (fileList.length !== 0) {
@@ -296,7 +298,7 @@ var DesktopManager = class {
                 let data = Gio.File.new_for_uri(fileList[0]).query_info('id::filesystem', Gio.FileQueryInfoFlags.NONE, null);
                 let idFs = data.get_attribute_string('id::filesystem');
                 if (this.desktopFsId === idFs) {
-                    DBusUtils.NemoFileOperationsProxy.MoveURIsRemote(
+                    DBusUtils.FileOperationsProxy.MoveURIsRemote(
                         fileList,
                         `file://${GLib.get_user_special_dir(GLib.UserDirectory.DIRECTORY_DESKTOP)}`,
                         (result, error) => {
@@ -305,7 +307,7 @@ var DesktopManager = class {
                         }
                     );
                 } else {
-                    DBusUtils.NemoFileOperationsProxy.CopyURIsRemote(
+                    DBusUtils.FileOperationsProxy.CopyURIsRemote(
                         fileList,
                         `file://${GLib.get_user_special_dir(GLib.UserDirectory.DIRECTORY_DESKTOP)}`,
                         (result, error) => {
@@ -436,21 +438,32 @@ var DesktopManager = class {
                 this._newDocumentItem.show_all();
             }
             this._syncUndoRedo();
-            let atom = Gdk.Atom.intern('CLIPBOARD', false);
-            let clipboard = Gtk.Clipboard.get(atom);
+            this._setMenuSensitivity();
+            this._menu.popup_at_pointer(event);
+        }
+    }
+
+    _setMenuSensitivity() {
+        let atom = Gdk.Atom.intern('CLIPBOARD', false);
+        let clipboard = Gtk.Clipboard.get(atom);
+
+        if (Constants.isFileManagerNemo) {
             let nemoCustomAtom = Gdk.Atom.intern('x-special/gnome-copied-files', false);
             clipboard.request_contents(nemoCustomAtom, (clipboardIn, selectionData) => {
                 let data = selectionData.get_data();
-                let [valid, unusedIsCut, unusedFiles] = this._parseClipboardText(data);
+                let [valid, unusedAction, unusedFiles] = this._parseClipboardCustomData(data);
+                this._pasteMenuItem.set_sensitive(valid);
+            });
+        } else {
+            clipboard.request_text((clipboardIn, text) => {
+                let [valid, unusedAction, unusedFiles] = this._parseClipboardText(text);
                 this._pasteMenuItem.set_sensitive(valid);
             });
-
-            this._menu.popup_at_pointer(event);
         }
     }
 
     _syncUndoRedo() {
-        switch (DBusUtils.NemoFileOperationsProxy.UndoStatus) {
+        switch (DBusUtils.FileOperationsProxy.UndoStatus) {
         case Enums.UndoStatus.UNDO:
             this._undoMenuItem.show();
             this._redoMenuItem.hide();
@@ -472,7 +485,7 @@ var DesktopManager = class {
     }
 
     _doUndo() {
-        DBusUtils.NemoFileOperationsProxy.UndoRemote(
+        DBusUtils.FileOperationsProxy.UndoRemote(
             (result, error) => {
                 if (error)
                     throw new Error(`Error performing undo: ${error.message}`);
@@ -481,7 +494,7 @@ var DesktopManager = class {
     }
 
     _doRedo() {
-        DBusUtils.NemoFileOperationsProxy.RedoRemote(
+        DBusUtils.FileOperationsProxy.RedoRemote(
             (result, error) => {
                 if (error)
                     throw new Error(`Error performing redo: ${error.message}`);
@@ -661,34 +674,76 @@ var DesktopManager = class {
     _doPaste() {
         let atom = Gdk.Atom.intern('CLIPBOARD', false);
         let clipboard = Gtk.Clipboard.get(atom);
-        let nemoCustomAtom = Gdk.Atom.intern('x-special/gnome-copied-files', false);
-        clipboard.request_contents(nemoCustomAtom, (clipboardIn, selectionData) => {
-            let data = selectionData.get_data();
-            let [valid, isCut, files] = this._parseClipboardText(data);
 
-            if (!valid)
-                return;
+        if (Constants.isFileManagerNemo) {
+            let nemoCustomAtom = Gdk.Atom.intern('x-special/gnome-copied-files', false);
+            clipboard.request_contents(nemoCustomAtom, (clipboardIn, selectionData) => {
+                let data = selectionData.get_data();
+                let [valid, action, files] = this._parseClipboardCustomData(data);
+                if (!valid)
+                    return;
 
-            let desktopDir = this._desktopDir.get_uri();
-            if (isCut) {
-                DBusUtils.NemoFileOperationsProxy.MoveURIsRemote(files, desktopDir,
-                    (result, error) => {
-                        if (error)
-                            throw new Error(`Error moving files: ${error.message}`);
-                    }
-                );
-            } else {
-                DBusUtils.NemoFileOperationsProxy.CopyURIsRemote(files, desktopDir,
-                    (result, error) => {
-                        if (error)
-                            throw new Error(`Error copying files: ${error.message}`);
-                    }
-                );
-            }
-        });
+
+                this._requestFileOperation(action, files);
+            });
+        } else {
+            clipboard.request_text((clipboardIn, text) => {
+                let [valid, action, files] = this._parseClipboardText(text);
+                if (!valid)
+                    return;
+
+
+                this._requestFileOperation(action, files);
+            });
+        }
+
+    }
+
+    _requestFileOperation(action, files) {
+        let desktopDir = this._desktopDir.get_uri();
+
+        if (action === 'cut') {
+            DBusUtils.FileOperationsProxy.MoveURIsRemote(files, desktopDir,
+                (result, error) => {
+                    if (error)
+                        throw new Error(`Error moving files: ${error.message}`);
+                }
+            );
+        } else if (action === 'copy') {
+            DBusUtils.FileOperationsProxy.CopyURIsRemote(files, desktopDir,
+                (result, error) => {
+                    if (error)
+                        throw new Error(`Error copying files: ${error.message}`);
+                });
+        } else {
+            throw new Error('Unidentified Action Error from File Manager');
+        }
+    }
+
+    _parseClipboardText(text) {
+        if (text === null)
+            return [false, false, null];
+
+        let lines = text.split('\n');
+        let [mime, action, ...files] = lines;
+
+        if (mime !== 'x-special/nautilus-clipboard')
+            return [false, false, null];
+
+        if (!['copy', 'cut'].includes(action))
+            return [false, false, null];
+
+        /* Last line is empty due to the split */
+        if (files.length <= 1)
+            return [false, false, null];
+
+        /* Remove last line */
+        files.pop();
+
+        return [true, action, files];
     }
 
-    _parseClipboardText(data) {
+    _parseClipboardCustomData(data) {
         let text = ByteArray.toString(data);
         if (text === null)
             return [false, false, null];
@@ -698,12 +753,11 @@ var DesktopManager = class {
 
         if (!['copy', 'cut'].includes(action))
             return [false, false, null];
-        let isCut = action === 'cut';
 
         if (files.length === 0)
             return [false, false, null];
 
-        return [true, isCut, files];
+        return [true, action, files];
     }
 
     onMotion(x, y) {
@@ -1074,7 +1128,7 @@ var DesktopManager = class {
                  */
             try {
                 let info = new Gio.FileInfo();
-                info.set_attribute_string('metadata::nemo-icon-position', '');
+                info.set_attribute_string(Constants.ICON_POSITION_METADATA, '');
                 file.set_attributes_from_info(info, Gio.FileQueryInfoFlags.NONE, null);
             } catch (e) {} // can happen if a file is created and deleted very fast
             break;
@@ -1096,7 +1150,7 @@ var DesktopManager = class {
         if (selection) {
             let atom = Gdk.Atom.intern('CLIPBOARD', false);
             let clipboard = Gtk.Clipboard.get(atom);
-            let text = `x-special/nemo-clipboard\n${isCopy ? 'copy' : 'cut'}\n`;
+            let text = `${Constants.CLIPBOARD_TEXT}\n${isCopy ? 'copy' : 'cut'}\n`;
             for (let item of selection)
                 text += `${item}\n`;
 
@@ -1115,7 +1169,7 @@ var DesktopManager = class {
     doTrash() {
         let selection = this.getCurrentSelection(true);
         if (selection) {
-            DBusUtils.NemoFileOperationsProxy.TrashFilesRemote(selection,
+            DBusUtils.FileOperationsProxy.TrashFilesRemote(selection,
                 (source, error) => {
                     if (error)
                         throw new Error(`Error trashing files on the desktop: ${error.message}`);
@@ -1220,7 +1274,7 @@ var DesktopManager = class {
     }
 
     doEmptyTrash() {
-        DBusUtils.NemoFileOperationsProxy.EmptyTrashRemote((source, error) => {
+        DBusUtils.FileOperationsProxy.EmptyTrashRemote((source, error) => {
             if (error)
                 throw new Error(`Error trashing files on the desktop: ${error.message}`);
         });
@@ -1321,8 +1375,8 @@ var DesktopManager = class {
             try {
                 dir.make_directory(null);
                 let info = new Gio.FileInfo();
-                info.set_attribute_string('metadata::nemo-drop-position', `${X},${Y}`);
-                info.set_attribute_string('metadata::nemo-icon-position', '');
+                info.set_attribute_string(Constants.DND_POSITION_METADATA, `${X},${Y}`);
+                info.set_attribute_string(Constants.ICON_POSITION_METADATA, '');
                 dir.set_attributes_from_info(info, Gio.FileQueryInfoFlags.NONE, null);
                 if (position)
                     return dir.get_uri();
@@ -1351,8 +1405,8 @@ var DesktopManager = class {
         try {
             file.copy(destination, Gio.FileCopyFlags.NONE, null, null);
             let info = new Gio.FileInfo();
-            info.set_attribute_string('metadata::nemo-drop-position', `${this._clickX},${this._clickY}`);
-            info.set_attribute_string('metadata::nemo-icon-position', '');
+            info.set_attribute_string(Constants.DND_POSITION_METADATA, `${this._clickX},${this._clickY}`);
+            info.set_attribute_string(Constants.ICON_POSITION_METADATA, '');
             destination.set_attributes_from_info(info, Gio.FileQueryInfoFlags.NONE, null);
         } catch (e) {
             print(`Failed to create template ${e.message}`);
@@ -1372,9 +1426,9 @@ var DesktopManager = class {
         uriList = uriList.join('');
         let deskTop = `'${DesktopIconsUtil.getDesktopDir().get_uri()}'`;
         let execline = '/bin/bash -c "';
-        execline += `NEMO_SCRIPT_SELECTED_FILE_PATHS=${pathList} `;
-        execline += `NEMO_SCRIPT_SELECTED_URIS=${uriList} `;
-        execline += `NEMO_SCRIPT_CURRENT_URI=${deskTop} `;
+        execline += `${Constants.SCRIPT_SELECTED_FILE_PATHS}=${pathList} `;
+        execline += `${Constants.SCRIPT_SELECTED_URIS}=${uriList} `;
+        execline += `${Constants.SCRIPT_CURRENT_URI}=${deskTop} `;
         execline += `'${menuItemPath}'"`;
         DesktopIconsUtil.spawnCommandLine(execline);
     }
@@ -1415,7 +1469,7 @@ var DesktopManager = class {
 
         let newFolder = this._newFolder(position);
         if (newFolder) {
-            DBusUtils.NemoFileOperationsProxy.MoveURIsRemote(newFolderFileItems, newFolder,
+            DBusUtils.FileOperationsProxy.MoveURIsRemote(newFolderFileItems, newFolder,
                 (result, error) => {
                     if (error)
                         throw new Error(`Error moving files: ${error.message}`);
diff --git a/extensions/desktop-icons-ng/ding.js b/extensions/desktop-icons-ng/ding.js
index 6ad6e57..9aff19a 100755
--- a/extensions/desktop-icons-ng/ding.js
+++ b/extensions/desktop-icons-ng/ding.js
@@ -28,6 +28,7 @@ let errorFound = false;
 let asDesktop = false;
 let primaryIndex = 0;
 let localeDirectory = '.';
+let filemanager = '.';
 
 for (let arg of ARGV) {
     if (lastCommand === null) {
@@ -40,6 +41,7 @@ for (let arg of ARGV) {
         case '-D':
         case '-M':
         case '-L':
+        case '-F':
             lastCommand = arg;
             break;
         default:
@@ -66,6 +68,9 @@ for (let arg of ARGV) {
     case '-L':
         localeDirectory = arg;
         break;
+    case '-F':
+        filemanager = arg;
+        break;
     }
     lastCommand = null;
 }
@@ -81,6 +86,10 @@ if (desktops.length === 0) {
 
 imports.searchPath.unshift(codePath);
 
+const Constants = imports.constants;
+
+Constants.init(filemanager);
+
 const Prefs = imports.preferences;
 const Gettext = imports.gettext;
 
diff --git a/extensions/desktop-icons-ng/enums.js b/extensions/desktop-icons-ng/enums.js
index db9dbc8..1989f7b 100644
--- a/extensions/desktop-icons-ng/enums.js
+++ b/extensions/desktop-icons-ng/enums.js
@@ -1,4 +1,4 @@
-/* exported ICON_SIZE ICON_WIDTH ICON_HEIGHT START_CORNER FileType StoredCoordinates Selection UndoStatus FileExistOperation WhatToDoWithExecutable DEFAULT_ATTRIBUTES TERMINAL_SCHEMA SCHEMA_NEMO SCHEMA_GTK SCHEMA SCHEMA_MUTTER EXEC_KEY NEMO_SCRIPTS_DIR S_IXUSR S_IWOTH */
+/* exported ICON_SIZE ICON_WIDTH ICON_HEIGHT START_CORNER FileType StoredCoordinates Selection UndoStatus FileExistOperation WhatToDoWithExecutable DEFAULT_ATTRIBUTES TERMINAL_SCHEMA SCHEMA_GTK SCHEMA SCHEMA_MUTTER EXEC_KEY S_IXUSR S_IWOTH */
 /* DING: Desktop Icons New Generation for GNOME Shell
  *
  * Copyright (C) 2019 Sergio Costas (rastersoft@gmail.com)
@@ -71,11 +71,9 @@ var WhatToDoWithExecutable = {
 
 var DEFAULT_ATTRIBUTES = 'metadata::*,standard::*,access::*,time::modified,unix::mode';
 var TERMINAL_SCHEMA = 'org.gnome.desktop.default-applications.terminal';
-var SCHEMA_NEMO = 'org.nemo.preferences';
 var SCHEMA_GTK = 'org.gtk.Settings.FileChooser';
 var SCHEMA = 'org.gnome.shell.extensions.ding';
 var SCHEMA_MUTTER = 'org.gnome.mutter';
 var EXEC_KEY = 'exec';
-var NEMO_SCRIPTS_DIR = '.local/share/nemo/scripts';
 var S_IXUSR = 0o00100;
 var S_IWOTH = 0o00002;
diff --git a/extensions/desktop-icons-ng/extension.js b/extensions/desktop-icons-ng/extension.js
index 52de907..179d202 100644
--- a/extensions/desktop-icons-ng/extension.js
+++ b/extensions/desktop-icons-ng/extension.js
@@ -20,6 +20,7 @@
 const GLib = imports.gi.GLib;
 const Gio = imports.gi.Gio;
 const Meta = imports.gi.Meta;
+const Shell = imports.gi.Shell;
 
 const Main = imports.ui.main;
 
@@ -271,6 +272,9 @@ function launchDesktop() {
     argv.push('-L');
     argv.push(Config.LOCALEDIR);
 
+    argv.push('-F');
+    argv.push(getFileManager());
+
     data.currentProcess = new LaunchSubprocess(0, 'DING', '-U');
     data.currentProcess.setCwd(GLib.get_home_dir());
     data.currentProcess.spawnv(argv);
@@ -309,6 +313,26 @@ function launchDesktop() {
     });
 }
 
+function getFileManager() {
+    let fileManager = 'nemo';
+    let defaultApp = Gio.AppInfo.get_default_for_type('inode/directory', false);
+    let defaultFileManager = defaultApp.get_id();
+
+    if (defaultFileManager.includes('nemo')) {
+        // === "nemo.desktop") {
+        fileManager = 'nemo';
+    } else if (defaultFileManager.includes('Nautilus')) {
+        fileManager = 'nautilus';
+    } else {
+    // NOTE(210518, jgjeong) : If default is neither nemo nor nautilus,just choose one of them
+        let nemoExists = Shell.AppSystem.get_default().lookup_app('nemo.desktop');
+        if (!nemoExists)
+            fileManager = 'nautilus';
+
+    }
+    return fileManager;
+}
+
 /**
  * This class encapsulates the code to launch a subprocess that can detect whether a window belongs to it
  * It only accepts to do it under Wayland, because under X11 there is no need to do these tricks
diff --git a/extensions/desktop-icons-ng/fileItem.js b/extensions/desktop-icons-ng/fileItem.js
index df39d32..4f953f6 100644
--- a/extensions/desktop-icons-ng/fileItem.js
+++ b/extensions/desktop-icons-ng/fileItem.js
@@ -29,6 +29,7 @@ const DesktopIconsUtil = imports.desktopIconsUtil;
 const Prefs = imports.preferences;
 const Enums = imports.enums;
 const DBusUtils = imports.dbusUtils;
+const Constants = imports.constants;
 
 const ByteArray = imports.byteArray;
 const Mainloop = imports.mainloop; /* eslint-disable-line no-restricted-properties */
@@ -52,8 +53,8 @@ var FileItem = class {
 
         this._file = file;
 
-        this._savedCoordinates = this._readCoordinatesFromAttribute(fileInfo, 'metadata::nemo-icon-position');
-        this._dropCoordinates = this._readCoordinatesFromAttribute(fileInfo, 'metadata::nemo-drop-position');
+        this._savedCoordinates = this._readCoordinatesFromAttribute(fileInfo, Constants.ICON_POSITION_METADATA);
+        this._dropCoordinates = this._readCoordinatesFromAttribute(fileInfo, Constants.DND_POSITION_METADATA);
 
         this.actor = new Gtk.EventBox({ visible: true });
         this.actor.connect('destroy', () => this._onDestroy());
@@ -220,7 +221,7 @@ var FileItem = class {
             dropDestination.drag_dest_set_target_list(targets);
             dropDestination.connect('drag-data-received', (widget, context, x, y, selection, info, unusedTime) => {
                 if (info === 1 || info === 2) {
-                    let fileList = DesktopIconsUtil.getFilesFromNemoDnD(selection, info);
+                    let fileList = DesktopIconsUtil.getFilesFromFileManagerDnD(selection, info);
                     if (fileList.length !== 0) {
                         if (this._desktopManager.dragItem && (this._desktopManager.dragItem.uri === this._file.get_uri() || !(this._isValidDesktopFile || this.isDirectory))) {
                             // Dragging a file/folder over itself or over another file will do nothing, allow drag to directory or validdesktop file
@@ -235,7 +236,7 @@ var FileItem = class {
                             let data = Gio.File.new_for_uri(fileList[0]).query_info('id::filesystem', Gio.FileQueryInfoFlags.NONE, null);
                             let idFs = data.get_attribute_string('id::filesystem');
                             if (this._desktopManager.desktopFsId === idFs) {
-                                DBusUtils.NemoFileOperationsProxy.MoveURIsRemote(fileList, this._file.get_uri(),
+                                DBusUtils.FileOperationsProxy.MoveURIsRemote(fileList, this._file.get_uri(),
                                     (result, error) => {
                                         if (error)
                                             throw new Error(`Error moving files: ${error.message}`);
@@ -243,7 +244,7 @@ var FileItem = class {
                                     }
                                 );
                             } else {
-                                DBusUtils.NemoFileOperationsProxy.CopyURIsRemote(fileList, this._file.get_uri(),
+                                DBusUtils.FileOperationsProxy.CopyURIsRemote(fileList, this._file.get_uri(),
                                     (result, error) => {
                                         if (error)
                                             throw new Error(`Error moving files: ${error.message}`);
@@ -252,7 +253,7 @@ var FileItem = class {
                                 );
                             }
                         } else {
-                            DBusUtils.NemoFileOperationsProxy.TrashFilesRemote(fileList,
+                            DBusUtils.FileOperationsProxy.TrashFilesRemote(fileList,
                                 (result, error) => {
                                     if (error)
                                         throw new Error(`Error moving files: ${error.message}`);
@@ -433,7 +434,7 @@ var FileItem = class {
         let iconSet = false;
 
         let thumbnailFactory = GnomeDesktop.DesktopThumbnailFactory.new(GnomeDesktop.DesktopThumbnailSize.LARGE);
-        if (Prefs.nemoSettings.get_string('show-image-thumbnails') !== 'never' &&
+        if (Prefs.fileManagerSettings.get_string('show-image-thumbnails') !== 'never' &&
             thumbnailFactory.can_thumbnail(this._file.get_uri(),
                 this._attributeContentType,
                 this._modifiedTime)) {
@@ -799,7 +800,8 @@ var FileItem = class {
                 this._desktopManager.doTrash();
             });
             this._menu.add(this._actionTrash);
-            if (Prefs.nemoSettings.get_boolean('enable-delete')) {
+            var deleteKeyValue = Constants.isFileManagerNemo ? 'enable-delete' : 'show-delete-permanently';
+            if (Prefs.fileManagerSettings.get_boolean(deleteKeyValue)) {
                 this._actionDelete = new Gtk.MenuItem({ label: _('Delete permanently') });
                 this._actionDelete.connect('activate', () => {
                     this._desktopManager.doDeletePermanently();
@@ -1041,10 +1043,10 @@ var FileItem = class {
             let info = new Gio.FileInfo();
             if (pos !== null) {
                 this._savedCoordinates = [pos[0], pos[1]];
-                info.set_attribute_string('metadata::nemo-icon-position', `${pos[0]},${pos[1]}`);
+                info.set_attribute_string(Constants.ICON_POSITION_METADATA, `${pos[0]},${pos[1]}`);
             } else {
                 this._savedCoordinates = null;
-                info.set_attribute_string('metadata::nemo-icon-position', '');
+                info.set_attribute_string(Constants.ICON_POSITION_METADATA, '');
             }
             this.file.set_attributes_from_info(info, Gio.FileQueryInfoFlags.NONE, null);
         } catch (e) {
@@ -1060,10 +1062,10 @@ var FileItem = class {
         let info = new Gio.FileInfo();
         if (pos !== null) {
             this._dropCoordinates = [pos[0], pos[1]];
-            info.set_attribute_string('metadata::nemo-drop-position', `${pos[0]},${pos[1]}`);
+            info.set_attribute_string(Constants.DND_POSITION_METADATA, `${pos[0]},${pos[1]}`);
         } else {
             this._dropCoordinates = null;
-            info.set_attribute_string('metadata::nemo-drop-position', '');
+            info.set_attribute_string(Constants.DND_POSITION_METADATA, '');
         }
         this.file.set_attributes_from_info(info, Gio.FileQueryInfoFlags.NONE, null);
     }
diff --git a/extensions/desktop-icons-ng/po/ko.po b/extensions/desktop-icons-ng/po/ko.po
index 1963b77..077ed30 100644
--- a/extensions/desktop-icons-ng/po/ko.po
+++ b/extensions/desktop-icons-ng/po/ko.po
@@ -66,12 +66,12 @@ msgid "Execute"
 msgstr "실행"
 
 #: ../desktopManager.js:131
-msgid "Nemo File Manager not found"
-msgstr "니모 파일 관리자를 찾을 수 없습니다."
+msgid "File Manager not found"
+msgstr "파일 관리자를 찾을 수 없습니다."
 
 #: ../desktopManager.js:132
-msgid "The Nemo File Manager is mandatory to work with Desktop Icons NG."
-msgstr "니모 파일 관리자는 Desktop Icons NG로 작업하는 데 필수입니다."
+msgid "Nemo or Nautilus File Manager is mandatory to work with Desktop Icons NG."
+msgstr "Desktop Icons NG로 작업하는 데 니모 혹은 노틸러스 파일 관리자가 필요합니다."
 
 #: ../desktopManager.js:543
 msgid "New Folder"
@@ -319,8 +319,8 @@ msgid "Highlight the drop place during Drag'n'Drop"
 msgstr "드래그 앤 드랍 시 드랍 위치 강조 효과"
 
 #: ../preferences.js:112
-msgid "Settings shared with Nemo"
-msgstr "Nemo 파일 관리자와 설정 공유"
+msgid "Settings shared with File Manager"
+msgstr "파일 관리자와 설정 공유"
 
 #: ../preferences.js:118
 msgid "Click type for open files"
diff --git a/extensions/desktop-icons-ng/preferences.js b/extensions/desktop-icons-ng/preferences.js
index 760db75..bc6157e 100644
--- a/extensions/desktop-icons-ng/preferences.js
+++ b/extensions/desktop-icons-ng/preferences.js
@@ -26,6 +26,7 @@ const GObject = imports.gi.GObject;
 const Gio = imports.gi.Gio;
 const GioSSS = Gio.SettingsSchemaSource;
 
+const Constants = imports.constants;
 const Enums = imports.enums;
 
 const Gettext = imports.gettext;
@@ -34,11 +35,11 @@ var _ = Gettext.domain('ding').gettext;
 
 var extensionPath;
 
-var nemoSettings;
+var fileManagerSettings;
 var gtkSettings;
 var desktopSettings;
 var mutterSettings = null;
-// This is already in nemo settings, so it should not be made tweakable here
+// This is already in File Manager settings, so it should not be made tweakable here
 var CLICK_POLICY_SINGLE = false;
 
 function init(path) {
@@ -46,13 +47,13 @@ function init(path) {
     let schemaSource = GioSSS.get_default();
     let schemaGtk = schemaSource.lookup(Enums.SCHEMA_GTK, true);
     gtkSettings = new Gio.Settings({ settings_schema: schemaGtk });
-    let schemaObj = schemaSource.lookup(Enums.SCHEMA_NEMO, true);
+    let schemaObj = schemaSource.lookup(Constants.SCHEMA_FILEMANAGER, true);
     if (!schemaObj) {
-        nemoSettings = null;
+        fileManagerSettings = null;
     } else {
-        nemoSettings = new Gio.Settings({ settings_schema: schemaObj });
-        nemoSettings.connect('changed', _onNemoSettingsChanged);
-        _onNemoSettingsChanged();
+        fileManagerSettings = new Gio.Settings({ settings_schema: schemaObj });
+        fileManagerSettings.connect('changed', _onFileManagerSettingsChanged);
+        _onFileManagerSettingsChanged();
     }
     desktopSettings = getSchema(Enums.SCHEMA);
     let schemaMutter = schemaSource.lookup(Enums.SCHEMA_MUTTER, true);
@@ -110,23 +111,25 @@ function showPreferences() {
 
     frame.add(new Gtk.Separator({ orientation: Gtk.Orientation.HORIZONTAL }));
 
-    let nemoFrame = new Gtk.Frame({ label: _('Settings shared with Nemo'),
+    let fileManagerFrame = new Gtk.Frame({ label: _('Settings shared with File Manager'),
         shadow_type: Gtk.ShadowType.ETCHED_IN });
-    let nemoBox = new Gtk.Box({ orientation: Gtk.Orientation.VERTICAL, margin: 5, spacing: 10 });
-    nemoFrame.add(nemoBox);
-    frame.add(nemoFrame);
-
-    nemoBox.add(buildSelector(nemoSettings, 'click-policy', _('Click type for open files'), { 'single': _('Single click'), 'double': _('Double click') }));
-    nemoBox.add(buildSwitcher(gtkSettings, 'show-hidden', _('Show hidden files')));
-    nemoBox.add(buildSwitcher(nemoSettings, 'enable-delete', _('Show a context menu item to delete permanently')));
-    nemoBox.add(buildSelector(nemoSettings,
+    let filemanagerBox = new Gtk.Box({ orientation: Gtk.Orientation.VERTICAL, margin: 5, spacing: 10 });
+    fileManagerFrame.add(filemanagerBox);
+    frame.add(fileManagerFrame);
+
+    filemanagerBox.add(buildSelector(fileManagerSettings, 'click-policy', _('Click type for open files'), { 'single': _('Single click'), 'double': _('Double click') }));
+    filemanagerBox.add(buildSwitcher(gtkSettings, 'show-hidden', _('Show hidden files')));
+    let deleteKeyValue = Constants.isFileManagerNemo ? 'enable-delete' : 'show-delete-permanently';
+
+    filemanagerBox.add(buildSwitcher(fileManagerSettings, deleteKeyValue, _('Show a context menu item to delete permanently')));
+    filemanagerBox.add(buildSelector(fileManagerSettings,
         'executable-text-activation',
         _('Action to do when launching a program from the desktop'), {
             'display': _('Display the content of the file'),
             'launch': _('Launch the file'),
             'ask': _('Ask what to do'),
         }));
-    nemoBox.add(buildSelector(nemoSettings,
+    filemanagerBox.add(buildSelector(fileManagerSettings,
         'show-image-thumbnails',
         _('Show image thumbnails'), {
             'never': _('Never'),
@@ -172,8 +175,8 @@ function buildSelector(settings, key, labelText, elements) {
     return hbox;
 }
 
-function _onNemoSettingsChanged() {
-    CLICK_POLICY_SINGLE = nemoSettings.get_string('click-policy') === 'single';
+function _onFileManagerSettingsChanged() {
+    CLICK_POLICY_SINGLE = fileManagerSettings.get_string('click-policy') === 'single';
 }
 
 function getIconSize() {
