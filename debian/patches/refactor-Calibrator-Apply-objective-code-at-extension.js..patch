From: Saehan Lee <saehan_lee@tmax.co.kr>
Date: Fri, 30 Jul 2021 09:56:56 +0900
Subject: [refactor] Calibrator : Apply objective code at extension.js. Modify
 calibrator callback timing

- Configure Calibrator callback after confirm display change.
- Apply calbratable device class

[IMS] N/A
---
 extensions/calibrator/calibrator.js |   4 +-
 extensions/calibrator/extension.js  | 194 +++++++++++++++++++++++-------------
 2 files changed, 128 insertions(+), 70 deletions(-)

diff --git a/extensions/calibrator/calibrator.js b/extensions/calibrator/calibrator.js
index 8216509..f08de93 100644
--- a/extensions/calibrator/calibrator.js
+++ b/extensions/calibrator/calibrator.js
@@ -18,7 +18,7 @@ class Device {
 var LibinputDevice = class LibinputDevice extends Device { // eslint-disable-line no-unused-vars
     calibrate(matrix = IdentityMatrix) {
         let setPropCommand = `xinput --set-prop ${this._deviceId.toString()} "libinput Calibration Matrix" ${matrix.join(' ')}`;
-        GLib.spawn_command_line_sync(setPropCommand);
+        GLib.spawn_command_line_async(setPropCommand);
     }
 };
 
@@ -76,6 +76,6 @@ var WacomDevice = class WacomDevice extends Device { // eslint-disable-line no-u
         let rightDownY = leftUpY + height / matrix[4];
 
         let setPropCommand = `xinput --set-prop ${this._deviceId.toString()} "Wacom Tablet Area" ${Math.floor(leftUpX)} ${Math.floor(leftUpY)} ${Math.ceil(rightDownX)} ${Math.ceil(rightDownY)}`;
-        GLib.spawn_command_line_sync(setPropCommand);
+        GLib.spawn_command_line_async(setPropCommand);
     }
 };
diff --git a/extensions/calibrator/extension.js b/extensions/calibrator/extension.js
index 8cdf03e..a178939 100644
--- a/extensions/calibrator/extension.js
+++ b/extensions/calibrator/extension.js
@@ -1,58 +1,89 @@
 const ByteArray = imports.byteArray;
 
-const { Gio, GLib } = imports.gi;
-
-const Main = imports.ui.main;
-
-const IdentityMatrix = '1.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 1';
-
-var _resolution = [-1, -1];
+const { Clutter, Gio, GLib, GObject } = imports.gi;
+
+const WindowManager = imports.ui.windowManager;
+
+const ExtensionUtils = imports.misc.extensionUtils;
+const Me = ExtensionUtils.getCurrentExtension();
+
+const Calibrator = Me.imports.calibrator;
+
+const IdentityMatrix = [1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0];
+
+/* After Display changed at gnome-control-center, Gnome-shell pop up DisplayChangeDialog to confirm
+ * user's decison.
+ * After user's confirm decision, Calibrator should be called to calibrate touch setting.
+ * In order to do this, we need replace DisplayChangeDialog.
+ * So, we make new DisplayChangeDialog(TmaxDispalyChangeDialog), which is inherited old DisplayChangeDialog.
+ * If we disable calibrator extension, the extension restore DisplayChangeDialog.
+ */
+var TmaxDisplayChangeDialog = GObject.registerClass(
+    class DisplayChangeDialog extends WindowManager.DisplayChangeDialog {
+        _init(wm) {
+            super._init(wm);
+
+            /* Translators: this and the following message should be limited in length,
+        to avoid ellipsizing the labels.
+        */
+            this.clearButtons();
+            this._cancelButton = this.addButton({ label: _('Revert Settings'), // eslint-disable-line no-undef
+                action: this._onFailure.bind(this),
+                key: Clutter.KEY_Escape });
+            this._okButton = this.addButton({ label: _('Keep Changes'), // eslint-disable-line no-undef
+                action: this.onSuccess.bind(this),
+                default: true });
+        }
 
-var _monitorId;
+        onSuccess() {
+            this._wm.complete_display_change(true);
+            this.close();
+            _asyncCalibrate();
+        }
+    });
 
-function _getXInputCommand(device, matrix = IdentityMatrix) {
-    return `xinput --set-prop ${device.toString()} "libinput Calibration Matrix" ${matrix}`;
-}
+var OldDisplayChangeDialog = null;
 
 function init(metadata) { // eslint-disable-line no-unused-vars
 }
 
 function enable() { // eslint-disable-line no-unused-vars
-    _monitorId = Main.layoutManager.connect('monitors-changed', () => {
-        let calibratableDeviceId = _getCalibratableDeviceList();
-        if (calibratableDeviceId.length <= 0)
-            return;
-
-        if (_resolution[0] === -1 && _resolution[1] === -1) {
-            _resolution[0] = Main.layoutManager.primaryMonitor.width;
-            _resolution[1] = Main.layoutManager.primaryMonitor.height;
-        } else if (_resolution[0] !== Main.layoutManager.primaryMonitor.width ||
-                   _resolution[1] !== Main.layoutManager.primaryMonitor.height) {
-            _resolution[0] = Main.layoutManager.primaryMonitor.width;
-            _resolution[1] = Main.layoutManager.primaryMonitor.height;
-            _calibrate(calibratableDeviceId);
-        }
-    });
-
     // Of course, when 'monitors-changed' signal is emitted, DeviceId array will be refreshed. but maybe need it later.
-    let calibratableDeviceId = _getCalibratableDeviceList();
+    OldDisplayChangeDialog = WindowManager.DisplayChangeDialog;
+    WindowManager.DisplayChangeDialog = TmaxDisplayChangeDialog;
+
     let logFile = Gio.File.new_for_path(`${global.userdatadir}/calibration`);
-    if (logFile.query_exists(null)) {
-        let [ok, logByteArray] = logFile.load_contents(null);
-        if (!ok) {
-            global.log('there are something wrong during load file contents');
-            return;
-        }
+    if (!logFile.query_exists(null)) {
+        global.log('There are no log files, stop loading calibration');
+        return;
+    }
 
-        let logCalibrationMatrix = ByteArray.toString(logByteArray);
-        calibratableDeviceId.forEach(deviceId => {
-            GLib.spawn_command_line_sync(_getXInputCommand(deviceId, logCalibrationMatrix));
-        });
+    /* logFile include calibration setting which recently applied calibration variable before logout.
+     * If there are logFile exist, we need to apply calibration to input driver.
+     * logFile is calibration Matrix array (3 * 3). we load the matrix and use it.
+     */
+    let [ok, logByteArray] = logFile.load_contents(null);
+    if (!ok) {
+        global.log('There are something wrong during load file contents');
+        return;
     }
+
+    let logCalibrationMatrixString = ByteArray.toString(logByteArray);
+    let logCalibrationMatrix = logCalibrationMatrixString.split(' ');
+    logCalibrationMatrix = logCalibrationMatrix.map(element => parseFloat(element));
+
+    let asyncLoadCalibration = async () => {
+        let calibratableDeviceList = await _asyncGetCalibratableDeviceList();
+        calibratableDeviceList.forEach(device => {
+            device.calibrate(logCalibrationMatrix);
+        });
+    };
+    asyncLoadCalibration();
+
 }
 
 function disable() { // eslint-disable-line no-unused-vars
-    Main.layoutManager.disconnect(_monitorId);
+    WindowManager.DisplayChangeDialog = OldDisplayChangeDialog;
 }
 
 
@@ -80,7 +111,7 @@ function disable() { // eslint-disable-line no-unused-vars
  * After we get values of above variable, we can generate calibration matrix.
 */
 
-function _extractCalibrationElement(stdoutLines, calibratableDeviceId) {
+function _extractCalibrationElement(stdoutLines, calibratableDeviceList) {
     let stdoutString = stdoutLines.join(' ');
 
     let filterWord = ['min_x=', 'max_x=', 'min_y=', 'max_y=', '"MinX"\t"', '"MaxX"\t"', '"MinY"\t"', '"MaxY"\t"'];
@@ -90,7 +121,15 @@ function _extractCalibrationElement(stdoutLines, calibratableDeviceId) {
         return parseInt(stdoutString);
     });
 
-    let calibrationMatrix = IdentityMatrix.split(' ');
+    let calibrationMatrix = IdentityMatrix.slice();
+    if (calibrationElement[5] === calibrationElement[4] ||
+       calibrationElement[1] === calibrationElement[0] ||
+       calibrationElement[7] === calibrationElement[6] ||
+       calibrationElement[3] === calibrationElement[2]
+    ) {
+        global.log('divided by zero exception');
+        return;
+    }
     calibrationMatrix[0] = (calibrationElement[1] - calibrationElement[0]) / (calibrationElement[5] - calibrationElement[4]);
     calibrationMatrix[2] = -1 * calibrationElement[4] * calibrationMatrix[0] / (calibrationElement[1] - calibrationElement[0]);
     calibrationMatrix[4] = (calibrationElement[3] - calibrationElement[2]) / (calibrationElement[7] - calibrationElement[6]);
@@ -106,18 +145,18 @@ function _extractCalibrationElement(stdoutLines, calibratableDeviceId) {
     outputStream.write(logByteStream, null);
     outputStream.close(null);
 
-    calibratableDeviceId.forEach(deviceId => {
-        GLib.spawn_command_line_sync(_getXInputCommand(deviceId, calibrationMatrix.join(' ')));
+    calibratableDeviceList.forEach(device => {
+        device.calibrate(calibrationMatrix);
     });
 }
 
-function _calibrate(calibratableDeviceId) {
+function _calibrate(calibratableDeviceList) {
 
     // HandleMe : During calibrating, resolution can be changed. then we close old one, and start new one. it can be happen.
 
     // Before calibrating, We need to unset previous Calibration Matrix. Because, It causes that wrong Calibration Matrix.
-    calibratableDeviceId.forEach(deviceId => {
-        GLib.spawn_command_line_sync(_getXInputCommand(deviceId));
+    calibratableDeviceList.forEach(deviceId => {
+        deviceId.calibrate();
     });
 
     // we must run xinput-calibrator asynchronously.
@@ -129,7 +168,7 @@ function _calibrate(calibratableDeviceId) {
         null
     );
 
-    // we don't need stdin value
+    // we don't need stdin value , stdout is automatically deleted by following GLib.child_watch_add function
     GLib.close(stdin);
 
     // we need to watch xinput-calibrator's processing, when it's execution is done, we can get xinpuuut-calibrator's output.
@@ -152,44 +191,63 @@ function _calibrate(calibratableDeviceId) {
         stdoutStream.close(null);
         GLib.spawn_close_pid(pid);
 
-        _extractCalibrationElement(stdoutLines, calibratableDeviceId);
+        _extractCalibrationElement(stdoutLines, calibratableDeviceList);
     });
 }
 
 function _getCalibratableDeviceList() {
-    let xinputListCommand = 'xinput --list';
-    let [isOk, xListByteArray] = GLib.spawn_command_line_sync(xinputListCommand);
+    let listCommand = 'xinput --list';
+    let [success, listByteArray] = GLib.spawn_command_line_sync(listCommand);
 
-    if (!isOk) {
+    if (!success) {
         global.log('there are something wrong happen during get calibratable device list');
         return;
     }
 
-    let xListString = ByteArray.toString(xListByteArray);
-    let xDeviceList = xListString.split('\n');
+    let listString = ByteArray.toString(listByteArray);
+    let deviceList = listString.split('\n');
 
-    let xDeviceIdList = xDeviceList.reduce((result, xDevice) => {
-        if (xDevice.indexOf('master') !== -1)
-            return result;
+    let deviceIdList = deviceList.reduce((idList, device) => {
+        if (device.indexOf('master') !== -1)
+            return idList;
 
-        let deviceId = xDevice.split('id=');
+        let deviceId = device.split('id=');
         if (deviceId.length > 1)
-            result.push(parseInt(deviceId[1]));
-
-        return result;
+            idList.push(parseInt(deviceId[1]));
+        return idList;
     }, []);
 
-    let calibratableDeviceId = xDeviceIdList.filter(xDeviceId => {
-        let listPropsCommand = `xinput --list-props ${xDeviceId.toString()}`;
-        let [ok, infoByteArray] = GLib.spawn_command_line_sync(listPropsCommand);
-        if (!ok) {
+    let calibratableDeviceList = deviceIdList.reduce((list, deviceId) => {
+        let listPropsCommand = `xinput --list-props ${deviceId.toString()}`;
+        let [propSuccess, propsByteArray] = GLib.spawn_command_line_sync(listPropsCommand);
+        if (!propSuccess) {
             global.log('there are something wrong happen during get calibratable device property');
-            return false;
+            return list;
         }
-        let infoString = ByteArray.toString(infoByteArray);
+        let propsString = ByteArray.toString(propsByteArray);
+
+        if (propsString.indexOf('libinput Calibration Matrix') !== -1) {
+            list.push(new Calibrator.LibinputDevice(deviceId));
+            return list;
+        } else if (propsString.indexOf('Wacom Tablet Area') !== -1) {
+            list.push(new Calibrator.WacomDevice(deviceId));
+            return list;
+        }
+        return list;
+    }, []);
 
-        return infoString.indexOf('libinput Calibration Matrix') !== -1;
+    return calibratableDeviceList;
+}
+
+function _asyncGetCalibratableDeviceList() {
+    return new Promise(resolve => {
+        let result = _getCalibratableDeviceList();
+        global.log('loading');
+        resolve(result);
     });
+}
 
-    return calibratableDeviceId;
+async function _asyncCalibrate() {
+    let calibratableDeviceList = await _asyncGetCalibratableDeviceList();
+    _calibrate(calibratableDeviceList);
 }
