From: jingi_jeong <jingi_jeong@tmax.co.kr>
Date: Fri, 19 Nov 2021 14:20:12 +0900
Subject: [feat] desktop-icons-ng : Change handling of desktop folder sub-file
 operation

- Change handling of desktop folder sub-file operation
- Allocate TextView size to calculate its proper size if get_preferred_width() return value is different from previous call
- Add Korean translation

[IMS] N/A
---
 extensions/desktop-icons-ng/askNamePopup.js        |  81 ----------
 extensions/desktop-icons-ng/desktopGrid.js         |   9 ++
 extensions/desktop-icons-ng/desktopManager.js      | 127 ++++++++-------
 extensions/desktop-icons-ng/fileItem.js            | 110 ++++++-------
 extensions/desktop-icons-ng/meson.build            |   3 +-
 extensions/desktop-icons-ng/po/POTFILES.in         |   3 +-
 extensions/desktop-icons-ng/po/ko.po               |  37 +++--
 extensions/desktop-icons-ng/renameArea.js          | 149 ------------------
 extensions/desktop-icons-ng/renameView.js          | 173 +++++++++++++++++++++
 extensions/desktop-icons-ng/selectionCalculator.js |   6 +-
 extensions/desktop-icons-ng/stylesheet.css         |   8 +-
 11 files changed, 335 insertions(+), 371 deletions(-)
 delete mode 100644 extensions/desktop-icons-ng/askNamePopup.js
 delete mode 100644 extensions/desktop-icons-ng/renameArea.js
 create mode 100644 extensions/desktop-icons-ng/renameView.js

diff --git a/extensions/desktop-icons-ng/askNamePopup.js b/extensions/desktop-icons-ng/askNamePopup.js
deleted file mode 100644
index 2d665e8..0000000
--- a/extensions/desktop-icons-ng/askNamePopup.js
+++ /dev/null
@@ -1,81 +0,0 @@
-/* exported AskNamePopup */
-
-/* DING: Desktop Icons New Generation for GNOME Shell
- *
- * Copyright (C) 2019 Sergio Costas (rastersoft@gmail.com)
- * Based on code original (C) Carlos Soriano
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, version 3 of the License.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-const Gtk = imports.gi.Gtk;
-const Gio = imports.gi.Gio;
-const GLib = imports.gi.GLib;
-const Gettext = imports.gettext.domain('ding');
-
-const _ = Gettext.gettext;
-
-var AskNamePopup = class {
-
-    constructor(filename, title, parentWindow) {
-
-        this._desktopPath = GLib.get_user_special_dir(GLib.UserDirectory.DIRECTORY_DESKTOP);
-        this._window = new Gtk.Dialog({ use_header_bar: true,
-            window_position: Gtk.WindowPosition.CENTER_ON_PARENT,
-            transient_for: parentWindow,
-            resizable: false,
-            skip_taskbar_hint: true });
-
-        this._button = this._window.add_button(_('OK'), Gtk.ResponseType.OK);
-        this._window.add_button(_('Cancel'), Gtk.ResponseType.CANCEL);
-        this._window.set_modal(true);
-        this._window.set_title(title);
-        let contentArea = this._window.get_content_area();
-        this._textArea = new Gtk.Entry();
-        if (filename)
-            this._textArea.text = filename;
-
-        contentArea.pack_start(this._textArea, true, true, 5);
-        this._textArea.connect('activate', () => {
-            if (this._button.sensitive)
-                this._window.response(Gtk.ResponseType.OK);
-
-        });
-        this._textArea.connect('changed', () => {
-            this._validate();
-        });
-        this._validate();
-    }
-
-    _validate() {
-        let text = this._textArea.text;
-        let finalPath = `${this._desktopPath}/${text}`;
-        let finalFile = Gio.File.new_for_commandline_arg(finalPath);
-        if (text === '' || text.indexOf('/') !== -1 || finalFile.query_exists(null))
-            this._button.sensitive = false;
-        else
-            this._button.sensitive = true;
-
-    }
-
-    run() {
-        this._window.show_all();
-        let retval = this._window.run();
-        this._window.hide();
-        if (retval === Gtk.ResponseType.OK)
-            return this._textArea.text;
-        else
-            return null;
-
-    }
-};
diff --git a/extensions/desktop-icons-ng/desktopGrid.js b/extensions/desktop-icons-ng/desktopGrid.js
index f69b42e..b0bd035 100644
--- a/extensions/desktop-icons-ng/desktopGrid.js
+++ b/extensions/desktop-icons-ng/desktopGrid.js
@@ -333,6 +333,15 @@ var DesktopGrid = class {
         }
     }
 
+    reorderItemBack(fileItem) {
+        let [column, row, unused] = this._fileItems[fileItem.uri];
+        let localX = column * (this._elementWidth + elementSpacing);
+        let localY = row * (this._elementHeight + elementSpacing);
+
+        this._container.remove(fileItem.actor);
+        this._container.put(fileItem.actor, localX + elementSpacing, localY + elementSpacing);
+    }
+
     addFileItemCloseTo(fileItem, x, y, coordinatesAction) {
         let addVolumesOpposite = Prefs.desktopSettings.get_boolean('add-volumes-opposite');
         let [column, row] = this._getEmptyPlaceClosestTo(x,
diff --git a/extensions/desktop-icons-ng/desktopManager.js b/extensions/desktop-icons-ng/desktopManager.js
index 3b6f23f..7a4e704 100644
--- a/extensions/desktop-icons-ng/desktopManager.js
+++ b/extensions/desktop-icons-ng/desktopManager.js
@@ -67,10 +67,11 @@ var DesktopManager = class {
         this._desktopFilesChanged = false;
         this._readingDesktopFiles = true;
         this._scriptFilesChanged = false;
-        this._toDelete = [];
         this._deletingFilesRecursively = false;
+        this._toDelete = [];
         this._fileList = [];
         this._createdFileName = null;
+        this._renamedFileName = null;
         this._initDesktop();
         this._scriptsDir = DesktopIconsUtil.getScriptsDir();
         this._monitorScriptDir = this._scriptsDir.monitor_directory(Gio.FileMonitorFlags.WATCH_MOVES, null);
@@ -126,7 +127,7 @@ var DesktopManager = class {
 
         this._scriptsList = [];
         this._readScriptFileList();
-        this._selectionCalculator = new SelectionCalculator.selectionCalculator();
+        this._selectionCalculator = new SelectionCalculator.SelectionCalculator();
 
         // Check if File Manager is available
         try {
@@ -318,6 +319,8 @@ var DesktopManager = class {
         case 1:
         case 2:
             if (fileList.length !== 0) {
+                for (let item of this._fileList)
+                    item.unsetSelected();
                 this.clearFileCoordinates(fileList, [xDestination, yDestination]);
                 let data = Gio.File.new_for_uri(fileList[0]).query_info('id::filesystem', Gio.FileQueryInfoFlags.NONE, null);
                 let idFs = data.get_attribute_string('id::filesystem');
@@ -423,8 +426,9 @@ var DesktopManager = class {
     }
 
     onPressButton(x, y, event, unusedGrid) {
-        for (let fileItem of this._fileList)
-            fileItem.clear();
+        let renamingItem = this.getRenaming();
+        if (renamingItem)
+            renamingItem.finishRename();
 
         this._clickX = Math.floor(x);
         this._clickY = Math.floor(y);
@@ -529,11 +533,9 @@ var DesktopManager = class {
     }
 
     onKeyPress(event, unusedGrid) {
-        if (this.beingRenamed())
+        if (this.getRenaming())
             return false;
 
-        // FIXME : while renaming, doesnt accept key press
-        log('desktopManager key press');
         let symbol = event.get_keyval()[1];
         let isCtrl = (event.get_state()[1] & Gdk.ModifierType.CONTROL_MASK) !== 0;
         let isShift = (event.get_state()[1] & Gdk.ModifierType.SHIFT_MASK) !== 0;
@@ -1283,9 +1285,7 @@ var DesktopManager = class {
             return;
         }
 
-        log(`event type = ${eventType}`);
         switch (eventType) {
-        // TODO : Check Every Type is working well
         case Gio.FileMonitorEvent.MOVED_IN:
         case Gio.FileMonitorEvent.MOVED:
         case Gio.FileMonitorEvent.CREATED:
@@ -1293,7 +1293,7 @@ var DesktopManager = class {
         case Gio.FileMonitorEvent.ATTRIBUTE_CHANGED:
             return this.onFileAttributeChanged(file);
         case Gio.FileMonitorEvent.RENAMED:
-            return this.renameIcon(file, otherFile);
+            return this.onFileRenamed(file, otherFile);
         case Gio.FileMonitorEvent.DELETED:
         case Gio.FileMonitorEvent.MOVED_OUT:
             return this.onFileDeleted(file);
@@ -1301,7 +1301,6 @@ var DesktopManager = class {
     }
 
     onFileCreated(file) {
-        log('created');
         /* Remove the coordinates that could exist to avoid conflicts between
          files that are already in the desktop and the new one
        */
@@ -1309,20 +1308,20 @@ var DesktopManager = class {
             let info = new Gio.FileInfo();
             info.set_attribute_string(Constants.ICON_POSITION_METADATA, '');
             file.set_attributes_from_info(info, Gio.FileQueryInfoFlags.NONE, null);
-        } catch (e) {} // can happen if a file is created and deleted very fast
+        } catch (e) {
+        } // can happen if a file is created and deleted very fast
+
         this.createIcon(file);
+
         let fileName = file.get_basename();
-        log(`createion file is = ${fileName}`);
-        if (this._createdFileName !== fileName) {
-            log('creation is not performed in desktop');
+        if (this._createdFileName !== fileName)
             return;
-        }
 
-        return this.startRename(this.getFileItem(file.get_basename()));
+
+        this.startRename(this.getFileItem(file.get_uri()));
     }
 
     onFileAttributeChanged(file) {
-        log('attribute changed');
         /* The desktop is what changed, and not a file inside it */
         if (file.get_uri() === this._desktopDir.get_uri()) {
             if (this._updateWritableByOthers())
@@ -1331,12 +1330,11 @@ var DesktopManager = class {
         let fileInfo = file.query_info(Enums.DEFAULT_ATTRIBUTES,
             Gio.FileQueryInfoFlags.NONE, null);
 
-        let overwriteFile = this.getFileItem(file.get_basename());
+        let overwriteFile = this.getFileItem(file.get_uri());
         if (!overwriteFile)
             return;
 
         overwriteFile.updateMetadataFromFileInfo(fileInfo);
-        // GOGOGOGOGOGOOGGOGOGO
     }
 
     onFileDeleted(file) {
@@ -1362,36 +1360,46 @@ var DesktopManager = class {
 
         let storeMode = Enums.StoredCoordinates.OVERWRITE;
         if (fileItem.savedCoordinates === null)
-            return this._addNotAssignedFileToDestkop(fileItem, storeMode);
-
-
-        if (!this._addFileToDesktop(fileItem, storeMode))
+            this._addNotAssignedFileToDestkop(fileItem, storeMode);
+        else if (!this._addFileToDesktop(fileItem, storeMode))
             this._addOutOfDesktopFile(fileItem, storeMode);
 
+        return fileItem;
     }
 
-    renameIcon(oldFile, newFile) {
-        log(`old = ${oldFile.get_basename()}`);
-        log(`new = ${newFile.get_basename()}`);
+    onFileRenamed(oldFile, newFile) {
+        let oldItem = this.getFileItem(oldFile.get_uri());
+        if (oldItem.dropCoordinates) {
+            let [X, Y] = oldItem.savedCoordinates;
+            let info = new Gio.FileInfo();
+            info.set_attribute_string(Constants.ICON_POSITION_METADATA, `${X},${Y}`);
+            newFile.set_attributes_from_info(info, Gio.FileQueryInfoFlags.NONE, null);
+        }
         this.removeIcon(oldFile);
 
         // If the file is overwritten, erase the original icon and recreate it
-        let overwriteFile = this.getFileItem(newFile.get_basename());
+        let overwriteFile = this.getFileItem(newFile.get_uri());
         if (overwriteFile)
             this.removeIcon(newFile);
 
 
+        let newIcon = this.createIcon(newFile);
+
+        if (this._renamedFileName === oldFile.get_basename())
+            newIcon.focusItem();
+
+
 
-        this.createIcon(newFile);
+        this._renamedFileName = null;
     }
 
     removeIcon(file) {
-        let name = file.get_basename();
+        let uri = file.get_uri();
         let len = this._fileList.length;
         let index = -1;
 
         for (let i = 0; i < len; i++) {
-            if (this._fileList[i].fileName === name) {
+            if (this._fileList[i].uri === uri) {
                 index = i;
                 break;
             }
@@ -1588,16 +1596,20 @@ var DesktopManager = class {
     }
 
     startRename(fileItem) {
+        if (fileItem.isSystemFolder)
+            return;
+
+
         for (let item of this._fileList)
             item.unsetSelected();
 
-        // FIXME : remove bubble if exists
         fileItem.startRename();
+        this._renamedFileName = fileItem.fileName;
     }
 
-    getFileItem(name) {
+    getFileItem(uri) {
         for (let item of this._fileList) {
-            if (item.fileName === name)
+            if (item.uri === uri)
                 return item;
 
         }
@@ -1619,7 +1631,7 @@ var DesktopManager = class {
         let fileItems = this.getCurrentSelection(false);
         if (fileItems) {
             let mimetype = Gio.content_type_guess(fileItems[0].fileName, null)[0];
-            // NOTE(20210526 : jgjeong) : Set parent window because WM determines
+            // Set parent window because WM determines
             // whether to skip the dialog to the taskbar with the presence of a parent window
             // and  hint value.
             let chooser = Gtk.AppChooserDialog.new_for_content_type(parentWindow,
@@ -1654,31 +1666,28 @@ var DesktopManager = class {
         for (let fileItem of this._fileList)
             fileItem.unsetSelected();
 
-        let newName = 'Untitled Folder';
-        let creationFailed = true;
+        let baseName = _('Untitled Folder');
+        let newName = baseName;
         let count = 2;
-        while (creationFailed) {
-            if (newName) {
-                let dir = this._desktopDir.get_child(newName);
-                try {
-                    dir.make_directory(null);
-                    let info = new Gio.FileInfo();
-                    info.set_attribute_string(Constants.DND_POSITION_METADATA, `${X},${Y}`);
-                    info.set_attribute_string(Constants.ICON_POSITION_METADATA, '');
-                    dir.set_attributes_from_info(info, Gio.FileQueryInfoFlags.NONE, null);
-                    creationFailed = false;
-                    this._createdFileName = newName;
+        let dir = this._desktopDir.get_child(newName);
+        while (dir.query_exists(null)) {
+            newName = baseName.concat(' ', (count++).toString());
+            dir = this._desktopDir.get_child(newName);
+        }
+        try {
+            dir.make_directory(null);
+            let info = new Gio.FileInfo();
+            info.set_attribute_string(Constants.DND_POSITION_METADATA, `${X},${Y}`);
+            info.set_attribute_string(Constants.ICON_POSITION_METADATA, '');
+            dir.set_attributes_from_info(info, Gio.FileQueryInfoFlags.NONE, null);
+            this._createdFileName = newName;
 
-                    if (position)
-                        return dir.get_uri();
+            if (position)
+                return dir.get_uri();
 
-                } catch (e) {
-                    let baseName = 'Untitled Folder';
-                    newName = baseName.concat(' ', (count++).toString());
-                    print(`Failed to create folder ${e.message}`);
-                }
-            }
+        } catch (e) {
         }
+        return null;
     }
 
     _newDocument(template) {
@@ -1800,12 +1809,12 @@ var DesktopManager = class {
         nextFocusItem.focusItem();
     }
 
-    beingRenamed() {
+    getRenaming() {
         for (let item of this._fileList) {
             if (item.beingRenamed())
-                return true;
+                return item;
 
         }
-        return false;
+        return null;
     }
 };
diff --git a/extensions/desktop-icons-ng/fileItem.js b/extensions/desktop-icons-ng/fileItem.js
index 5b1f31e..1d8c62b 100644
--- a/extensions/desktop-icons-ng/fileItem.js
+++ b/extensions/desktop-icons-ng/fileItem.js
@@ -30,7 +30,7 @@ const Prefs = imports.preferences;
 const Enums = imports.enums;
 const DBusUtils = imports.dbusUtils;
 const Constants = imports.constants;
-const RenameArea = imports.renameArea;
+const RenameView = imports.renameView;
 const ShowErrorPopup = imports.showErrorPopup;
 
 const ByteArray = imports.byteArray;
@@ -43,7 +43,6 @@ const _ = Gettext.gettext;
 var FileItem = class {
 
     constructor(desktopManager, file, fileInfo, fileExtra, codePath, custom) {
-        log('new fileitem');
         this._desktopPath = GLib.get_user_special_dir(GLib.UserDirectory.DIRECTORY_DESKTOP);
         this._custom = custom;
         this._codePath = codePath;
@@ -87,25 +86,13 @@ var FileItem = class {
         this._label.set_justify(Gtk.Justification.CENTER);
         this._label.set_lines(2);
 
-        this._renameArea = new RenameArea.RenameArea(this);
-
-        this._renameScrollView = new Gtk.ScrolledWindow();
-        this._renameScrollView.add(this._renameArea);
-        this._renameScrollView.set_max_content_width(90);
-        this._renameScrollView.set_min_content_width(90);
-        this._renameScrollView.set_policy(Gtk.PolicyType.EXTERNAL, Gtk.PolicyType.NEVER);
-
-        this._vAdjustment = new Gtk.Adjustment();
-        this._renameScrollView.set_vadjustment(this._vAdjustment);
-
         this._innerContainer.pack_start(this._label, false, true, 0);
+        this._renameScrollView = new RenameView.RenameScrollView(this);
         this._innerContainer.pack_start(this._renameScrollView, true, true, 0);
         this._container.pack_start(this._eventBox, false, false, 0);
         this.actor.add(this._container);
 
         this._setFileName(fileInfo.get_display_name());
-
-        // FIXME : perhaps, set position to
         this._windowError = null;
 
         /* We need to allow the "button-press" event to pass through the callbacks, to allow the DnD to work
@@ -124,10 +111,6 @@ var FileItem = class {
         this._eventBox.connect('leave-notify-event', (actor, event) => this._onLeave(actor, event));
         this._eventBox.connect('button-release-event', (actor, event) => this._onReleaseButton(actor, event));
 
-        this._vAdjustment.connect('value-changed', () => {
-            this._vAdjustment.set_value(0);
-        });
-
         /* Set the metadata and update relevant UI */
         this.updateMetadataFromFileInfo(fileInfo);
 
@@ -166,14 +149,13 @@ var FileItem = class {
             });
         }
 
-        this._renameArea.setText(this.fileName, this.fileNameLength);
         this.actor.show_all();
+
+        this._renameScrollView.setText(this.fileName, this.fileNameLength);
         this._renameScrollView.set_visible(false);
 
-        // this._updateName();
         if (this._dropCoordinates)
             this.setSelected();
-
     }
 
     _setFileName(text) {
@@ -182,13 +164,12 @@ var FileItem = class {
             text = _('Home');
         }
         this._currentFileName = text;
-        this._eventBox.set_tooltip_text(text);
+        this._eventBox.set_tooltip_text(truncateFileName(text));
         for (let character of '.,-_@:')
             text = text.split(character).join(`${character}\u200B`);
 
         this._label.label = text;
-        this._renameArea.setText(text, this.fileNameLength);
-        this._renameArea.queue_resize();
+        this._renameScrollView.setText(text, this.fileNameLength);
     }
 
     _readCoordinatesFromAttribute(fileInfo, attribute) {
@@ -670,10 +651,9 @@ var FileItem = class {
     }
 
     askRename() {
-        if (!this.canRename()) {
-            log(`Error: ${this.file.get_uri()} cannot be renamed`);
+        if (!this.canRename())
             return;
-        }
+
 
         this._desktopManager.startRename(this);
     }
@@ -746,7 +726,6 @@ var FileItem = class {
     }
 
     _updateName() {
-        log('set file name');
         if (this._isValidDesktopFile && !this._desktopManager.writableByOthers && !this._writableByOthers && this.trustedDesktopFile)
             this._setFileName(this._desktopFile.get_locale_string('Name'));
         else
@@ -1062,45 +1041,50 @@ var FileItem = class {
     }
 
     startRename() {
-        this._label.set_visible(false);
+        this._grid.reorderItemBack(this);
 
+        this._label.set_visible(false);
         this._renameScrollView.set_visible(true);
-        this._renameArea.startRename();
+        this._renameScrollView.startRename();
     }
 
-    clear() {
-        this._label.set_visible(true);
-        this._renameScrollView.set_visible(false);
+    finishRename() {
+        if (this.beingRenamed()) {
+            this._label.set_visible(true);
+            this._renameScrollView.set_visible(false);
+        }
     }
 
     doRename() {
-        log('dorename called');
         if (!this.beingRenamed())
             return false;
 
-        if (this._windowError) {
-            log('error popoup');
+        if (this._windowError)
             return false;
-        }
 
-        let text = this._renameArea.text;
+
+        let text = this._renameScrollView.getText();
         let fullPath = `${this._desktopPath}/${text}`;
         let file = Gio.File.new_for_commandline_arg(fullPath);
+        let errorMsg;
+        let newNameTruncated = truncateFileName(text);
 
         if (text === '') {
-            this.showRenameError('empty string');
-            this._renameArea.cancelRename();
+            this._renameScrollView.cancelRename();
         } else if (this.fileName === text) {
-            this._renameArea.cancelRename();
-        } else if (file.query_exists(null)) {
-            this.showRenameError('already exist');
-            this._renameArea.cancelRename();
+            this._renameScrollView.cancelRename();
         } else if (text.indexOf('/') !== -1) {
-            this.showRenameError('cnnot contain /');
-            this._renameArea.cancelRename();
-        } else if (text.length >= 255) {
-            this.showRenameError('too long');
-            this._renameArea.cancelRename();
+            errorMsg = _('Sorry, could not rename to “{0}”. Slashes are not allowed in filenames').replace('{0}', newNameTruncated);
+            this.showRenameError(errorMsg);
+            this._renameScrollView.cancelRename();
+        }  else if (text.length >= 255) {
+            errorMsg = _('The name “{0}” is too long. Please use a different name.').replace('{0}', newNameTruncated);
+            this.showRenameError(errorMsg);
+            this._renameScrollView.cancelRename();
+        } else if (file.query_exists(null)) {
+            errorMsg = _('The name “{0}” is already used in this folder. Please use a different name.').replace('{0}', newNameTruncated);
+            this.showRenameError(errorMsg);
+            this._renameScrollView.cancelRename();
         } else if (this.fileName.localeCompare(text)) {
             let pos = this.savedCoordinates;
             this.dropCoordinates = [pos[0], pos[1]];
@@ -1110,14 +1094,12 @@ var FileItem = class {
                 (result, error) => {
                     if (error)
                         throw new Error(`Error renaming file: ${error.message}`);
-                    //                    this.showRenameError(error.message);
-                    //                    this._renameArea.cancelRename();
 
                 }
             );
         }
 
-        this._renameArea.finishRename();
+        this._renameScrollView.setRenameComplete();
 
         return true;
     }
@@ -1141,7 +1123,7 @@ var FileItem = class {
 
     showRenameError(text) {
         this._windowError = new ShowErrorPopup.ShowErrorPopup(
-            _('Error while deleting files'),
+            _('The Item could not be renamed.'),
             text,
             null,
             false);
@@ -1219,7 +1201,7 @@ var FileItem = class {
     }
 
     get fileNameLength() {
-        return RenameArea.GetByteLengthOfUtf8String(this._displayName);
+        return RenameView.GetByteLengthOfUtf8String(this._displayName);
     }
 
     get uri() {
@@ -1248,3 +1230,21 @@ var FileItem = class {
 };
 
 Signals.addSignalMethods(FileItem.prototype);
+
+function truncateFileName(name) {
+    let delimeter = '...';
+    let delimeterLength = 3;
+    let truncated = name;
+    let maxTruncatedLength = 50;
+
+    if (name.length < maxTruncatedLength)
+        return truncated;
+
+
+    let numLeftChars = (maxTruncatedLength - delimeterLength) / 2;
+    let numRightChars = maxTruncatedLength - numLeftChars - delimeterLength;
+
+    truncated = name.slice(0, numLeftChars) + delimeter + name.slice(-numRightChars);
+
+    return truncated;
+}
diff --git a/extensions/desktop-icons-ng/meson.build b/extensions/desktop-icons-ng/meson.build
index 47c2df7..52a5dfc 100644
--- a/extensions/desktop-icons-ng/meson.build
+++ b/extensions/desktop-icons-ng/meson.build
@@ -6,7 +6,6 @@ extension_data += configure_file(
 
 extension_sources += files(
     'askConfirmPopup.js',
-    'askNamePopup.js',
     'constants.js',
     'createThumbnail.js',
     'dbusUtils.js',
@@ -20,7 +19,7 @@ extension_sources += files(
     'fileItem.js',
     'prefs.js',
     'preferences.js',
-    'renameArea.js',
+    'renameView.js',
     'selectionCalculator.js',
     'showErrorPopup.js',
     'templateManager.js',
diff --git a/extensions/desktop-icons-ng/po/POTFILES.in b/extensions/desktop-icons-ng/po/POTFILES.in
index 494958d..b9b2d93 100644
--- a/extensions/desktop-icons-ng/po/POTFILES.in
+++ b/extensions/desktop-icons-ng/po/POTFILES.in
@@ -1,6 +1,4 @@
 askConfirmPopup.js
-askNamePopup.js
-askRenamePopup.js
 createThumbnail.js
 dbusUtils.js
 desktopGrid.js
@@ -12,5 +10,6 @@ extension.js
 fileItem.js
 preferences.js
 prefs.js
+renameView.js
 templateManager.js
 schemas/org.gnome.shell.extensions.ding.gschema.xml
diff --git a/extensions/desktop-icons-ng/po/ko.po b/extensions/desktop-icons-ng/po/ko.po
index 540bdc2..db79c03 100644
--- a/extensions/desktop-icons-ng/po/ko.po
+++ b/extensions/desktop-icons-ng/po/ko.po
@@ -25,22 +25,6 @@ msgstr "취소"
 msgid "Delete"
 msgstr "삭제"
 
-#: ../askNamePopup.js:35
-msgid "OK"
-msgstr "확인"
-
-#: ../askRenamePopup.js:40
-msgid "Folder name"
-msgstr "폴더 이름"
-
-#: ../askRenamePopup.js:40
-msgid "File name"
-msgstr "파일 이름"
-
-#: ../askRenamePopup.js:47
-msgid "Rename"
-msgstr "이름 바꾸기"
-
 #: ../desktopIconsUtil.js:79
 msgid "Command not found"
 msgstr "명령을 찾을 수 없습니다."
@@ -161,6 +145,10 @@ msgstr "파일들을 영구 삭제하시겠습니까?"
 msgid "If you delete an item, it will be permanently lost."
 msgstr "파일을 삭제하면, 영구적으로 잃게 될 것입니다."
 
+#: desktopManager.js:1668 desktopManager.js:1687
+msgid "Untitled Folder"
+msgstr "이름 없는 폴더"
+
 #: ../desktopManager.js:1310
 msgid "New folder"
 msgstr "새 폴더"
@@ -270,6 +258,23 @@ msgstr "각각의 파일을 파일 관리자로 보기"
 msgid "Show in Files"
 msgstr "파일 관리자로 보기"
 
+#: fileItem.js:1077
+msgid ""
+"The name “{0}” is already used in this folder. Please use a different name."
+msgstr "“{0}” 이름은 이미 이 폴더에서 사용하고 있습니다. 다른 이름을 사용하세요."
+
+#: fileItem.js:1081
+msgid "Sorry, could not rename to “{0}”. Slashes are not allowed in filenames"
+msgstr "안타깝게도, 이름을 “{0}”로 바꿀 수 없습니다: 파일 이름에 슬래시(/) 기호를 넣을 수 없습니다."
+
+#: fileItem.js:1085
+msgid "The name “{0}” is too long. Please use a different name."
+msgstr "“{0}”는 너무 긴 이름입니다. 다른 이름을 사용하세요."
+
+#: fileItem.js:1126
+msgid "The Item could not be renamed."
+msgstr "이름을 바꿀 수 없습니다."
+
 #: ../preferences.js:88
 msgid "Settings"
 msgstr "설정"
diff --git a/extensions/desktop-icons-ng/renameArea.js b/extensions/desktop-icons-ng/renameArea.js
deleted file mode 100644
index cd94c1b..0000000
--- a/extensions/desktop-icons-ng/renameArea.js
+++ /dev/null
@@ -1,149 +0,0 @@
-/* exported GetByteLengthOfUtf8String, RenameArea, RenameBuffer */
-const { GObject, Gdk, Gtk } = imports.gi;
-
-const Prefs = imports.preferences;
-
-var RenameArea = GObject.registerClass(class RenameArea extends Gtk.TextView {
-    _init(fileItem) {
-        super._init();
-        let editableAreaStyleContext = this.get_style_context();
-        editableAreaStyleContext.add_class('edit-area-style');
-        this.get_style_context().add_class(Prefs.getEditableAreaStyle());
-        this.set_border_width(2);
-        this.set_size_request(Prefs.getDesiredWidth(), -1);
-        this.set_wrap_mode(Gtk.WrapMode.WORD_CHAR);
-        this.set_can_focus(true);
-        this._editableBuffer = new RenameBuffer(fileItem);
-        this.set_buffer(this._editableBuffer);
-
-        this._fileItem = fileItem;
-        this._isRenaming = false;
-
-        this._editableBuffer.connect('changed', () => {
-        });
-    }
-
-    get text() {
-        let start = this._editableBuffer.get_start_iter();
-        let end = this._editableBuffer.get_end_iter();
-        let text = this._editableBuffer.get_text(start, end, false);
-        return text;
-    }
-
-    startRename() {
-        this.selectText();
-        this.grab_focus();
-        this._isRenaming = true;
-    }
-
-    finishRename() {
-        this._isRenaming = false;
-    }
-
-    setText(name, length) {
-        this._editableBuffer.set_text(name, length);
-    }
-
-    selectText() {
-        let start = this._editableBuffer.get_start_iter();
-        let end = this._editableBuffer.get_end_iter();
-
-        this._editableBuffer.select_range(start, end);
-    }
-
-    cancelRename() {
-        this._editableBuffer.set_text(this._fileItem.fileName, this._fileItem.fileNameLength);
-        this._fileItem.clear();
-        this._fileItem._eventBox.grab_focus();
-        this._fileItem.setSelected();
-        this.finishRename();
-    }
-
-    vfunc_focus_out_event(event) {
-        log('focus-out');
-        super.vfunc_focus_out_event(event);
-        if (!this._isRenaming)
-            return false;
-
-
-        if (!this._fileItem.doRename())
-            return false;
-
-
-        this._fileItem._eventBox.grab_focus();
-        this._fileItem.setSelected();
-        return false;
-    }
-
-    vfunc_button_press_event(event) {
-        super.vfunc_button_press_event(event);
-        return true;
-    }
-
-    vfunc_key_press_event(event) {
-        if (!this.has_focus)
-            return false;
-
-        let symbol = event.keyval;
-        if (symbol === Gdk.KEY_Return) {
-            this._fileItem.doRename();
-            return true;
-        } else if (symbol === Gdk.KEY_Escape) {
-            this.cancelRename();
-            return true;
-        }
-
-        super.vfunc_key_press_event(event);
-        return true;
-    }
-
-    vfunc_size_allocate(alloc) {
-        return super.vfunc_size_allocate(alloc);
-    }
-});
-
-var RenameBuffer = GObject.registerClass(class RenameBuffer extends Gtk.TextBuffer {
-    _init(fileItem) {
-        super._init();
-        this._fileItem = fileItem;
-    }
-
-    vfunc_insert_text(pos, text, length) {
-        let start = this.get_start_iter();
-        let end = this.get_end_iter();
-        let currentText = this.get_text(start, end, false);
-        let newText = currentText.slice(0, pos) + text + currentText.slice(pos);
-
-        if (!this._validate(newText))
-            return true;
-
-        return super.vfunc_insert_text(pos, text, length);
-    }
-
-    _validate(unusedText) {
-        // FIXME : add bubble after inspecting regex. It must be done with nemo at the same time
-        return true;
-    }
-
-});
-
-function GetByteLengthOfUtf8String(s) {
-    if (s !== undefined && s !== '') {
-        let c = null;
-        let b = 0, i = 0;
-        c = s.charCodeAt(i);
-        for (i = 0; c; i) {
-            if (c >> 11)
-                b += 3;
-            else if (c >> 7)
-                b += 2;
-            else
-                b += 1;
-
-            c = s.charCodeAt(++i);
-        }
-        return b;
-    } else {
-        return 0;
-    }
-}
diff --git a/extensions/desktop-icons-ng/renameView.js b/extensions/desktop-icons-ng/renameView.js
new file mode 100644
index 0000000..c8c5be9
--- /dev/null
+++ b/extensions/desktop-icons-ng/renameView.js
@@ -0,0 +1,173 @@
+/* exported GetByteLengthOfUtf8String, RenameArea, RenameScrollView */
+const { GObject, Gdk, Gtk } = imports.gi;
+
+const Prefs = imports.preferences;
+
+var RenameScrollView = GObject.registerClass(class RenameScrollView extends Gtk.ScrolledWindow {
+    _init(fileItem) {
+        super._init();
+        this._fileItem = fileItem;
+        this._renameArea = new RenameArea(fileItem);
+        this.add(this._renameArea);
+        this.set_max_content_width(90);
+        this.set_min_content_width(90);
+        this.set_policy(Gtk.PolicyType.EXTERNAL, Gtk.PolicyType.NEVER);
+
+        this._vAdjustment = new Gtk.Adjustment();
+        this.set_vadjustment(this._vAdjustment);
+
+        this._vAdjustment.connect('value-changed', () => {
+            // To remove the animation scroll effect
+            this._vAdjustment.set_value(0);
+        });
+    }
+
+    getText() {
+        return this._renameArea.text;
+    }
+
+    setText(text, len) {
+        this._renameArea.setText(text, len);
+    }
+
+    startRename() {
+        this._renameArea.startRename();
+    }
+
+    setRenameComplete() {
+        this._renameArea.setRenameComplete();
+    }
+
+    cancelRename() {
+        this._renameArea.cancelRename();
+    }
+});
+
+
+var RenameArea = GObject.registerClass(class RenameArea extends Gtk.TextView {
+    _init(fileItem) {
+        super._init();
+        let editableAreaStyleContext = this.get_style_context();
+        editableAreaStyleContext.add_class('edit-area-style');
+        this.get_style_context().add_class(Prefs.getEditableAreaStyle());
+        this.set_border_width(2);
+        this.set_size_request(Prefs.getDesiredWidth(), -1);
+        this.set_wrap_mode(Gtk.WrapMode.CHAR);
+        this.set_can_focus(true);
+
+        this._fileItem = fileItem;
+        this._isRenaming = false;
+        this._cachedWidth = 0;
+    }
+
+    startRename() {
+        this.selectText();
+        this.grab_focus();
+        this._isRenaming = true;
+    }
+
+    setRenameComplete() {
+        this._isRenaming = false;
+    }
+
+    cancelRename() {
+        this.setText(this._fileItem.fileName, this._fileItem.fileNameLength);
+        this._fileItem.finishRename();
+        this._fileItem.setSelected();
+        this._fileItem.focusItem();
+        this.setRenameComplete();
+    }
+
+    setText(name, length) {
+        this.get_buffer().set_text(name, length);
+    }
+
+    selectText() {
+        let start = this.get_buffer().get_start_iter();
+        let end = this.get_buffer().get_end_iter();
+
+        this.get_buffer().select_range(start, end);
+    }
+
+    get text() {
+        let start = this.get_buffer().get_start_iter();
+        let end = this.get_buffer().get_end_iter();
+        let text = this.get_buffer().get_text(start, end, false);
+        return text;
+    }
+
+    vfunc_focus_out_event(event) {
+        super.vfunc_focus_out_event(event);
+        if (!this._isRenaming) {
+            // After renaming, focus_out() is called before creating an icon, and if doRename() is called again, an error popup occurs and an exception is handled by placing a flag.
+            return false;
+        }
+
+        if (!this._fileItem.doRename())
+            return false;
+
+        this._fileItem._eventBox.grab_focus();
+        this._fileItem.setSelected();
+        return false;
+    }
+
+    vfunc_button_press_event(event) {
+        super.vfunc_button_press_event(event);
+        return true;
+    }
+
+    vfunc_key_press_event(event) {
+        if (!this.has_focus)
+            return false;
+
+        let symbol = event.keyval;
+        if (symbol === Gdk.KEY_Return || symbol === Gdk.KEY_KP_Enter) {
+            this._fileItem.doRename();
+            return true;
+        } else if (symbol === Gdk.KEY_Escape) {
+            this.cancelRename();
+            return true;
+        }
+
+        super.vfunc_key_press_event(event);
+        return true;
+    }
+
+    vfunc_get_preferred_width() {
+        if (this._cachedWidth === super.vfunc_get_preferred_width()[0])
+            return super.vfunc_get_preferred_width();
+
+
+        // The size calculation of GTK's textview decreases each time it is called, and when it reaches an appropriate size, the internal cached value is used. Therefore, it is intended to force the calculation of width by always calling size_allocate() when the width changes.
+        this._cachedWidth = super.vfunc_get_preferred_width()[0];
+        let alloc = this.get_allocation();
+        alloc.x = 0;
+        alloc.y = 0;
+        alloc.width = Prefs.getDesiredWidth();
+        alloc.height = Prefs.getDesiredHeight();
+        this.size_allocate(alloc);
+
+        return super.vfunc_get_preferred_width();
+    }
+});
+
+function GetByteLengthOfUtf8String(s) {
+    if (s !== undefined && s !== '') {
+        let c = null;
+        let b = 0, i = 0;
+        c = s.charCodeAt(i);
+        for (i = 0; c; i) {
+            if (c >> 11)
+                b += 3;
+            else if (c >> 7)
+                b += 2;
+            else
+                b += 1;
+
+            c = s.charCodeAt(++i);
+        }
+        return b;
+    } else {
+        return 0;
+    }
+}
diff --git a/extensions/desktop-icons-ng/selectionCalculator.js b/extensions/desktop-icons-ng/selectionCalculator.js
index 4df8f0a..13b4e83 100644
--- a/extensions/desktop-icons-ng/selectionCalculator.js
+++ b/extensions/desktop-icons-ng/selectionCalculator.js
@@ -1,8 +1,8 @@
-/* exported selectionCalculator */
+/* exported SelectionCalculator */
 
 const Gdk = imports.gi.Gdk;
 
-class selectionCalculator {
+var SelectionCalculator = class SelectionCalculator {
     constructor() {
         this._pivotToShiftSelection = null;
     }
@@ -147,4 +147,4 @@ class selectionCalculator {
     resetPivot() {
         this._pivotToShiftSelection = null;
     }
-}
+};
diff --git a/extensions/desktop-icons-ng/stylesheet.css b/extensions/desktop-icons-ng/stylesheet.css
index b6ffd9b..5faf291 100644
--- a/extensions/desktop-icons-ng/stylesheet.css
+++ b/extensions/desktop-icons-ng/stylesheet.css
@@ -2,7 +2,7 @@
     text-shadow: 0 0 3px rgba(0, 0, 0, 0.7);
     font-size:13px;
     font-weight: bold;
-    margin:8px 6px 6px 8px;
+    margin:0px 6px 6px 8px;
     color: #fff;
 }
 
@@ -10,7 +10,7 @@
     text-shadow: 0 0 3px rgba(0, 0, 0, 0.7);
     font-size:13px;
     font-weight: bold;
-    margin:9px 6px 6px 6px;
+    margin:0px 6px 6px 6px;
     color: #fff;
 }
 
@@ -18,7 +18,7 @@
     text-shadow: 0 0 3px rgba(0, 0, 0, 0.7);
     font-size:13px;
     font-weight: bold;
-    margin:14px 6px 6px 8px;
+    margin:0px 6px 6px 8px;
     color: #fff;
 }
 
@@ -29,7 +29,7 @@
 
 .file-icon-standard {
     margin-top:13px;
-    margin-bottom:0;
+    margin-bottom:9px;
 }
 
 .file-icon-large {
