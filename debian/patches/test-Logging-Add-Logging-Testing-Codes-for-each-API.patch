From: junho_lee3 <junho_lee3>
Date: Wed, 12 May 2021 17:49:00 +0900
Subject: [test] Logging : Add Logging Testing Codes for each API

 - Add examples for each API

[IMS] N/A
---
 logging/example/backtrace_example.js      | 34 +++++++++++++++++++++++++++++++
 logging/example/break_example.js          | 11 ++++++++++
 logging/example/break_function_example.js | 24 ++++++++++++++++++++++
 logging/example/logging_example.js        | 31 ++++++++++++++++++++++++++++
 logging/example/value_example.js          | 34 +++++++++++++++++++++++++++++++
 logging/logging.js                        | 10 ++++-----
 6 files changed, 138 insertions(+), 6 deletions(-)
 create mode 100644 logging/example/backtrace_example.js
 create mode 100644 logging/example/break_example.js
 create mode 100644 logging/example/break_function_example.js
 create mode 100644 logging/example/logging_example.js
 create mode 100644 logging/example/value_example.js

diff --git a/logging/example/backtrace_example.js b/logging/example/backtrace_example.js
new file mode 100644
index 0000000..5a55650
--- /dev/null
+++ b/logging/example/backtrace_example.js
@@ -0,0 +1,34 @@
+imports.searchPath.unshift('..');
+const Logging = imports.logging;
+
+var Test = class {
+    constructor() {
+        this._debug = false;
+    }
+
+    hoo() {
+        if (this._debug)
+            debug.printBacktrace();
+
+    }
+
+    goo() {
+        this._debug = !this._debug;
+        this.hoo();
+    }
+
+    foo() {
+        this.goo();
+    }
+};
+
+var test = new Test();
+var debug = new Logging.Debugger();
+
+debug.printBacktraceFunction('foo', test);
+debug.printBacktraceFunction('goo', test, () => {
+    return test._debug;
+});
+
+test.foo();
+test.foo();
diff --git a/logging/example/break_example.js b/logging/example/break_example.js
new file mode 100644
index 0000000..2a52f9d
--- /dev/null
+++ b/logging/example/break_example.js
@@ -0,0 +1,11 @@
+imports.searchPath.unshift('..');
+const Logging = imports.logging;
+
+var debug = new Logging.Debugger();
+
+for (let i = 0; i < 5; i++) {
+    debug.logging(`Log${i}`);
+    debug.breakpoint(() => {
+        return i === 3;
+    });
+}
diff --git a/logging/example/break_function_example.js b/logging/example/break_function_example.js
new file mode 100644
index 0000000..48fac45
--- /dev/null
+++ b/logging/example/break_function_example.js
@@ -0,0 +1,24 @@
+imports.searchPath.unshift('..');
+const Logging = imports.logging;
+
+var Test = class {
+    constructor() {
+        this._debug = false;
+        this._count = 0;
+    }
+
+    foo() {
+        debug.logging(`Log${this._count++}`);
+        this._debug = !this._debug;
+    }
+};
+
+var test = new Test();
+var debug = new Logging.Debugger();
+
+debug.breakpointFunction('foo', test, () => {
+    return test._debug;
+});
+
+test.foo();
+test.foo();
diff --git a/logging/example/logging_example.js b/logging/example/logging_example.js
new file mode 100644
index 0000000..3881816
--- /dev/null
+++ b/logging/example/logging_example.js
@@ -0,0 +1,31 @@
+imports.searchPath.unshift('..');
+const Logging = imports.logging;
+
+var Test = class {
+    constructor() {
+        this._value = 0;
+    }
+
+    goo() {
+        return this._value++;
+    }
+
+    foo() {
+        let sum = 0;
+        for (let i = 0; i < 6; i++)
+            sum += this.goo();
+
+
+        return sum;
+    }
+};
+
+var test = new Test();
+var debug = new Logging.Debugger();
+
+debug.loggingFunction('foo', test);
+debug.loggingFunction('goo', test, () => {
+    return test._value === 5;
+});
+
+test.foo();
diff --git a/logging/example/value_example.js b/logging/example/value_example.js
new file mode 100644
index 0000000..5e22d56
--- /dev/null
+++ b/logging/example/value_example.js
@@ -0,0 +1,34 @@
+imports.searchPath.unshift('..');
+const Logging = imports.logging;
+
+var debug = new Logging.Debugger();
+
+var TestClass = class {
+    constructor() {
+        this._a = 1;
+    }
+};
+
+var Test = class {
+    constructor() {
+        this._arr = [1, 2, 3, 4, 5];
+        this._str = 'Test String';
+        this._bool = true;
+        this._float = 1.4;
+        this._int = 5;
+        this._function = () => {
+            return 1;
+        };
+        this._object = new TestClass();
+    }
+
+    foo() {
+        return this._arr;
+    }
+};
+
+var test = new Test();
+
+debug.logging(test);
+debug.logging(test._object);
+debug.logging(test.foo);
diff --git a/logging/logging.js b/logging/logging.js
index a1d7366..a93e821 100644
--- a/logging/logging.js
+++ b/logging/logging.js
@@ -354,13 +354,13 @@ var Debugger = class {
 
             let isLogging = wrappedFunction['backtracePredicate']();
 
-            let ret = func.apply(obj, funcArgs);
-
             if (isLogging) {
                 record(channel, level, `Backtrace for ${log}`, BACKTRACE_LOG);
                 print(channel, level);
             }
 
+            let ret = func.apply(obj, funcArgs);
+
             return ret;
         }
 
@@ -548,7 +548,7 @@ var Debugger = class {
 
         let index = args.length - 1;
 
-        if (args[index] instanceof Function)
+        if (args[index] instanceof Function && index !== 0)
             predicate = args[index--];
 
 
@@ -571,8 +571,6 @@ var Debugger = class {
 
         if (pred())
             this._recordLogMessage(channel, level, message, COMMON_LOG);
-
-
     }
 
     /*
@@ -676,7 +674,7 @@ var Debugger = class {
             return true;
         };
 
-        let index = args[index--];
+        let index = args.length - 1;
 
         if (args[index] instanceof Function)
             predicate = args[index--];
