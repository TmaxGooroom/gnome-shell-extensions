From: jiyun_ha <jiyun_ha@tmax.co.kr>
Date: Fri, 29 Oct 2021 11:12:54 +0900
Subject: [feat] osk-hangul : apply new UI

 - create new KeyButton that korean/english label are mixed.
 - make Keyboard's height to 400 pixels if the width of monitor is 1024
   or heigher, and 200 pixels less than 1024.
 - added new class name 'scaled' to notify the child actors that
   keyboard size is reduced. Sub-elements of 'scaled' class will be
   applied halved size.
 - to create original and modified CSS ruleset, uses SCSS instead of CSS.
 - added new README.MD file

[IMS] 271494
---
 extensions/osk-hangul/README.MD            |  29 +++++++
 extensions/osk-hangul/_stylesheet.scss     | 127 +++++++++++++++++++++++++++++
 extensions/osk-hangul/extension.js         |   1 +
 extensions/osk-hangul/keyButton.js         |  60 ++++++++++++++
 extensions/osk-hangul/keyboardWrapper.js   | 116 ++++++++++++++++++--------
 extensions/osk-hangul/meson.build          |  15 +++-
 extensions/osk-hangul/qwertyMap.js         |  88 ++++++++++++++++++++
 extensions/osk-hangul/stylesheet.css       |   7 +-
 extensions/osk-hangul/xkbcommon_keysyms.js |  36 --------
 9 files changed, 400 insertions(+), 79 deletions(-)
 create mode 100644 extensions/osk-hangul/README.MD
 create mode 100644 extensions/osk-hangul/_stylesheet.scss
 create mode 100644 extensions/osk-hangul/keyButton.js
 create mode 100644 extensions/osk-hangul/qwertyMap.js
 delete mode 100644 extensions/osk-hangul/xkbcommon_keysyms.js

diff --git a/extensions/osk-hangul/README.MD b/extensions/osk-hangul/README.MD
new file mode 100644
index 0000000..df4d788
--- /dev/null
+++ b/extensions/osk-hangul/README.MD
@@ -0,0 +1,29 @@
+# OSK-hangul
+
+OSK-hangul is a Gnome Shell extension that supports On-Screen Keyboard for Korean users.
+
+# features
+- Supports Ibus and Nimf that use libhangul as its engine
+- Modifies appearance of original keyboard to be more friendly to Korean user(ex. 한/영 button)
+
+# dependency
+- Dependencies of Gnome Shell On-Screen Keyboard
+- Nimf
+
+# Development Guide
+**Please read this section before you modify the code.**
+
+## Input Method
+- The source codes are written under the assumption that the developer understands basics and characteristics of Input Methods. If you do not have any relayed knowledge, the links below will be helpful
+  - [](https://www.ibm.com/docs/en/aix/7.1?topic=methods-input-method-introduction)
+  - [](https://ko.wikipedia.org/wiki/%EC%9E%85%EB%A0%A5%EA%B8%B0)
+- Also, since this extension modifies some functionalties of Gnome Shell On-Screen Keyboard, so you can't understand the keyboard by reading only this code. Please refer to the original code of Gnome Shell. Below is a list of related source code.
+  - js/ui/keyboard.js
+  - js/ui/status/keyboard.js
+  - js/misc/inputMethod.js
+  - js/misc/ibusManager.js
+
+## styling
+- OSK-hangul uses SCSS to apply the style instead of CSS. Do not commit stylesheet.css file. It is created when building this extension.
+- Do not apply 'color' property on pseudo class of St.Icon(and other elements that causes Gicon). This causes touch problems on the element.
+  - For example, original Gnome Shell applied different color scheme for every pseudo class of enter key. If user touches that key, motion, press, release event occur in succession. The motion event changes color of the enter-key icon. And GIcon is reloaded by St.Icon. As the GIcon is reloaded, in turn, the queue-relayout is called, and the enter-key is queued. The next event, press, is ignored because the actor in the queue cannot receive the event. As the ignored press event reaches another actor, the keyboard is hidden.
diff --git a/extensions/osk-hangul/_stylesheet.scss b/extensions/osk-hangul/_stylesheet.scss
new file mode 100644
index 0000000..bc5c2c6
--- /dev/null
+++ b/extensions/osk-hangul/_stylesheet.scss
@@ -0,0 +1,127 @@
+$fg_color: #eeeeec; // grey ~ white
+$bg_hover_color: #424242;
+$hover_border_color: #2b2b2b;
+$black_light: rgba(0, 0, 0, 0.2);
+$bg_darken: #2d2d2d;
+$bg_color : #3c3c3c;
+$enter_bg_color: #3961ca;
+
+$sides: 'top', 'right', 'bottom', 'left';
+
+@mixin scaled_padding($scale, $args...) {
+  padding: {
+    @for $i from 1 through 4 {
+      #{nth($sides, $i)} : #{nth($args, $i) * $scale}px;
+    }
+  }
+}
+
+@mixin shadow_none() {
+  text-shadow: none;
+  icon-shadow: none;
+  box-shadow: none;
+}
+
+@mixin shadow_hover() {
+  box-shadow: 0 1px 1px 0 $black_light;
+  text-shadow: 0 1px $black_light;
+  icon-shadow: 0 1px $black_light;
+}
+
+@mixin keyboard($scale, $class:'') {
+  #keyboard#{$class} {
+    padding: 10px * $scale 0px;
+  }
+
+  #{$class} .key-container {
+    padding: 4px * $scale 5px * $scale;
+  }
+  #{$class} .keyboard-key {
+    width: 84px * $scale;
+    height: 68px * $scale;
+    border: {
+      radius: 6px * $scale;
+      style: solid;
+      width: 1px;
+      color: $black_light;
+    }
+    font: {
+      family: NotoSansCJKkr;
+      size: 18px * $scale;
+      weight: normal;
+      stretch: normal;
+      style: normal;
+    }
+    line-height: normal;
+    text-align: center;
+    color: white;
+    background-color: $bg_color;
+    box-shadow: 0 2px * $scale 2px * $scale 0 rgba(0, 0, 0, 0.25);
+
+    &:hover {
+      color: $fg_color;
+      background-color: $bg_hover_color;
+      border-color: $hover_border_color;
+    }
+
+    &:active {
+      color: $fg_color;
+      background-color: darken($bg_color, 3%);
+      border-color: darken($bg_color, 7%);
+    }
+
+    &.default-key {
+      background-color: $bg_darken;
+      &:hover {
+        color: $fg_color;
+        background-color: rgba(50, 50, 50, 0.96);
+        border-color: rgba(27, 27, 27, 0.96);
+        @include shadow_hover();
+      }
+      &:active {
+        color: $fg_color;
+        background-color: rgba(30, 30, 30, 0.96);
+        border-color: rgba(9, 9, 9, 0.96);
+        @include shadow_none();
+      }
+    }
+
+
+    &.enter-key {
+      background-color: $enter_bg_color;
+      @include shadow_hover();
+
+      &:hover {
+        background-color: lighten($enter_bg_color, 3%);
+        @include shadow_hover();
+      }
+      &:active {
+        background-color: darken($enter_bg_color, 2%);
+        border-color: darken($enter_bg_color, 18%);
+      }
+    }
+
+    &.shift-key-uppercase {
+      color: $enter_bg_color;
+    }
+
+    .key-button {
+      color: rgba(255, 255, 255, 0.35);
+      .highlight {
+        color: rgba(255, 255, 255, 1);
+      }
+
+      StLabel.upper {
+        @include scaled_padding($scale, 7, 15, 0, 15);
+      }
+
+      StLabel.lower {
+        @include scaled_padding($scale, 0, 15, 0, 15);
+      }
+    }
+  }
+}
+
+@include keyboard(1);
+
+@include keyboard(0.5, '.scaled');
diff --git a/extensions/osk-hangul/extension.js b/extensions/osk-hangul/extension.js
index 0dd0226..3b484a2 100644
--- a/extensions/osk-hangul/extension.js
+++ b/extensions/osk-hangul/extension.js
@@ -37,6 +37,7 @@ function _enable(inputMethod = Enums.KeyboardType.XKB) {
 
     adapter.setInputMethod(inputMethod);
     KeyboardManager._keyboard._setActiveLayer(BASIC_KEYBOARD_LAYOUT);
+    KeyboardManager._keyboard._suggestions.hide();
 }
 
 // Synchronize with this extension and availability of on-screen-keyboard.
diff --git a/extensions/osk-hangul/keyButton.js b/extensions/osk-hangul/keyButton.js
new file mode 100644
index 0000000..df86983
--- /dev/null
+++ b/extensions/osk-hangul/keyButton.js
@@ -0,0 +1,60 @@
+/* exported makeKey */
+const { Clutter, GObject, St } = imports.gi;
+const Me = imports.misc.extensionUtils.getCurrentExtension();
+const { QwertyMap } = Me.imports.qwertyMap;
+
+function makeKey(key, groupname) {
+    let button = key.keyButton;
+    if (!button.get_label())
+        return;
+
+    let label = button.get_label();
+
+    if (!QwertyMap[label])
+        return;
+
+    let newButton = new KeyButton();
+    button.set_child(newButton);
+
+    let [englishLabel, koreanLabel] = groupname === 'us' ? [label, QwertyMap[label]] : [QwertyMap[label], label];
+
+    newButton.setEnglishLabel(englishLabel, groupname === 'us');
+    newButton.setKoreanLabel(koreanLabel, groupname === 'kr');
+}
+
+var KeyButton = GObject.registerClass(
+class KeyButton extends St.Widget {
+    _init() {
+        super._init({
+            style_class: 'key-button',
+            layout_manager: new Clutter.BoxLayout({ orientation: Clutter.Orientation.VERTICAL }),
+            x_expand: false,
+            y_expand: false,
+        });
+
+        this.englishLabelActor = new St.Label({ text: '',
+            style_class: 'lower',
+            x_align: Clutter.ActorAlign.START,
+            y_align: Clutter.ActorAlign.FILL });
+
+        this.koreanLabelActor = new St.Label({ text: '',
+            style_class: 'upper',
+            x_align: Clutter.ActorAlign.END,
+            y_align: Clutter.ActorAlign.FILL });
+
+        this.add_child(this.koreanLabelActor);
+        this.add_child(this.englishLabelActor);
+    }
+
+    setKoreanLabel(label, highlight) {
+        this.koreanLabelActor.set_text(label);
+        if (highlight)
+            this.koreanLabelActor.add_style_class_name('highlight');
+    }
+
+    setEnglishLabel(label, highlight) {
+        this.englishLabelActor.set_text(label);
+        if (highlight)
+            this.englishLabelActor.add_style_class_name('highlight');
+    }
+});
diff --git a/extensions/osk-hangul/keyboardWrapper.js b/extensions/osk-hangul/keyboardWrapper.js
index 710bd6d..aaea7ae 100644
--- a/extensions/osk-hangul/keyboardWrapper.js
+++ b/extensions/osk-hangul/keyboardWrapper.js
@@ -5,27 +5,27 @@ const Main = imports.ui.main;
 const KeyboardManager = Main.keyboard;
 
 const Me = imports.misc.extensionUtils.getCurrentExtension();
-const QwertyKeysyms = Me.imports.xkbcommon_keysyms.QwertyMap;
-const { getIBusHangul, getNimfService } = Me.imports.utils;
+const { QwertyMap } = Me.imports.qwertyMap;
+const { getIBusHangul, getNimfService, Enums } = Me.imports.utils;
+const { makeKey } = Me.imports.keyButton;
 
 const HangulKeysymStart = 0x0ea1;
 const HangulKeysymEnd = 0x0efa;
 
-function _isKoreanCharactor(keyval) {
-    if (!keyval)
-        return false;
-
-    return HangulKeysymStart <= keyval && keyval <= HangulKeysymEnd;
-}
+function _converToAlphabet(keyval) {
+    let label = String.fromCharCode(Clutter.keysym_to_unicode(keyval));
+    if (HangulKeysymStart <= keyval && keyval <= HangulKeysymEnd) {
+        label = QwertyMap[label];
+        keyval = Clutter.unicode_to_keysym(label.charCodeAt(0));
+    }
 
-function _krToUsKeysym(keyval) {
-    return _isKoreanCharactor(keyval) ? QwertyKeysyms[keyval] : keyval;
+    return keyval;
 }
 
 class BaseKeyboardWrapper {
     constructor() {
         this._functionsToOverride = {};
-        this._declareFunctionsToOverrde();
+        this._declareFunctionsToOverride();
     }
 
     _save(target, originalFunc, replaceFunc) {
@@ -33,11 +33,61 @@ class BaseKeyboardWrapper {
         this._functionsToOverride[funcName] = { target, originalFunc, replaceFunc };
     }
 
-    _declareFunctionsToOverrde() {
+    _declareFunctionsToOverride() {
         let keyboard = KeyboardManager._keyboard;
 
-        let _setAnimationWindow = () => {};
+        const _setAnimationWindow = () => {};
         this._save(keyboard, keyboard._setAnimationWindow, _setAnimationWindow);
+
+        const _createLayersForGroup = (originalCreateLayersForGroup, groupname) => {
+            let layers = originalCreateLayersForGroup.call(keyboard, groupname);
+            for (let layer of Object.keys(layers)) {
+                for (let key of layers[layer]) {
+                    makeKey(key, groupname);
+                    let button = key.keyButton;
+                    if (button.get_style_class_name().includes('layout-key')) {
+                        if (this._layoutKeyType === Enums.LayoutKeyType.LABEL)
+                            button.set_label('한/영');
+                        else
+                            button.set_child(key._icon);
+                    }
+                }
+            }
+
+            return layers;
+        };
+        this._save(keyboard, keyboard._createLayersForGroup, _createLayersForGroup);
+
+        // NOTE: the code below is copied from Gnome-Shell original code to apply new height scheme for TOS.
+        const _relayout = () => {
+            let monitor = Main.layoutManager.keyboardMonitor;
+
+            if (!monitor)
+                return;
+
+            let maxHeight = monitor.width >= 1024 ? 400 : 200;
+
+            if (monitor.width < 1024)
+                keyboard.add_style_class_name('scaled');
+            else
+                keyboard.remove_style_class_name('scaled');
+
+            keyboard.width = monitor.width;
+
+            if (monitor.width > monitor.height) {
+                keyboard.height = maxHeight;
+            } else {
+                /* In portrait mode, lack of horizontal space means we won't be
+                * able to make the OSK that big while keeping size ratio, so
+                * we allow the OSK being smaller than 1/3rd of the monitor height
+                * there.
+                */
+                const forWidth = keyboard.get_theme_node().adjust_for_width(monitor.width);
+                const [, natHeight] = keyboard.get_preferred_height(forWidth);
+                keyboard.height = Math.min(maxHeight, natHeight);
+            }
+        };
+        this._save(keyboard, keyboard._relayout, _relayout);
     }
 
     wrapAll() {
@@ -65,20 +115,25 @@ class BaseKeyboardWrapper {
     }
 }
 var IbusKeyboardWrapper = class IbusKeyboardWrapper extends BaseKeyboardWrapper {
-    _declareFunctionsToOverrde() {
-        super._declareFunctionsToOverrde();
+    constructor() {
+        super();
+        this._layoutKeyType = Enums.LayoutKeyType.LABEL;
+    }
+
+    _declareFunctionsToOverride() {
+        super._declareFunctionsToOverride();
 
         let keyboard = KeyboardManager._keyboard;
         let controller = keyboard._keyboardController;
 
         const keyvalPress = (originalKeyvalPress, keyval) => {
-            keyval = _krToUsKeysym(keyval);
+            keyval = _converToAlphabet(keyval);
             return originalKeyvalPress.call(controller, keyval);
         };
         this._save(controller, controller.keyvalPress, keyvalPress);
 
         const keyvalRelease = (originalKeyvalRelease, keyval) => {
-            keyval = _krToUsKeysym(keyval);
+            keyval = _converToAlphabet(keyval);
             return originalKeyvalRelease.call(controller, keyval);
         };
         this._save(controller, controller.keyvalRelease, keyvalRelease);
@@ -88,20 +143,6 @@ var IbusKeyboardWrapper = class IbusKeyboardWrapper extends BaseKeyboardWrapper
         };
         this._save(keyboard, keyboard._popupLanguageMenu, _popupLanguageMenu);
 
-        const _createLayersForGroup = (originalCreateLayersForGroup, groupname) => {
-            let layers = originalCreateLayersForGroup.call(keyboard, groupname);
-            for (let layer of Object.keys(layers)) {
-                for (let key of layers[layer]) {
-                    let button = key.keyButton;
-                    if (button.get_style_class_name().includes('layout-key'))
-                        button.set_label('한/영');
-                }
-            }
-
-            return layers;
-        };
-        this._save(keyboard, keyboard._createLayersForGroup, _createLayersForGroup);
-
         const _setActiveLayer = (originalSetActiveLayer, activeLevel) => {
             // make us keyboard layout if not exist
             keyboard._ensureKeysForGroup('us');
@@ -145,8 +186,8 @@ var NimfKeyboardWrapper = class NimfKeyboardWrapper extends IbusKeyboardWrapper
         this._current = 'us';
     }
 
-    _declareFunctionsToOverrde() {
-        super._declareFunctionsToOverrde();
+    _declareFunctionsToOverride() {
+        super._declareFunctionsToOverride();
 
         let keyboard = KeyboardManager._keyboard;
         let controller = keyboard._keyboardController;
@@ -197,7 +238,14 @@ var NimfKeyboardWrapper = class NimfKeyboardWrapper extends IbusKeyboardWrapper
 };
 
 var XkbKeyboardWrapper = class XkbKeyboardWrapper extends BaseKeyboardWrapper {
-    _declareFunctionsToOverrde() {
+    constructor() {
+        super();
+        this._layoutKeyType = Enums.LayoutKeyType.ICON;
+    }
+
+    _declareFunctionsToOverride() {
+        super._declareFunctionsToOverride();
+
         let keyboard = KeyboardManager._keyboard;
         let controller = keyboard._keyboardController;
         const _setActiveLayer = (originalSetActiveLayer, activeLevel) => {
diff --git a/extensions/osk-hangul/meson.build b/extensions/osk-hangul/meson.build
index 5f2d59d..e1ed2bf 100644
--- a/extensions/osk-hangul/meson.build
+++ b/extensions/osk-hangul/meson.build
@@ -1,3 +1,13 @@
+sassc = find_program('sassc')
+style = custom_target('stylesheet.css',
+                      input: '_stylesheet.scss',
+                      output: 'stylesheet.css',
+                      command: [
+                        sassc, '-a', '@INPUT@', '@OUTPUT@'
+                      ],
+                      install: true,
+                      install_dir:meson.current_source_dir() )
+
 extension_data += configure_file(
   input: metadata_name + '.in',
   output: metadata_name,
@@ -5,10 +15,9 @@ extension_data += configure_file(
 )
 
 extension_sources += files(
-  'xkbcommon_keysyms.js',
+  'qwertyMap.js',
   'utils.js',
   'keyboardWrapper.js',
   'adapter.js',
+  'keyButton.js',
 )
-
-extension_dir = join_paths(extensiondir, uuid)
diff --git a/extensions/osk-hangul/qwertyMap.js b/extensions/osk-hangul/qwertyMap.js
new file mode 100644
index 0000000..125e363
--- /dev/null
+++ b/extensions/osk-hangul/qwertyMap.js
@@ -0,0 +1,88 @@
+/* exported QwertyMap */
+
+var QwertyMap =
+{   'q': 'ㅂ',
+    'w': 'ㅈ',
+    'e': 'ㄷ',
+    'r': 'ㄱ',
+    't': 'ㅅ',
+    'y': 'ㅛ',
+    'u': 'ㅕ',
+    'i': 'ㅑ',
+    'o': 'ㅐ',
+    'p': 'ㅔ',
+    'a': 'ㅁ',
+    's': 'ㄴ',
+    'd': 'ㅇ',
+    'f': 'ㄹ',
+    'g': 'ㅎ',
+    'h': 'ㅗ',
+    'j': 'ㅓ',
+    'k': 'ㅏ',
+    'l': 'ㅣ',
+    'z': 'ㅋ',
+    'x': 'ㅌ',
+    'c': 'ㅊ',
+    'v': 'ㅍ',
+    'b': 'ㅠ',
+    'n': 'ㅜ',
+    'm': 'ㅡ',
+    'Q': 'ㅃ',
+    'W': 'ㅉ',
+    'E': 'ㄸ',
+    'R': 'ㄲ',
+    'T': 'ㅆ',
+    'Y': 'ㅛ',
+    'U': 'ㅕ',
+    'I': 'ㅑ',
+    'O': 'ㅒ',
+    'P': 'ㅖ',
+    'A': 'ㅁ',
+    'S': 'ㄴ',
+    'D': 'ㅇ',
+    'F': 'ㄹ',
+    'G': 'ㅎ',
+    'H': 'ㅗ',
+    'J': 'ㅓ',
+    'K': 'ㅏ',
+    'L': 'ㅣ',
+    'Z': 'ㅋ',
+    'X': 'ㅌ',
+    'C': 'ㅊ',
+    'V': 'ㅍ',
+    'B': 'ㅠ',
+    'N': 'ㅜ',
+    'M': 'ㅡ',
+    'ㅂ': 'q',
+    'ㅈ': 'w',
+    'ㄷ': 'e',
+    'ㄱ': 'r',
+    'ㅅ': 't',
+    'ㅛ': 'y',
+    'ㅕ': 'u',
+    'ㅑ': 'i',
+    'ㅐ': 'o',
+    'ㅔ': 'p',
+    'ㅁ': 'a',
+    'ㄴ': 's',
+    'ㅇ': 'd',
+    'ㄹ': 'f',
+    'ㅎ': 'g',
+    'ㅗ': 'h',
+    'ㅓ': 'j',
+    'ㅏ': 'k',
+    'ㅣ': 'l',
+    'ㅋ': 'z',
+    'ㅌ': 'x',
+    'ㅊ': 'c',
+    'ㅍ': 'v',
+    'ㅠ': 'b',
+    'ㅜ': 'n',
+    'ㅡ': 'm',
+    'ㅃ': 'Q',
+    'ㅉ': 'W',
+    'ㄸ': 'E',
+    'ㄲ': 'R',
+    'ㅆ': 'T',
+    'ㅒ': 'O',
+    'ㅖ': 'P' };
diff --git a/extensions/osk-hangul/stylesheet.css b/extensions/osk-hangul/stylesheet.css
index b41630b..4d47bad 100644
--- a/extensions/osk-hangul/stylesheet.css
+++ b/extensions/osk-hangul/stylesheet.css
@@ -1,6 +1 @@
-.enter-key {
-    /* To avoid enter-key's icon is re-colored when its style changing, override its style.
-     * re-coloring Icon may cause touch problem because gicon is asynchronously loaded always when it is repainted,
-     * and while that moment, touch events cannot be received. */
-    color: white;
-}
+/* This extensions use _stylesheet.scss instead of css. Compile scss file to create stylesheet.css */
diff --git a/extensions/osk-hangul/xkbcommon_keysyms.js b/extensions/osk-hangul/xkbcommon_keysyms.js
deleted file mode 100644
index b5fa5ec..0000000
--- a/extensions/osk-hangul/xkbcommon_keysyms.js
+++ /dev/null
@@ -1,36 +0,0 @@
-/* exported QwertyMap */
-
-var QwertyMap =
-{ 0x0ea1: 0x72,
-    0x0ea2: 0x52,
-    0x0ea4: 0x53,
-    0x0ea7: 0x65,
-    0x0ea8: 0x45,
-    0x0ea9: 0x46,
-    0x0eb1: 0x41,
-    0x0eb2: 0x71,
-    0x0eb3: 0x51,
-    0x0eb5: 0x74,
-    0x0eb6: 0x54,
-    0x0eb7: 0x44,
-    0x0eb8: 0x77,
-    0x0eb9: 0x57,
-    0x0eba: 0x43,
-    0x0ebb: 0x5a,
-    0x0ebc: 0x58,
-    0x0ebd: 0x56,
-    0x0ebe: 0x47,
-    0x0ebf: 0x4b,
-    0x0ec0: 0x6f,
-    0x0ec1: 0x49,
-    0x0ec2: 0x4f,
-    0x0ec3: 0x4a,
-    0x0ec4: 0x70,
-    0x0ec5: 0x55,
-    0x0ec6: 0x50,
-    0x0ec7: 0x48,
-    0x0ecb: 0x59,
-    0x0ecc: 0x4e,
-    0x0ed0: 0x62,
-    0x0ed1: 0x4d,
-    0x0ed3: 0x4c };
