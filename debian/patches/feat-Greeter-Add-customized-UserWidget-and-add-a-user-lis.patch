From: sohee_yoon <sohee_yoon@tmax.co.kr>
Date: Mon, 26 Jul 2021 16:12:16 +0900
Subject: [feat] Greeter: Add customized UserWidget and add a user list popup
 menu

- Add customized UserWidget to change user image and label.
- When you click on the account name, user list menu appears.
- Use UserList widget generated by login dialog as contents of popup menu.
- Add item click action of user list menu to allow users to switch.

[IMS] N/A
---
 extensions/greeter/authPrompt.js  |  21 ++++-
 extensions/greeter/loginDialog.js |  34 +++++++-
 extensions/greeter/meson.build    |   3 +-
 extensions/greeter/userWidget.js  | 161 ++++++++++++++++++++++++++++++++++++++
 4 files changed, 216 insertions(+), 3 deletions(-)
 create mode 100644 extensions/greeter/userWidget.js

diff --git a/extensions/greeter/authPrompt.js b/extensions/greeter/authPrompt.js
index e43f288..c076e41 100644
--- a/extensions/greeter/authPrompt.js
+++ b/extensions/greeter/authPrompt.js
@@ -16,12 +16,31 @@
  * You should have received a copy of the GNU General Public License
  * along with this program; if not, see <http://www.gnu.org/licenses/>.
  */
+const Me = imports.misc.extensionUtils.getCurrentExtension();
+
 const { GObject } = imports.gi;
 const GnomeAuthPrompt = imports.gdm.authPrompt;
 
+const UserWidget = Me.imports.userWidget;
+
 var AuthPrompt = GObject.registerClass(class AuthPrompt extends GnomeAuthPrompt.AuthPrompt { // eslint-disable-line no-unused-vars
     _init(gdmClient, mode) {
         super._init(gdmClient, mode);
-        this.style = 'background-color:rgb(255, 128, 0);';
+
+        this._userWidget = new UserWidget.UserWidget(null);
+        this._userWell.set_child(this._userWidget);
+    }
+
+    setUser(user) {
+        this._userWidget.changeUser(user);
+    }
+
+    setUserList(userList) {
+        this._userWidget.setUserList(userList);
+    }
+
+    hideUserListMenu() {
+        if (this._userWidget._userListMenu.isOpen)
+            this._userWidget._userListMenu.toggle();
     }
 });
diff --git a/extensions/greeter/loginDialog.js b/extensions/greeter/loginDialog.js
index 82a4292..938149d 100644
--- a/extensions/greeter/loginDialog.js
+++ b/extensions/greeter/loginDialog.js
@@ -55,8 +55,10 @@ var LoginDialog = GObject.registerClass(class LoginDialog extends GnomeLoginDial
     }
 
     _loadUserList() {
-        if (!this._userListLoaded)
+        if (!this._userListLoaded) {
             this._showLastLoginUser();
+            this._authPrompt.setUserList(this._userList);
+        }
 
         return super._loadUserList();
     }
@@ -111,6 +113,36 @@ var LoginDialog = GObject.registerClass(class LoginDialog extends GnomeLoginDial
         return hold;
     }
 
+    _onUserListActivated(activatedItem) {
+        this._authPrompt.hideUserListMenu();
+
+        if (activatedItem.user === this._user)
+            return;
+
+        this._user = activatedItem.user;
+        this._authPrompt.cancel();
+        this._changeUser(this._user);
+    }
+
+    _onReset(authPrompt, beginRequest) {
+        this._resetGreeterProxy();
+        this._sessionMenuButton.updateSensitivity(true);
+
+        if (this._nextSignalId) {
+            this._authPrompt.disconnect(this._nextSignalId);
+            this._nextSignalId = 0;
+        }
+
+        if (beginRequest === GnomeAuthPrompt.BeginRequestType.PROVIDE_USERNAME) {
+            if (!this._disableUserList)
+                this._showUserList();
+            else
+                this._hideUserListAskForUsernameAndBeginVerification();
+        } else {
+            this._hideUserListAndBeginVerification();
+        }
+    }
+
     open() {
         Main.ctrlAltTabManager.addGroup(this,
             _('Login Window'),
diff --git a/extensions/greeter/meson.build b/extensions/greeter/meson.build
index 20025ce..9369561 100644
--- a/extensions/greeter/meson.build
+++ b/extensions/greeter/meson.build
@@ -6,5 +6,6 @@ extension_data += configure_file(
 
 extension_sources += files(
     'loginDialog.js',
-    'authPrompt.js'
+    'authPrompt.js',
+    'userWidget.js'
 )
diff --git a/extensions/greeter/userWidget.js b/extensions/greeter/userWidget.js
new file mode 100644
index 0000000..70f73ca
--- /dev/null
+++ b/extensions/greeter/userWidget.js
@@ -0,0 +1,161 @@
+// -*- mode: js; js-indent-level: 4; indent-tabs-mode: nil -*-
+//
+// A widget showing the user avatar and name
+/* exported UserWidget */
+
+const { Clutter, GObject, St } = imports.gi;
+
+const GnomeUserWidget = imports.ui.userWidget;
+const Main = imports.ui.main;
+const PopupMenu = imports.ui.popupMenu;
+
+var Avatar = GObject.registerClass(class Avatar extends GnomeUserWidget.Avatar {
+    _init(user, params) {
+        super._init(user, params);
+    }
+
+    changeUser(user) {
+        this._user = user;
+    }
+});
+
+var UserWidgetLabel = GObject.registerClass(
+class UserWidgetLabel extends St.Label {
+    _init(user) {
+        super._init({ y_align: Clutter.ActorAlign.CENTER });
+
+        this._user = user;
+    }
+
+    update() {
+        if (this._user && this._user.is_loaded)
+            this.text = this._user.get_real_name();
+        else
+            this.text = '';
+    }
+
+    changeUser(user) {
+        this._user = user;
+    }
+});
+
+var UserWidget = GObject.registerClass(
+class UserWidget extends St.BoxLayout {
+    _init(user) {
+        // If user is null, that implies a username-based login authorization.
+        this._user = user;
+
+        let vertical = true;
+        let xAlign = Clutter.ActorAlign.CENTER;
+        let styleClass = 'user-widget vertical';
+        super._init({ styleClass, vertical, xAlign });
+
+        this.connect('destroy', this._onDestroy.bind(this));
+
+        this._userLoadedId = 0;
+        this._userChangedId = 0;
+
+        this._createAvatar(user);
+        this._createLabelButton(user);
+        this._createUserListMenu();
+
+        this._labelButton.connect('clicked', this._onLabelButtonClicked.bind(this));
+
+        this._updateUser();
+    }
+
+    _onLabelButtonClicked() {
+        if (this._user === null)
+            return;
+
+        if (this._userList && this._userList.numItems() === 1)
+            return;
+
+        this._userListMenu.toggle();
+    }
+
+    _createAvatar(user) {
+        this._avatar = new Avatar(user);
+        this._avatar.x_align = Clutter.ActorAlign.CENTER;
+        this.add_child(this._avatar);
+    }
+
+    _createLabelButton(user) {
+        // labelButtonBox
+        this._labelButtonBox = new St.BoxLayout({
+            x_expand: true,
+            y_expand: true,
+            vertical: false,
+            x_align: Clutter.ActorAlign.CENTER,
+        });
+        this._labelButtonBox.style = 'spacing: 15px;';
+
+        // label and icon
+        this._label = new UserWidgetLabel(user);
+        this._labelButtonBox.add_actor(this._label);
+
+        this._icon = new St.Icon({
+            icon_name: 'pan-down-symbolic',
+            icon_size: 20,
+            y_align: Clutter.ActorAlign.END,
+        });
+        this._labelButtonBox.add_actor(this._icon);
+
+        // labelButton
+        this._labelButton = new St.Button({ child: this._labelButtonBox });
+        this.add_child(this._labelButton);
+    }
+
+    _createUserListMenu() {
+        this._userListMenu = new PopupMenu.PopupMenu(this._labelButton, 0.5, St.Side.TOP);
+        this._userListMenuSection = new PopupMenu.PopupMenuSection();
+        this._userListMenu.addMenuItem(this._userListMenuSection);
+        this._userListMenu.actor.hide();
+
+        this.subMenuManager = new PopupMenu.PopupMenuManager(this);
+        this.subMenuManager.addMenu(this._userListMenu);
+        Main.uiGroup.add_actor(this._userListMenu.actor);
+    }
+
+    setUserList(userList) {
+        this._userListMenuSection.actor.add_actor(userList);
+    }
+
+    _onDestroy() {
+        if (this._userLoadedId !== 0) {
+            this._user.disconnect(this._userLoadedId);
+            this._userLoadedId = 0;
+        }
+
+        if (this._userChangedId !== 0) {
+            this._user.disconnect(this._userChangedId);
+            this._userChangedId = 0;
+        }
+    }
+
+    _updateUser() {
+        this._avatar.update();
+        this._label.update();
+    }
+
+    changeUser(user) {
+        this._onDestroy();
+
+        if (user) {
+            this._userLoadedId = user.connect('notify::is-loaded', this._updateUser.bind(this));
+            this._userChangedId = user.connect('changed', this._updateUser.bind(this));
+        }
+
+        this._user = user;
+        this._avatar.changeUser(user);
+        this._label.changeUser(user);
+
+        this._updateUser();
+
+        this._icon.visible = user !== null;
+    }
+
+    setOnlyUserName(name) {
+        this._label.text = name;
+    }
+});
