From: saehan_lee <saehan_lee@tmax.co.kr>
Date: Mon, 14 Feb 2022 15:20:07 +0900
Subject: [feat] Gooroom-security : add gooroom-security extensions

- add security indicator at status area
- use gooroom-security-utils package
- modify UI style to gnome3

[IMS] N/A
---
 extensions/gooroom-security/extension.js           | 165 +++++++++++++++++++++
 extensions/gooroom-security/meson.build            |  19 +++
 extensions/gooroom-security/metadata.json.in       |   9 ++
 extensions/gooroom-security/notify.gjs             |  36 +++++
 extensions/gooroom-security/schemas/meson.build    |  14 ++
 ...e.shell.extensions.gooroom-security.gschema.xml |  15 ++
 extensions/gooroom-security/securityUtils.js       | 158 ++++++++++++++++++++
 extensions/gooroom-security/stylesheet.css         |   1 +
 meson.build                                        |   3 +-
 9 files changed, 419 insertions(+), 1 deletion(-)
 create mode 100644 extensions/gooroom-security/extension.js
 create mode 100644 extensions/gooroom-security/meson.build
 create mode 100644 extensions/gooroom-security/metadata.json.in
 create mode 100644 extensions/gooroom-security/notify.gjs
 create mode 100644 extensions/gooroom-security/schemas/meson.build
 create mode 100644 extensions/gooroom-security/schemas/org.gnome.shell.extensions.gooroom-security.gschema.xml
 create mode 100644 extensions/gooroom-security/securityUtils.js
 create mode 100644 extensions/gooroom-security/stylesheet.css

diff --git a/extensions/gooroom-security/extension.js b/extensions/gooroom-security/extension.js
new file mode 100644
index 0000000..499b617
--- /dev/null
+++ b/extensions/gooroom-security/extension.js
@@ -0,0 +1,165 @@
+/* exported init, enable, disable */
+const Me = imports.misc.extensionUtils.getCurrentExtension();
+const { getSettings } = imports.misc.extensionUtils;
+
+const SecurityUtils = Me.imports.securityUtils;
+
+const Main = imports.ui.main;
+const PopupMenu = imports.ui.popupMenu;
+const ByteArray = imports.byteArray;
+const PanelMenu = imports.ui.panelMenu;
+
+const { Gio, GObject, St } = imports.gi;
+
+const systemVulnerablePath = '/var/tmp/GOOROOM-SECURITY-STATUS-VULNERABLE';
+
+var menuButton;
+var vulnerableMonitor;
+
+var vulnerableHistory = 0;
+
+// var jsonLogObject;
+var vulnerableUpdateId = 0;
+
+var settings;
+var settingsChangedId = 0;
+
+var GooroomSecurityButton = GObject.registerClass(class GooroomSecurityButton extends PanelMenu.Button {
+    _init() {
+        super._init(0.5, 'goorooom-security');
+
+        this.imageItem = new PopupMenu.PopupSubMenuMenuItem('보안상태: ', true);
+        this.statusLabel = new St.Label();
+        this.imageItem.insert_child_at_index(this.statusLabel, 3);
+
+        this.menu.addMenuItem(this.imageItem);
+        this.imageItem.menu.addSettingsAction('구름 보안상태 도구', 'gooroom-security-status-tool.desktop');
+        this.measure = this.imageItem.menu.addAction('안전 조치 실행', safetyMeasureHandler);
+        this.measure.set_reactive(false);
+
+        this.trayIcon = new St.Icon({ icon_size: 20 });
+        this.add_child(this.trayIcon);
+        this.update(-1);
+    }
+
+    update(vulnerableBit) {
+        if (vulnerableBit < 0) {
+            this.statusLabel.text = '알수없음';
+            this.statusLabel.style = '';
+            this.measure.set_reactive(false);
+            this.trayIcon.icon_name = 'security-status-unknown';
+            this.imageItem.icon.icon_name = 'security-status-unknown';
+        } else if (vulnerableBit === 0) {
+            this.statusLabel.text = '안전';
+            this.statusLabel.style = 'color: green';
+            this.measure.set_reactive(false);
+            this.trayIcon.icon_name = 'security-status-safety';
+            this.imageItem.icon.icon_name = 'security-status-safety';
+
+        } else if (vulnerableBit >= 0) {
+            this.statusLabel.text = '취약';
+            this.statusLabel.style =  'color: red';
+            this.measure.set_reactive(true);
+            this.trayIcon.icon_name = 'security-status-vulnerable';
+            this.imageItem.icon.icon_name = 'security-status-vulnerable';
+
+        }
+
+    }
+});
+
+function updateSecurityStatus() {
+    let [jsonVulnerable, jsonObject_]  = SecurityUtils.runLogparser();
+
+    /* this code is test code for parsing variable case json object parsing
+    if(!jsonLogObject){
+        global.log("initial test setting");
+        jsonLogObject = jsonObject_;
+    } else {
+        global.log("already initialized");
+        jsonVulnerable = SecurityUtils.parseJsonObject(jsonLogObject);
+    }
+    */
+
+    if (jsonVulnerable < 0) {
+        global.log('error happened during run logparser');
+        menuButton.update(jsonVulnerable);
+        return;
+    }
+
+    let file = Gio.File.new_for_path(systemVulnerablePath);
+
+    let lastVulnerable = 0;
+    try {
+        let [result, outputByteArray] = file.load_contents(null);
+
+        if (result) {
+            let output = ByteArray.toString(outputByteArray);
+            let outputInt = parseInt(output);
+            lastVulnerable = outputInt;
+        }
+    } catch (e) {
+        global.log('something happened');
+        global.log(e);
+    }
+    if (jsonVulnerable === 0 && lastVulnerable === 0) {
+        menuButton.update(0);
+        // global.log("It is safe")
+    } else if (jsonVulnerable > 0) {
+        SecurityUtils.sendNotification(jsonVulnerable);
+        menuButton.update(jsonVulnerable);
+        vulnerableHistory |= jsonVulnerable;
+        SecurityUtils.setLastVulnerable(vulnerableHistory);
+    }
+
+}
+
+function safetyMeasureHandler() {
+
+    if (SecurityUtils.isGooroomAgentServiceActive())
+        SecurityUtils.sendTakingMeasureSignalToAgent();
+    else
+        SecurityUtils.sendTakingMeasureSignalToSelf(); // send taking mesure singal to self
+    SecurityUtils.setLastVulnerable(0);
+}
+
+function vulnerableUpdateHandler(obj, file, otherfile, eventType) {
+    if (eventType === Gio.FileMonitorEvent.CHANGES_DONE_HINT)
+        updateSecurityStatus();
+
+}
+
+function init() {
+    global.log('init');
+
+    settings = getSettings();
+    let vulnerableFile = Gio.File.new_for_path(systemVulnerablePath);
+
+    vulnerableMonitor = vulnerableFile.monitor_file(Gio.FileMonitorFlags.NONE, null);
+}
+
+function enable() {
+    global.log('enable');
+
+    vulnerableUpdateId = vulnerableMonitor.connect('changed', vulnerableUpdateHandler);
+    settingsChangedId = settings.connect('changed::cycle-time', updateSecurityStatus.bind(this));
+
+    menuButton = new GooroomSecurityButton();
+
+    Main.panel.addToStatusArea('gooroom-security', menuButton, null, 'right');
+    updateSecurityStatus();
+
+}
+
+function disable() {
+    global.log('disable');
+
+    settings.disconnect(settingsChangedId);
+    settingsChangedId = 0;
+
+    vulnerableMonitor.disconnect(vulnerableUpdateId);
+    vulnerableUpdateId = 0;
+
+    SecurityUtils.setLastVulnerable(0);
+    menuButton.destroy();
+}
diff --git a/extensions/gooroom-security/meson.build b/extensions/gooroom-security/meson.build
new file mode 100644
index 0000000..29ed36d
--- /dev/null
+++ b/extensions/gooroom-security/meson.build
@@ -0,0 +1,19 @@
+extension_data += configure_file(
+  input: metadata_name + '.in',
+  output: metadata_name,
+  configuration: metadata_conf
+)
+
+extension_sources += files(
+    'notify.gjs',
+    'securityUtils.js'
+)
+
+extension_dir = join_paths(extensiondir, uuid)
+
+schema_data_dir = 'schemas'
+
+subdir(schema_data_dir)
+
+# extension_sources += files('prefs.js')
+# extension_schemas += files(metadata_conf.get('gschemaname') + '.gschema.xml')
diff --git a/extensions/gooroom-security/metadata.json.in b/extensions/gooroom-security/metadata.json.in
new file mode 100644
index 0000000..44bafad
--- /dev/null
+++ b/extensions/gooroom-security/metadata.json.in
@@ -0,0 +1,9 @@
+{
+"extension-id": "@extension_id@",
+"uuid": "@uuid@",
+"settings-schema":"@gschemaname@",
+"name": "gooroom-security",
+"description" : "Gooroom Security status indicator & notification tool",
+"original-authors": ["tmax"],
+"shell-version": ["@shell_current"]
+}
diff --git a/extensions/gooroom-security/notify.gjs b/extensions/gooroom-security/notify.gjs
new file mode 100644
index 0000000..b2f5491
--- /dev/null
+++ b/extensions/gooroom-security/notify.gjs
@@ -0,0 +1,36 @@
+#!/usr/bin/gjs
+
+const Notify = imports.gi.Notify;
+
+const OS_VULNERABLE = 1 << 0;
+const EXE_VULNERABLE = 1 << 1;
+const BOOT_VULNERABLE = 1 << 2;
+const MEDIA_VULNERABLE = 1 << 3;
+
+
+let warningSection = [];
+
+if (ARGV[0] & OS_VULNERABLE)
+    warningSection.push('Protecting OS');
+
+if (ARGV[0] & EXE_VULNERABLE)
+    warningSection.push('Protect executable files');
+
+if (ARGV[0] & BOOT_VULNERABLE)
+    warningSection.push('Trusted Booting ');
+
+if (ARGV[0] & MEDIA_VULNERABLE)
+    warningSection.push('Resources Control');
+
+
+
+
+Notify.init('Hello world');
+
+
+var Hello = new Notify.Notification({ summary: 'Security Status Of Gooroom System',
+    body: `[${warningSection.join(',')}] A security vulnerability has been detected`,
+    'icon_name': 'dialog-information' });
+Hello.set_app_name('gooroom-security-status-tool');
+
+Hello.show();
diff --git a/extensions/gooroom-security/schemas/meson.build b/extensions/gooroom-security/schemas/meson.build
new file mode 100644
index 0000000..1278627
--- /dev/null
+++ b/extensions/gooroom-security/schemas/meson.build
@@ -0,0 +1,14 @@
+run_command('glib-compile-schemas', meson.current_source_dir())
+
+install_data([
+		'gschemas.compiled',
+    'org.gnome.shell.extensions.gooroom-security.gschema.xml'
+	],
+	install_dir : join_paths(extension_dir, schema_data_dir)
+)
+
+install_data([
+    'org.gnome.shell.extensions.gooroom-security.gschema.xml'
+	],
+	install_dir : schemadir
+)
diff --git a/extensions/gooroom-security/schemas/org.gnome.shell.extensions.gooroom-security.gschema.xml b/extensions/gooroom-security/schemas/org.gnome.shell.extensions.gooroom-security.gschema.xml
new file mode 100644
index 0000000..1bc9a05
--- /dev/null
+++ b/extensions/gooroom-security/schemas/org.gnome.shell.extensions.gooroom-security.gschema.xml
@@ -0,0 +1,15 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<schemalist gettext-domain="gooroom-security">
+  <schema path="/org/gnome/shell/extensions/gooroom-security/" id="org.gnome.shell.extensions.gooroom-security">
+    <key name="allow-duplicate-notifications" type="b">
+      <default>false</default>
+      <summary>Whether to allow duplicate notification</summary>
+      <description>Whether to allow duplicate notifications</description>
+    </key>
+    <key name="cycle-time" type="u">
+      <default>5</default>
+      <summary>Cycle to check security status</summary>
+      <description></description>
+    </key>
+  </schema>
+</schemalist>
diff --git a/extensions/gooroom-security/securityUtils.js b/extensions/gooroom-security/securityUtils.js
new file mode 100644
index 0000000..66cf321
--- /dev/null
+++ b/extensions/gooroom-security/securityUtils.js
@@ -0,0 +1,158 @@
+/* exported sendTakingMeasureSignalToAgent, sendTakingMeasureSignalToSelf,
+isGooroomAgentServiceActive, setLastVulnerable, parseJsonObject, runLogparser, sendNotification */
+/* this is API that uses Gooroom-security-utils package */
+const Me = imports.misc.extensionUtils.getCurrentExtension();
+
+const { GLib, Gio } = imports.gi;
+const ByteArray = imports.byteArray;
+
+const systemNextSeekTimePath = '/var/tmp/GOOROOM-SECURITY-LOGPARSER-NEXT-SEEKTIME';
+
+const gooroomAgentServiceName = 'gooroom-agent.service';
+
+
+const OS_VULNERABLE = 1 << 0;
+const EXE_VULNERABLE = 1 << 1;
+const BOOT_VULNERABLE = 1 << 2;
+const MEDIA_VULNERABLE = 1 << 3;
+
+function setLastVulnerable(value) {
+    let pkexecPath = GLib.find_program_in_path('pkexec');
+    if (pkexecPath === null) {
+        global.log('there are no program path');
+        return;
+    }
+    let cmdArray = [pkexecPath];
+
+    cmdArray.push('/usr/lib/gooroom-security-utils/gooroom-security-status-vulnerable-helper');
+    cmdArray.push(`${value}`);
+
+    GLib.spawn_sync(null, cmdArray, null, null, null);
+}
+
+function sendTakingMeasureSignalToAgent() {
+    let agentProxy = Gio.DBusProxy.new_for_bus_sync(imports.gi.Gio.BusType.SYSTEM, imports.gi.Gio.DBusProxyFlags.NONE, null, 'kr.gooroom.agent', '/kr/gooroom/agent', 'kr.gooroom.agent', null);
+    let arg = new GLib.Variant('(s)', '{"module":{"module_name":"log","task":{"task_name":"clear_security_alarm","in":{}}}}');
+
+    let variant = agentProxy.call_sync('do_task', arg, Gio.DBusCallFlags.NONE, -1, null);
+
+    return variant;
+}
+
+function sendTakingMeasureSignalToSelf() {
+    let pkexecPath = GLib.find_program_in_path('pkexec');
+    if (pkexecPath === null) {
+        global.log('there are no program path');
+        return;
+    }
+    let cmdArray = [pkexecPath];
+
+    cmdArray.push('/usr/lib/gooroom-security-utils/gooroom-logparser-seektime-helper');
+
+    GLib.spawn_async(null, cmdArray, null, null, null);
+}
+
+function isGooroomAgentServiceActive() {
+    let [ok, standardOutput] = GLib.spawn_command_line_sync(`systemctl show --value ${gooroomAgentServiceName} -p  ActiveState`);
+    if (!ok) {
+        global.log('Something happened during systemctl');
+        return false;
+    }
+
+    let ouputString = imports.byteArray.toString(standardOutput);
+
+    if (ouputString.includes('inactive'))
+        return false;
+    else
+        return true;
+}
+
+function parseLog(logString) {
+    let outputJSONIndex = logString.indexOf('JSON-ANCHOR=');
+    let output = logString.slice(outputJSONIndex + 12);
+
+    let JsonOutput = JSON.parse(output);
+
+    let vulnerableBit = 0;
+    if (!JsonOutput.os_status)
+        global.log('os_status is not existed');
+    else if (JsonOutput.os_status === 'vulnerable')
+        vulnerableBit |= OS_VULNERABLE;
+    if (!JsonOutput.exe_status)
+        global.log('exe_status is not existed');
+    else if (JsonOutput.exe_status === 'vulnerable')
+        vulnerableBit |= EXE_VULNERABLE;
+    if (!JsonOutput.boot_status)
+        global.log('boot_status is not existed');
+    else if (JsonOutput.boot_status === 'vulnerable')
+        vulnerableBit |= BOOT_VULNERABLE;
+    if (!JsonOutput.media_status)
+        global.log('media_status is not existed');
+    else if (JsonOutput.media_status === 'vulnerable')
+        vulnerableBit |= OS_VULNERABLE;
+
+    return [vulnerableBit, JsonOutput];
+}
+
+function parseJsonObject(JsonOutput) {
+    let vulnerableBit = 0;
+    if (!JsonOutput.os_status)
+        global.log('os_status is not existed');
+    else if (JsonOutput.os_status === 'vulnerable')
+        vulnerableBit |= OS_VULNERABLE;
+    if (!JsonOutput.exe_status)
+        global.log('exe_status is not existed');
+    else if (JsonOutput.exe_status === 'vulnerable')
+        vulnerableBit |= EXE_VULNERABLE;
+    if (!JsonOutput.boot_status)
+        global.log('boot_status is not existed');
+    else if (JsonOutput.boot_status === 'vulnerable')
+        vulnerableBit |= BOOT_VULNERABLE;
+    if (!JsonOutput.media_status)
+        global.log('media_status is not existed');
+    else if (JsonOutput.media_status === 'vulnerable')
+        vulnerableBit |= MEDIA_VULNERABLE;
+
+    return vulnerableBit;
+}
+
+function runLogparser() {
+    if (!GLib.find_program_in_path('pkexec')) {
+        global.log('there is problem with polkit (pkexec)');
+        return [-1, null];
+    }
+    if (!GLib.find_program_in_path('gooroom-security-logparser')) {
+        global.log('there is problrem with gooroom-security-utils, check gooroom-security-utils package');
+        return [-1, null];
+    }
+    let cmdArray = ['/usr/bin/pkexec', '/usr/lib/gooroom-security-utils/gooroom-security-logparser-wrapper'];
+
+    let nextSeekTimeFile = Gio.File.new_for_path(systemNextSeekTimePath);
+
+    if (nextSeekTimeFile.query_exists(null)) {
+        let [ok, output] = nextSeekTimeFile.load_contents(null);
+        if (ok) {
+            output = ByteArray.toString(output);
+            // global.log("output: "+ output);
+            cmdArray.push(output);
+        }
+    }
+
+    // global.log(cmdArray);
+
+    let [ok, output, error, exitStatus_] = GLib.spawn_sync(null, cmdArray, null, null, null);
+    if (!ok) {
+        global.log('there is something error occured');
+        global.log(error);
+
+    } else {
+        output = ByteArray.toString(output);
+        return parseLog(output);
+    }
+}
+
+function sendNotification(vulnerableBit) {
+    let path = GLib.build_filenamev([Me.path, 'notify.gjs']);
+    let cmdArray = ['gjs', path, vulnerableBit];
+    GLib.spawn_command_line_async(cmdArray.join(' '));
+}
diff --git a/extensions/gooroom-security/stylesheet.css b/extensions/gooroom-security/stylesheet.css
new file mode 100644
index 0000000..25134b6
--- /dev/null
+++ b/extensions/gooroom-security/stylesheet.css
@@ -0,0 +1 @@
+/* This extensions requires no special styling */
diff --git a/meson.build b/meson.build
index 89a158b..cb47516 100644
--- a/meson.build
+++ b/meson.build
@@ -54,7 +54,8 @@ tos_extensions = [
   'greeter',
   'calibrator',
   'screenshot',
-  'monitor-settings-saver'
+  'monitor-settings-saver',
+  'gooroom-security'
 ]
 
 
