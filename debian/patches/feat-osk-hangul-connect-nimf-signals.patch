From: jiyun_ha <jiyun_ha@tmax.co.kr>
Date: Thu, 14 Oct 2021 17:02:18 +0900
Subject: [feat] osk-hangul : connect nimf signals

 - External applications sometimes use other input method(not ibus). To
   support using OSK when application uses other input method,
   connecting to signals that is emitted by input method is needed.
   Since TOS 21 uses nimf as its formal input method, connecting to nimf
   signals are needed. After applying this commit, connecting nimf's
   'focus-in', 'focus-out' and 'engine-change' signal will be possible. Other input methods(e.g. uim, nabi...etc) will be supported later.

[IMS] N/A
---
 extensions/osk-hangul/adapter.js         |   5 +
 extensions/osk-hangul/extension.js       |  26 ++++-
 extensions/osk-hangul/keyboardWrapper.js | 166 +++++++++++++++++++++----------
 extensions/osk-hangul/utils.js           |  13 ++-
 4 files changed, 153 insertions(+), 57 deletions(-)

diff --git a/extensions/osk-hangul/adapter.js b/extensions/osk-hangul/adapter.js
index fa2cc64..1ad762e 100644
--- a/extensions/osk-hangul/adapter.js
+++ b/extensions/osk-hangul/adapter.js
@@ -22,6 +22,11 @@ var Adapter = class Adapter {
                 wrapper: new KeyboardWrapper.IbusKeyboardWrapper(),
                 type: LAYOUT_KEY_TYPE_LABEL,
             },
+            nimf: {
+                inputMethod: 'nimf',
+                wrapper: new KeyboardWrapper.NimfKeyboardWrapper(),
+                type: LAYOUT_KEY_TYPE_LABEL,
+            },
         };
 
         this._layoutKeyType = null;
diff --git a/extensions/osk-hangul/extension.js b/extensions/osk-hangul/extension.js
index 0609caf..11ca737 100644
--- a/extensions/osk-hangul/extension.js
+++ b/extensions/osk-hangul/extension.js
@@ -9,7 +9,7 @@ const IBusManager = imports.misc.ibusManager;
 
 const Me = imports.misc.extensionUtils.getCurrentExtension();
 const Adapter = Me.imports.adapter;
-const { changeIBusPurposeToClutterPurpose } = Me.imports.utils;
+const { changeIBusPurposeToClutterPurpose, getNimfService } = Me.imports.utils;
 
 const BASIC_KEYBOARD_LAYOUT = 0;
 
@@ -17,8 +17,11 @@ const BASIC_KEYBOARD_LAYOUT = 0;
 let _a11ySignalId = null;
 let _touchModeNotifyId = null;
 let _lastDeviceChangedId = null;
+let _ibusSetContentTypeId = null;
 
 let _ibusFocusInId = null;
+let _nimfFocusInId = null;
+let _nimfFocusOutId = null;
 let _keyboardDestroyId = null;
 let _layoutKeyTypeChagnedId = null;
 
@@ -33,6 +36,7 @@ function _enable(inputMethod = 'xkb') {
         adapter = new Adapter.Adapter();
 
     adapter.setInputMethod(inputMethod);
+    KeyboardManager._keyboard._setActiveLayer(BASIC_KEYBOARD_LAYOUT);
 }
 
 // Synchronize with this extension and availability of on-screen-keyboard.
@@ -65,9 +69,18 @@ function _getSyncKeyboardFunc() {
             });
 
             _layoutKeyTypeChagnedId = adapter.connect('layout-key-type', () => {
-                log('layout-key-type changed');
                 KeyboardManager._keyboard._onKeyboardGroupsChanged();
             });
+
+            const nimfService = getNimfService();
+            const focusTracker = KeyboardManager._keyboard._focusTracker;
+            _nimfFocusInId = nimfService.connect('focus-in', () => {
+                _enable('nimf');
+                focusTracker.emit('focus-changed', true);
+            });
+            _nimfFocusOutId = nimfService.connect('focus-out', () => {
+                focusTracker.emit('focus-changed', false);
+            });
         }
     }
 
@@ -84,7 +97,7 @@ function enable() { // eslint-disable-line no-unused-vars
     syncKeyboard();
 
     let ibusManager = IBusManager.getIBusManager();
-    ibusManager.connect('set-content-type', (im, purpose, _hints) => {
+    _ibusSetContentTypeId = ibusManager.connect('set-content-type', (im, purpose, _hints) => {
         if (purpose !== Main.inputMethod._purpose) {
             Main.inputMethod._purpose = changeIBusPurposeToClutterPurpose(purpose);
 
@@ -111,6 +124,10 @@ function _resetKeyboard() {
 
         if (_layoutKeyTypeChagnedId)
             adapter.disconnect(_layoutKeyTypeChagnedId);
+
+        const nimfService = getNimfService();
+        nimfService.disconnect(_nimfFocusInId);
+        nimfService.disconnect(_nimfFocusOutId);
     }
 }
 
@@ -120,9 +137,10 @@ function disable() { // eslint-disable-line no-unused-vars
     KeyboardManager._a11yApplicationsSettings.disconnect(_a11ySignalId);
     KeyboardManager._seat.disconnect(_touchModeNotifyId);
     global.backend.disconnect(_lastDeviceChangedId);
+    IBusManager.getIBusManager().disconnect(_ibusSetContentTypeId);
 
     _a11ySignalId = null;
     _touchModeNotifyId = null;
     _lastDeviceChangedId = null;
-
+    _ibusSetContentTypeId = null;
 }
diff --git a/extensions/osk-hangul/keyboardWrapper.js b/extensions/osk-hangul/keyboardWrapper.js
index 731e5de..c9db918 100644
--- a/extensions/osk-hangul/keyboardWrapper.js
+++ b/extensions/osk-hangul/keyboardWrapper.js
@@ -1,13 +1,12 @@
-/* exported BaseKeyboardWrapper, IbusKeyboardWrapper, XkbKeyboardWrapper */
-const { Clutter, IBus } = imports.gi;
+/* exported BaseKeyboardWrapper, IbusKeyboardWrapper, XkbKeyboardWrapper, NimfKeyboardWrapper */
+const { Clutter } = imports.gi;
 
 const Main = imports.ui.main;
 const KeyboardManager = Main.keyboard;
 
-const IBusManager = imports.misc.ibusManager;
 const Me = imports.misc.extensionUtils.getCurrentExtension();
 const QwertyKeysyms = Me.imports.xkbcommon_keysyms.QwertyMap;
-const getIBusHangul = Me.imports.utils.getIBusHangul;
+const { getIBusHangul, getNimfService } = Me.imports.utils;
 
 // Korean Charactor that indicates kiyeog. First letter of korean key symbols.
 const HangulKiyeog = 0x0ea1;
@@ -25,35 +24,11 @@ function _krToUsKeysym(keyval) {
     return _isKoreanCharactor(keyval) ? QwertyKeysyms[keyval] : keyval;
 }
 
-function _getCurrentGroup() {
-    let ibusHangul = getIBusHangul();
-
-    if (ibusHangul && ibusHangul.properties)
-        return ibusHangul.properties.get('InputMode').get_state() === 0 ? 'us' : 'kr';
-
-    return null;
-}
-
-function _switchInputMethod() {
-    let ibusHangul = getIBusHangul();
-
-    if (!ibusHangul)
-        return;
-
-    let inputMethod = Main.inputMethod;
-    if (inputMethod._currentSource !== ibusHangul) {
-        let inputSourceManager = inputMethod._inputSourceManager;
-        inputSourceManager.activateInputSource(ibusHangul, true);
-    }
-
-    let ibusManager = IBusManager.getIBusManager();
-    // change InputMode to Korean or English according to its previous mode
-    ibusManager.activateProperty('InputMode', IBus.PropState.CHECKED);
-}
 
 class BaseKeyboardWrapper {
     constructor() {
         this._originalFunctions = [];
+        this._setAnimationWindow = () => {};
     }
 
     wrap(target, originalFuncName, replaceFunc) {
@@ -71,7 +46,7 @@ class BaseKeyboardWrapper {
 
     wrapAll() {
         let keyboard = KeyboardManager._keyboard;
-        this.wrap(keyboard, '_setAnimationWindow', () => {});
+        this.wrap(keyboard, '_setAnimationWindow', this._setAnimationWindow);
     }
 
     restoreAll() {
@@ -82,27 +57,27 @@ class BaseKeyboardWrapper {
     }
 }
 var IbusKeyboardWrapper = class IbusKeyboardWrapper extends BaseKeyboardWrapper {
-    wrapAll() {
-        super.wrapAll();
+    constructor() {
+        super();
+
         let keyboard = KeyboardManager._keyboard;
         let controller = keyboard._keyboardController;
 
-        this.wrap(controller, 'keyvalPress', (originalKeyvalPress, keyval) => {
+        this.keyvalPress = (originalKeyvalPress, keyval) => {
             keyval = _krToUsKeysym(keyval);
             return originalKeyvalPress.call(controller, keyval);
-        });
+        };
 
-        this.wrap(controller, 'keyvalRelease', (originalKeyvalRelease, keyval) => {
+        this.keyvalRelease = (originalKeyvalRelease, keyval) => {
             keyval = _krToUsKeysym(keyval);
             return originalKeyvalRelease.call(controller, keyval);
-        });
+        };
 
-        // change the functionality of flag icon
-        this.wrap(keyboard, '_popupLanguageMenu', () => {
-            _switchInputMethod();
-        });
+        this._popupLanguageMenu = () => {
+            this._switchInputMethod(controller);
+        };
 
-        this.wrap(keyboard, '_createLayersForGroup', (originalCreateLayersForGroup, groupname) => {
+        this._createLayersForGroup = (originalCreateLayersForGroup, groupname) => {
             let layers = originalCreateLayersForGroup.call(keyboard, groupname);
             for (let layer of Object.keys(layers)) {
                 for (let key of layers[layer]) {
@@ -113,17 +88,14 @@ var IbusKeyboardWrapper = class IbusKeyboardWrapper extends BaseKeyboardWrapper
             }
 
             return layers;
-        });
+        };
 
-        // Since 'xkbId' is a single value indicating which language the input method supports, so xkbId of ibus-hangul is always 'kr'.
-        // This occurs that original _setActiveLayer() function shows only korean keyboard layout even if the actual InputMode is english.
-        // So, temporarily change xkbId to match the InputMode of ibus-hangul and restore it.
-        this.wrap(keyboard, '_setActiveLayer', (originalSetActiveLayer, activeLevel) => {
+        this._setActiveLayer = (originalSetActiveLayer, activeLevel) => {
             // make us keyboard layout if not exist
             keyboard._ensureKeysForGroup('us');
 
             let oldGroupName = controller.getCurrentGroup();
-            let newGroupname = _getCurrentGroup();
+            let newGroupname = this._getCurrentGroup();
             if (!newGroupname)
                 newGroupname = oldGroupName;
 
@@ -136,17 +108,102 @@ var IbusKeyboardWrapper = class IbusKeyboardWrapper extends BaseKeyboardWrapper
             originalSetActiveLayer.call(keyboard, activeLevel);
 
             controller._currentSource.xkbId = oldGroupName;
-        });
+        };
+    }
+
+    wrapAll() {
+        super.wrapAll();
+        let keyboard = KeyboardManager._keyboard;
+        let controller = keyboard._keyboardController;
+
+        this.wrap(controller, 'keyvalPress', this.keyvalPress);
+
+        this.wrap(controller, 'keyvalRelease', this.keyvalRelease);
+
+        // change the functionality of flag icon
+        this.wrap(keyboard, '_popupLanguageMenu', this._popupLanguageMenu);
+
+        this.wrap(keyboard, '_createLayersForGroup', this._createLayersForGroup);
+
+        // Since 'xkbId' is a single value indicating which language the input method supports, so xkbId of ibus-hangul is always 'kr'.
+        // This occurs that original _setActiveLayer() function shows only korean keyboard layout even if the actual InputMode is english.
+        // So, temporarily change xkbId to match the InputMode of ibus-hangul and restore it.
+        this.wrap(keyboard, '_setActiveLayer', this._setActiveLayer);
+    }
+
+    _getCurrentGroup() {
+        let ibusHangul = getIBusHangul();
+
+        if (ibusHangul && ibusHangul.properties)
+            return ibusHangul.properties.get('InputMode').get_state() === 0 ? 'us' : 'kr';
+
+        return null;
+    }
+
+    _switchInputMethod(controller) {
+        controller.keyvalPress(0xff31);
+        controller.keyvalRelease(0xff31);
     }
 };
 
-var XkbKeyboardWrapper = class XkbKeyboardWrapper extends BaseKeyboardWrapper {
+var NimfKeyboardWrapper = class NimfKeyboardWrapper extends IbusKeyboardWrapper {
+    constructor() {
+        super();
+        this._current = 'us';
+
+        let keyboard = KeyboardManager._keyboard;
+        let controller = keyboard._keyboardController;
+
+        this._setActiveLayer = (originalSetActiveLayer, activeLevel) => {
+            // make us keyboard layout if not exist
+            keyboard._ensureKeysForGroup('us');
+
+            let oldGroupName = controller.getCurrentGroup();
+            let newGroupname = this._getCurrentGroup();
+
+            controller._currentSource.xkbId = newGroupname;
+
+            originalSetActiveLayer.call(keyboard, activeLevel);
+
+            controller._currentSource.xkbId = oldGroupName;
+        };
+    }
+
     wrapAll() {
         super.wrapAll();
 
+        const nimfService = getNimfService();
+        this._nimfEngineChangeId = nimfService.connect('engine-change', this._onEngineChange.bind(this));
+    }
+
+    _onEngineChange(_, engine) {
+        if (engine === 'nimf-libhangul')
+            this._current = 'kr';
+        else
+            this._current = 'us';
+
+        KeyboardManager._keyboard._onGroupChanged();
+    }
+
+    _getCurrentGroup() {
+        return this._current;
+    }
+
+    restoreAll() {
+        super.restoreAll();
+
+        const nimfService = getNimfService();
+        nimfService.disconnect(this._nimfEngineChangeId);
+    }
+};
+
+var XkbKeyboardWrapper = class XkbKeyboardWrapper extends BaseKeyboardWrapper {
+    constructor() {
+        super();
+
         let keyboard = KeyboardManager._keyboard;
         let controller = keyboard._keyboardController;
-        this.wrap(keyboard, '_setActiveLayer', (originalSetActiveLayer, activeLevel) => {
+        this._setActiveLayer = (originalSetActiveLayer, activeLevel) => {
             // make us keyboard layout if not exist
             keyboard._ensureKeysForGroup('us');
             controller._currentSource.xkbId = 'us';
@@ -154,6 +211,13 @@ var XkbKeyboardWrapper = class XkbKeyboardWrapper extends BaseKeyboardWrapper {
             originalSetActiveLayer.call(keyboard, activeLevel);
 
             controller._currentSource.xkbId = 'kr';
-        });
+        };
+    }
+
+    wrapAll() {
+        super.wrapAll();
+
+        let keyboard = KeyboardManager._keyboard;
+        this.wrap(keyboard, '_setActiveLayer', this._setActiveLayer);
     }
 };
diff --git a/extensions/osk-hangul/utils.js b/extensions/osk-hangul/utils.js
index 3655b92..5f6cec2 100644
--- a/extensions/osk-hangul/utils.js
+++ b/extensions/osk-hangul/utils.js
@@ -1,8 +1,10 @@
-/* exported getIBusHangul, changeIBusPurposeToClutterPurpose */
+/* exported getIBusHangul, getNimfService, changeIBusPurposeToClutterPurpose */
 
-const { Clutter, IBus } = imports.gi;
+const { Clutter, IBus, Nimf } = imports.gi;
 const Main = imports.ui.main;
 
+let nimfService = null;
+
 function getIBusHangul() {
     let inputSourceManager = Main.inputMethod._inputSourceManager;
     let inputSources = inputSourceManager.inputSources;
@@ -18,6 +20,13 @@ function getIBusHangul() {
     return null;
 }
 
+function getNimfService() {
+    if (!nimfService)
+        nimfService = new Nimf.VKeyboardServiceSkeleton();
+
+    return nimfService;
+}
+
 function changeIBusPurposeToClutterPurpose(ibusPurpose) {
     switch (ibusPurpose) {
     case IBus.InputPurpose.FREE_FORM:
