From: jiyun_ha <jiyun_ha@tmax.co.kr>
Date: Tue, 4 May 2021 16:03:54 +0900
Subject: [feat] tos-hotkey : modified base widget to more extensible way

 - modified stylesheet to meet UI/UX guidelines
 - modified base widget to more extensible way

[IMS] N/A
---
 extensions/tos-hotkey/altF4.js       | 28 ++++++++++-------
 extensions/tos-hotkey/baseWidget.js  | 58 +++++++++++++++++++++++-------------
 extensions/tos-hotkey/stylesheet.css |  6 ++--
 3 files changed, 59 insertions(+), 33 deletions(-)

diff --git a/extensions/tos-hotkey/altF4.js b/extensions/tos-hotkey/altF4.js
index 2b75d3b..fef4a34 100644
--- a/extensions/tos-hotkey/altF4.js
+++ b/extensions/tos-hotkey/altF4.js
@@ -25,7 +25,8 @@ class SystemWidget extends BaseWidget.BaseWidget {
     _init() {
         super._init();
         this.systemActions = SystemActions.getDefault();
-        this._setTitle(_('원하는 작업을 선택해 주세요.'));
+        this._setTitle({ style_class: 'system-widget-title',
+            text: _('원하는 작업을 선택해 주세요.') });
         this._addActionToButtons();
     }
 
@@ -45,28 +46,33 @@ class SystemWidget extends BaseWidget.BaseWidget {
         let button;
         let bindFlags = GObject.BindingFlags.DEFAULT | GObject.BindingFlags.SYNC_CREATE;
 
-        button = this.addButton(LOGOUT_LABEL_TEXT, Me.path + LOGOUT_IMG_FILE_PATH,
-            { handler: this._createHandler(this.systemActions.activateLogout.bind(this.systemActions)) });
+        button = this.addButton({ labelText: LOGOUT_LABEL_TEXT,
+            iconName: Me.path + LOGOUT_IMG_FILE_PATH,
+            handler: this._createHandler(this.systemActions.activateLogout.bind(this.systemActions)) });
         this.systemActions.bind_property('can-logout', button, 'reactive', bindFlags);
         this.systemActions.bind_property('can-logout', button, 'can-focus', bindFlags);
 
-        button = this.addButton(USER_SWITCH_LABEL_TEXT, Me.path + USER_SWITCH_IMAGE_PATH,
-            { handler: this._createHandler(this.systemActions.activateSwitchUser.bind(this.systemActions)) });
+        button = this.addButton({ labelText: USER_SWITCH_LABEL_TEXT,
+            iconName: Me.path + USER_SWITCH_IMAGE_PATH,
+            handler: this._createHandler(this.systemActions.activateSwitchUser.bind(this.systemActions)) });
         this.systemActions.bind_property('can-switch-user', button, 'reactive', bindFlags);
         this.systemActions.bind_property('can-switch-user', button, 'can-focus', bindFlags);
 
-        button = this.addButton(SLEEP_LABEL_TEXT, Me.path + SLEEP_IMAGE_PATH,
-            { handler: this._createHandler(this.systemActions.activateSuspend.bind(this.systemActions)) });
+        button = this.addButton({ labelText: SLEEP_LABEL_TEXT,
+            iconName: Me.path + SLEEP_IMAGE_PATH,
+            handler: this._createHandler(this.systemActions.activateSuspend.bind(this.systemActions)) });
         this.systemActions.bind_property('can-suspend', button, 'reactive', bindFlags);
         this.systemActions.bind_property('can-suspend', button, 'can-focus', bindFlags);
 
-        button = this.addButton(RESTART_LABEL_TEXT, Me.path + RESTART_IMAGE_PATH,
-            { handler: this._createHandler(this.systemActions.activateRestart.bind(this.systemActions)) });
+        button = this.addButton({ labelText: RESTART_LABEL_TEXT,
+            iconName: Me.path + RESTART_IMAGE_PATH,
+            handler: this._createHandler(this.systemActions.activateRestart.bind(this.systemActions)) });
         this.systemActions.bind_property('can-restart', button, 'reactive', bindFlags);
         this.systemActions.bind_property('can-restart', button, 'can-focus', bindFlags);
 
-        button = this.addButton(POWEROFF_LABEL_TEXT, Me.path + POWEROFF_IMAGE_PATH,
-            { handler: this._createHandler(this.systemActions.activatePowerOff.bind(this.systemActions)) }
+        button = this.addButton({ labelText: POWEROFF_LABEL_TEXT,
+            iconName: Me.path + POWEROFF_IMAGE_PATH,
+            handler: this._createHandler(this.systemActions.activatePowerOff.bind(this.systemActions)) }
         );
         this.systemActions.bind_property('can-power-off', button, 'reactive', bindFlags);
         this.systemActions.bind_property('can-power-off', button, 'can-focus', bindFlags);
diff --git a/extensions/tos-hotkey/baseWidget.js b/extensions/tos-hotkey/baseWidget.js
index 9cf8194..5992e9c 100644
--- a/extensions/tos-hotkey/baseWidget.js
+++ b/extensions/tos-hotkey/baseWidget.js
@@ -28,7 +28,7 @@ var IconLabelButton = GObject.registerClass(
 class IconLabelButton extends St.BoxLayout {
     _init(params) {
         params = Params.parse(params, {
-            style_class: 'system-widget-button',
+            style_class: null,
             reactive: true,
             track_hover: true,
             can_focus: true,
@@ -108,7 +108,7 @@ var BaseWidget = GObject.registerClass({ // eslint-disable-line no-unused-vars
             y: 0,
             accessible_role: Atk.Role.DIALOG });
 
-        params = Params.parse(params, { styleClass: null,
+        params = Params.parse(params, { style_class: 'system-widget',
             actionMode: Shell.ActionMode.NORMAL,
             shouldFadeIn: true,
             shouldFadeOut: true,
@@ -128,8 +128,8 @@ var BaseWidget = GObject.registerClass({ // eslint-disable-line no-unused-vars
 
         this.backgroundStack = new St.Widget({
             layout_manager: new Clutter.BinLayout(),
-            x_expand: true,
-            y_expand: true,
+            x_expand: false,
+            y_expand: false,
         });
 
         // transparent background
@@ -144,7 +144,7 @@ var BaseWidget = GObject.registerClass({ // eslint-disable-line no-unused-vars
         this.add_actor(this.box);
 
         this.baseLayout = new St.BoxLayout({
-            style_class: 'system-widget',
+            style_class: params.style_class,
             x_align: Clutter.ActorAlign.CENTER,
             y_align: Clutter.ActorAlign.CENTER,
             vertical: true,
@@ -152,15 +152,15 @@ var BaseWidget = GObject.registerClass({ // eslint-disable-line no-unused-vars
         this.box.add_actor(this.baseLayout);
 
         this.contentLayout = new St.BoxLayout({
-            style_class: 'system-widget-content-box',
+            style_class: `${params.style_class}-content-box`,
             vertical: true,
-            y_expand: true,
+            y_expand: false,
         });
         this.baseLayout.add_actor(this.contentLayout);
 
         this.buttonLayout = new St.Widget({
             layout_manager: new Clutter.BoxLayout({ homogeneous: true }),
-            style_class: 'system-widget-button-box',
+            style_class: `${params.style_class}-button-box`,
         });
         this.baseLayout.add_actor(this.buttonLayout);
 
@@ -172,9 +172,12 @@ var BaseWidget = GObject.registerClass({ // eslint-disable-line no-unused-vars
         return this._state;
     }
 
-    _setTitle(title) {
-        let label = new St.Label({ style_class: 'system-widget-title',
-            text: title });
+    _setTitle(params) {
+        params = Params.parse(params, {
+            style_class: 'system-widget-title',
+            text: '',
+        });
+        let label = new St.Label(params);
         this.contentLayout.add_actor(label);
     }
 
@@ -279,18 +282,33 @@ var BaseWidget = GObject.registerClass({ // eslint-disable-line no-unused-vars
      *
      * Returns: the newly added button.
      */
-    addButton(labelText, iconName, params) {
-        let icon = new St.Icon({ style_class: 'system-widget-button-image',
-            y_align: Clutter.ActorAlign.CENTER,
-            gicon: Gio.icon_new_for_string(iconName),
-            icon_size: 38 });
-        let label = new St.Label({ style_class: 'system-widget-button-label',
-            text: labelText,
+    addButton(params) {
+        params = Params.parse(params, {
+            style_class: 'system-widget',
+            labelText: '',
+            iconName: '',
+            handler: null,
+        });
+
+        let iconBox = new St.BoxLayout({
+            style_class: `${params.style_class}-button-image`,
+        });
+        let themeNode = iconBox.get_theme_node();
+
+        let texture = St.TextureCache.get_default();
+        let icon = texture.load_file_async(Gio.file_new_for_path(params.iconName),
+            themeNode.get_width(), themeNode.get_height(), 1, 1);
+
+        iconBox.add_child(icon);
+
+        let label = new St.Label({ style_class: `${params.style_class}-button-label`,
+            text: params.labelText,
             y_align: Clutter.ActorAlign.CENTER });
 
-        let button = new IconLabelButton(params);
+        let button = new IconLabelButton({  style_class: `${params.style_class}-button`,
+            handler: params.handler });
 
-        button.add_child(icon);
+        button.add_child(iconBox);
         button.add_child(label);
         button.vertical = true;
 
diff --git a/extensions/tos-hotkey/stylesheet.css b/extensions/tos-hotkey/stylesheet.css
index f74a244..c4fb8e9 100644
--- a/extensions/tos-hotkey/stylesheet.css
+++ b/extensions/tos-hotkey/stylesheet.css
@@ -1,3 +1,4 @@
+/* alt f4 widget*/
 .system-widget {
   border-radius: 16px;
   background-color: white;
@@ -6,7 +7,6 @@
   box-shadow: 0 0 12px 0 rgba(0,0,0,0.30);
   border: none;
   margin: 0px;
-  padding: 0px 20px 20px 20px;
 }
 
 .system-widget-content-box {
@@ -24,7 +24,7 @@
 
 .system-widget-button-box {
   height: 103px;
-  margin-top: 41px;
+  padding: 21px 20px 0px 20px;
 }
 
 .system-widget-button {
@@ -52,6 +52,8 @@
 }
 
 .system-widget-button-image {
+  width: 38px;
+  height: 38px;
   icon-size: 38px;
   margin: 18px 21px 15px 21px;
 }
