From: gangmo_seong <gangmo_seong@tmax.co.kr>
Date: Tue, 1 Jun 2021 20:34:36 +0900
Subject: [bugfix] dash-to-panel: Fix main dock position

- Removed main dock position selection feature in dashtopanel configuration due to overlap of functions
- applied ESlint

[IMS] N/A
---
 extensions/dash-to-panel/Settings.ui     |  42 --
 extensions/dash-to-panel/panelManager.js |   8 +-
 extensions/dash-to-panel/prefs.js        | 667 +++++++++++++++----------------
 3 files changed, 332 insertions(+), 385 deletions(-)

diff --git a/extensions/dash-to-panel/Settings.ui b/extensions/dash-to-panel/Settings.ui
index 551085b..2549f07 100644
--- a/extensions/dash-to-panel/Settings.ui
+++ b/extensions/dash-to-panel/Settings.ui
@@ -4550,48 +4550,6 @@
                 <property name="visible">True</property>
                 <property name="can_focus">False</property>
                 <property name="selection_mode">none</property>
-                <child>
-                  <object class="GtkListBoxRow" id="multimon_primaty_row">
-                    <property name="visible">True</property>
-                    <property name="can_focus">True</property>
-                    <child>
-                      <object class="GtkGrid" id="multimon_primary_grid">
-                        <property name="visible">True</property>
-                        <property name="can_focus">False</property>
-                        <property name="margin_left">12</property>
-                        <property name="margin_right">12</property>
-                        <property name="margin_top">12</property>
-                        <property name="margin_bottom">12</property>
-                        <property name="row_spacing">32</property>
-                        <property name="column_spacing">32</property>
-                        <child>
-                          <object class="GtkLabel" id="multimon_primary_label">
-                            <property name="visible">True</property>
-                            <property name="can_focus">False</property>
-                            <property name="hexpand">True</property>
-                            <property name="label" translatable="yes">Display the main panel on</property>
-                            <property name="xalign">0</property>
-                          </object>
-                          <packing>
-                            <property name="left_attach">0</property>
-                            <property name="top_attach">0</property>
-                          </packing>
-                        </child>
-                        <child>
-                          <object class="GtkComboBoxText" id="multimon_primary_combo">
-                            <property name="visible">True</property>
-                            <property name="can_focus">False</property>
-                            <property name="valign">center</property>
-                          </object>
-                          <packing>
-                            <property name="left_attach">1</property>
-                            <property name="top_attach">0</property>
-                          </packing>
-                        </child>
-                      </object>
-                    </child>
-                  </object>
-                </child>
                 <child>
                   <object class="GtkListBoxRow" id="multimon_multi_row">
                     <property name="visible">True</property>
diff --git a/extensions/dash-to-panel/panelManager.js b/extensions/dash-to-panel/panelManager.js
index cf23973..6be0e9e 100644
--- a/extensions/dash-to-panel/panelManager.js
+++ b/extensions/dash-to-panel/panelManager.js
@@ -255,17 +255,19 @@ var dtpPanelManager = Utils.defineClass({ // eslint-disable-line no-unused-vars
                 Utils.DisplayWrapper.getMonitorManager(),
                 'monitors-changed',
                 () => {
-                    // Update primary monitor to update primary dock position
-                    Me.settings.set_int('primary-monitor', Main.layoutManager.primaryMonitor.index);
+                    // Update main dock position if primary monitor changed
+                    if (Me.settings.get_int('primary-monitor') !== Main.layoutManager.primaryIndex)
+                        Me.settings.set_int('primary-monitor', Main.layoutManager.primaryIndex);
 
                     if (Main.layoutManager.primaryMonitor) {
                         this._saveMonitors();
                         this._reset();
                     }
                 },
-            ]
+            ],
         );
 
+
         Panel.panelBoxes.forEach(c => this._signalsHandler.add(
             [Main.panel[c], 'actor-added', (parent, child) => this._adjustPanelMenuButton(this._getPanelMenuButton(child), this.primaryPanel.monitor, this.primaryPanel.getPosition())]
         ));
diff --git a/extensions/dash-to-panel/prefs.js b/extensions/dash-to-panel/prefs.js
index 2851895..64088a4 100644
--- a/extensions/dash-to-panel/prefs.js
+++ b/extensions/dash-to-panel/prefs.js
@@ -1,3 +1,4 @@
+/* exported init, buildPrefsWidget */
 /*
  * This file is part of the Dash-To-Panel extension for Gnome 3
  *
@@ -20,23 +21,16 @@
  * Some code was also adapted from the upstream Gnome Shell source code.
  */
 
-const GdkPixbuf = imports.gi.GdkPixbuf;
-const Gio = imports.gi.Gio;
-const GLib = imports.gi.GLib;
-const GObject = imports.gi.GObject;
-const Gtk = imports.gi.Gtk;
-const Gdk = imports.gi.Gdk;
+const { GdkPixbuf, Gio, GLib, Gtk, Gdk } = imports.gi;
 const Lang = imports.lang;
-const Mainloop = imports.mainloop;
 
 const Me = imports.misc.extensionUtils.getCurrentExtension();
 const Convenience = Me.imports.convenience;
 const Gettext = imports.gettext.domain(Me.metadata['gettext-domain']);
 const _ = Gettext.gettext;
-const N_ = function (e) {
+function N_(e) {
     return e;
-};
-const Update = Me.imports.update;
+}
 const Pos = Me.imports.panelPositions;
 
 const SCALE_UPDATE_TIMEOUT = 500;
@@ -49,7 +43,7 @@ const MAX_WINDOW_INDICATOR = 4;
 const SCHEMA_PATH = '/org/gnome/shell/extensions/dash-to-panel/';
 const GSET = 'gnome-shell-extension-tool';
 
-/**
+/*
  * This function was copied from the activities-config extension
  * https://github.com/nls1729/acme-code/tree/master/activities-config
  * by Norman L. Smith.
@@ -60,20 +54,20 @@ function cssHexString(css) {
     for (let loop = 0; loop < 3; loop++) {
         let end = 0;
         let xx = '';
-        for (let loop = 0; loop < 2; loop++) {
+        for (let loop2 = 0; loop2 < 2; loop2++) {
             while (true) {
                 let x = css.slice(end, end + 1);
-                if (x == '(' || x == ',' || x == ')')
+                if (x === '(' || x === ',' || x === ')')
                     break;
                 end++;
             }
-            if (loop == 0) {
+            if (loop2 === 0) {
                 end++;
                 start = end;
             }
         }
         xx = parseInt(css.slice(start, end)).toString(16);
-        if (xx.length == 1)
+        if (xx.length === 1)
             xx = `0${xx}`;
         rrggbb += xx;
         css = css.slice(end);
@@ -82,8 +76,8 @@ function cssHexString(css) {
 }
 
 function setShortcut(settings, shortcutName) {
-    let shortcut_text = settings.get_string(`${shortcutName}-text`);
-    let [key, mods] = Gtk.accelerator_parse(shortcut_text);
+    let shortcutText = settings.get_string(`${shortcutName}-text`);
+    let [key, mods] = Gtk.accelerator_parse(shortcutText);
 
     if (Gtk.accelerator_valid(key, mods)) {
         let shortcut = Gtk.accelerator_name(key, mods);
@@ -97,40 +91,40 @@ function checkHotkeyPrefix(settings) {
     settings.delay();
 
     let hotkeyPrefix = settings.get_string('hotkey-prefix-text');
-    if (hotkeyPrefix == 'Super')
+    if (hotkeyPrefix === 'Super')
         hotkeyPrefix = '<Super>';
-    else if (hotkeyPrefix == 'SuperAlt')
+    else if (hotkeyPrefix === 'SuperAlt')
         hotkeyPrefix = '<Super><Alt>';
     let [, mods]       = Gtk.accelerator_parse(hotkeyPrefix);
-    let [, shift_mods] = Gtk.accelerator_parse(`<Shift>${hotkeyPrefix}`);
-    let [, ctrl_mods]  = Gtk.accelerator_parse(`<Ctrl>${hotkeyPrefix}`);
+    let [, shiftMods] = Gtk.accelerator_parse(`<Shift>${hotkeyPrefix}`);
+    let [, ctrlMods]  = Gtk.accelerator_parse(`<Ctrl>${hotkeyPrefix}`);
 
     let numHotkeys = 10;
     for (let i = 1; i <= numHotkeys; i++) {
         let number = i;
-        if (number == 10)
+        if (number === 10)
             number = 0;
         let key    = Gdk.keyval_from_name(number.toString());
-        let key_kp = Gdk.keyval_from_name(`KP_${number.toString()}`);
+        let keyKp = Gdk.keyval_from_name(`KP_${number.toString()}`);
         if (Gtk.accelerator_valid(key, mods)) {
             let shortcut    = Gtk.accelerator_name(key, mods);
-            let shortcut_kp = Gtk.accelerator_name(key_kp, mods);
+            let shortcutKp = Gtk.accelerator_name(keyKp, mods);
 
             // Setup shortcut strings
             settings.set_strv(`app-hotkey-${i}`, [shortcut]);
-            settings.set_strv(`app-hotkey-kp-${i}`, [shortcut_kp]);
+            settings.set_strv(`app-hotkey-kp-${i}`, [shortcutKp]);
 
             // With <Shift>
-            shortcut    = Gtk.accelerator_name(key, shift_mods);
-            shortcut_kp = Gtk.accelerator_name(key_kp, shift_mods);
+            shortcut    = Gtk.accelerator_name(key, shiftMods);
+            shortcutKp = Gtk.accelerator_name(keyKp, shiftMods);
             settings.set_strv(`app-shift-hotkey-${i}`, [shortcut]);
-            settings.set_strv(`app-shift-hotkey-kp-${i}`, [shortcut_kp]);
+            settings.set_strv(`app-shift-hotkey-kp-${i}`, [shortcutKp]);
 
             // With <Control>
-            shortcut    = Gtk.accelerator_name(key, ctrl_mods);
-            shortcut_kp = Gtk.accelerator_name(key_kp, ctrl_mods);
+            shortcut    = Gtk.accelerator_name(key, ctrlMods);
+            shortcutKp = Gtk.accelerator_name(keyKp, ctrlMods);
             settings.set_strv(`app-ctrl-hotkey-${i}`, [shortcut]);
-            settings.set_strv(`app-ctrl-hotkey-kp-${i}`, [shortcut_kp]);
+            settings.set_strv(`app-ctrl-hotkey-kp-${i}`, [shortcutKp]);
         } else {
             // Reset default settings for the relevant keys if the
             // accelerators are invalid
@@ -154,14 +148,12 @@ function mergeObjects(main, bck) {
 
     return main;
 }
-
-const Settings = new Lang.Class({
+const Settings = new Lang.Class({ // eslint-disable-line no-restricted-properties
     Name: 'DashToPanel.Settings',
-
     _init() {
         this._settings = Convenience.getSettings('org.gnome.shell.extensions.dash-to-panel');
 
-        this._rtl = Gtk.Widget.get_default_direction() == Gtk.TextDirection.RTL;
+        this._rtl = Gtk.Widget.get_default_direction() === Gtk.TextDirection.RTL;
 
         this._builder = new Gtk.Builder();
         this._builder.set_translation_domain(Me.metadata['gettext-domain']);
@@ -188,19 +180,19 @@ const Settings = new Lang.Class({
 
         this._bindSettings();
 
-        this._builder.connect_signals_full(Lang.bind(this, this._connector));
+        this._builder.connect_signals_full(this._connector.bind(this));
     },
 
-    /**
+    /*
      * Connect signals
      */
     _connector(builder, object, signal, handler) {
-        object.connect(signal, Lang.bind(this, this._SignalHandler[handler]));
+        object.connect(signal, this._SignalHandler[handler].bind(this));
     },
 
     _updateVerticalRelatedOptions() {
         let position = this._getPanelPosition(this._currentMonitorIndex);
-        let isVertical = position == Pos.LEFT || position == Pos.RIGHT;
+        let isVertical = position === Pos.LEFT || position === Pos.RIGHT;
         let showDesktopWidthLabel = this._builder.get_object('show_showdesktop_width_label');
 
         showDesktopWidthLabel.set_text(isVertical ? _('Show Desktop button height (px)') : _('Show Desktop button width (px)'));
@@ -211,7 +203,7 @@ const Settings = new Lang.Class({
     _maybeDisableTopPosition() {
         let keepTopPanel = this._settings.get_boolean('stockgs-keep-top-panel');
         let monitorSync = this._settings.get_boolean('panel-element-positions-monitors-sync');
-        let topAvailable = !keepTopPanel || !monitorSync && this._currentMonitorIndex != this.monitors[0];
+        let topAvailable = !keepTopPanel || !monitorSync && this._currentMonitorIndex !== this.monitors[0];
         let topRadio = this._builder.get_object('position_top_button');
 
         topRadio.set_sensitive(topAvailable);
@@ -230,11 +222,11 @@ const Settings = new Lang.Class({
 
     _setPanelPosition(position) {
         let panelPositionsSettings = this._getPanelPositions();
-        let preventTop = this._settings.get_boolean('stockgs-keep-top-panel') && position == Pos.TOP;
+        let preventTop = this._settings.get_boolean('stockgs-keep-top-panel') && position === Pos.TOP;
         let monitorSync = this._settings.get_boolean('panel-element-positions-monitors-sync');
         let monitors = monitorSync ? this.monitors : [this._currentMonitorIndex];
 
-        monitors.forEach(m => panelPositionsSettings[m] = preventTop && this.monitors[0] == m ? Pos.BOTTOM : position);
+        monitors.forEach(m => (panelPositionsSettings[m] = preventTop && this.monitors[0] === m ? Pos.BOTTOM : position));
 
         this._settings.set_string('panel-positions', JSON.stringify(panelPositionsSettings));
     },
@@ -266,7 +258,7 @@ const Settings = new Lang.Class({
 
         let labels = {};
         let panelPosition = this._getPanelPosition(monitorIndex);
-        let isVertical = panelPosition == Pos.LEFT || panelPosition == Pos.RIGHT;
+        let isVertical = panelPosition === Pos.LEFT || panelPosition === Pos.RIGHT;
         let panelElementPositionsSettings = Pos.getSettingsPositions(this._settings, 'panel-element-positions');
         let panelElementPositions = panelElementPositionsSettings[monitorIndex] || Pos.defaults;
         let updateElementsSettings = () => {
@@ -281,7 +273,7 @@ const Settings = new Lang.Class({
                     position: c.positionCombo.get_active_id(),
                 });
             });
-            monitors.forEach(m => panelElementPositionsSettings[m] = newPanelElementPositions);
+            monitors.forEach(m => (panelElementPositionsSettings[m] = newPanelElementPositions));
             this._settings.set_string('panel-element-positions', JSON.stringify(panelElementPositionsSettings));
         };
 
@@ -311,7 +303,7 @@ const Settings = new Lang.Class({
             let upDownClickHandler = limit => {
                 let index = row.get_index();
 
-                if (index != limit) {
+                if (index !== limit) {
                     taskbarListBox.remove(row);
                     taskbarListBox.insert(row, index + (!limit ? -1 : 1));
                     updateElementsSettings();
@@ -379,7 +371,8 @@ const Settings = new Lang.Class({
         let fileChooser = this._builder.get_object('show_applications_icon_file_filebutton');
         let fileImage = this._builder.get_object('show_applications_current_icon_image');
         let fileFilter = new Gtk.FileFilter();
-        let handleIconChange = function (newIconPath) {
+
+        let handleIconChange = function (newIconPath) { // eslint-disable-line func-style
             if (newIconPath && GLib.file_test(newIconPath, GLib.FileTest.EXISTS)) {
                 let file = Gio.File.new_for_path(newIconPath);
                 let pixbuf = GdkPixbuf.Pixbuf.new_from_stream_at_scale(file.read(null), 32, 32, true, null);
@@ -393,7 +386,7 @@ const Settings = new Lang.Class({
                 fileChooser.set_current_folder(GLib.get_user_special_dir(GLib.UserDirectory.DIRECTORY_PICTURES));
             }
 
-            this._settings.set_string('show-apps-icon-file', newIconPath || '');
+            this._settings.set_string('show-apps-icon-file', newIconPath || ''); // eslint-disable-line no-invalid-this
         };
 
         fileFilter.add_pixbuf_formats();
@@ -402,8 +395,8 @@ const Settings = new Lang.Class({
         fileChooser.connect('file-set', widget => handleIconChange.call(this, widget.get_filename()));
         handleIconChange.call(this, this._settings.get_string('show-apps-icon-file'));
 
-        dialog.connect('response', Lang.bind(this, function (dialog, id) {
-            if (id == 1) {
+        dialog.connect('response', (dlog, id) => {
+            if (id === 1) {
                 // restore default settings
                 this._settings.set_value('show-apps-icon-side-padding', this._settings.get_default_value('show-apps-icon-side-padding'));
                 this._builder.get_object('show_applications_side_padding_spinbutton').set_value(this._settings.get_int('show-apps-icon-side-padding'));
@@ -411,11 +404,11 @@ const Settings = new Lang.Class({
                 handleIconChange.call(this, null);
             } else {
                 // remove the settings box so it doesn't get destroyed;
-                dialog.get_content_area().remove(box);
-                dialog.destroy();
+                dlog.get_content_area().remove(box);
+                dlog.destroy();
             }
 
-        }));
+        });
 
         dialog.show_all();
     },
@@ -434,22 +427,22 @@ const Settings = new Lang.Class({
         dialog.get_content_area().add(box);
 
         this._builder.get_object('show_showdesktop_width_spinbutton').set_value(this._settings.get_int('showdesktop-button-width'));
-        this._builder.get_object('show_showdesktop_width_spinbutton').connect('value-changed', Lang.bind(this, function (widget) {
+        this._builder.get_object('show_showdesktop_width_spinbutton').connect('value-changed', widget => {
             this._settings.set_int('showdesktop-button-width', widget.get_value());
-        }));
+        });
 
         this._builder.get_object('show_showdesktop_delay_spinbutton').set_value(this._settings.get_int('show-showdesktop-delay'));
-        this._builder.get_object('show_showdesktop_delay_spinbutton').connect('value-changed', Lang.bind(this, function (widget) {
+        this._builder.get_object('show_showdesktop_delay_spinbutton').connect('value-changed', widget => {
             this._settings.set_int('show-showdesktop-delay', widget.get_value());
-        }));
+        });
 
         this._builder.get_object('show_showdesktop_time_spinbutton').set_value(this._settings.get_int('show-showdesktop-time'));
-        this._builder.get_object('show_showdesktop_time_spinbutton').connect('value-changed', Lang.bind(this, function (widget) {
+        this._builder.get_object('show_showdesktop_time_spinbutton').connect('value-changed', widget => {
             this._settings.set_int('show-showdesktop-time', widget.get_value());
-        }));
+        });
 
-        dialog.connect('response', Lang.bind(this, function (dialog, id) {
-            if (id == 1) {
+        dialog.connect('response', (dlog, id) => {
+            if (id === 1) {
                 // restore default settings
                 this._settings.set_value('showdesktop-button-width', this._settings.get_default_value('showdesktop-button-width'));
                 this._builder.get_object('show_showdesktop_width_spinbutton').set_value(this._settings.get_int('showdesktop-button-width'));
@@ -463,33 +456,33 @@ const Settings = new Lang.Class({
                 this._builder.get_object('show_showdesktop_time_spinbutton').set_value(this._settings.get_int('show-showdesktop-time'));
             } else {
                 // remove the settings box so it doesn't get destroyed;
-                dialog.get_content_area().remove(box);
-                dialog.destroy();
+                dlog.get_content_area().remove(box);
+                dlog.destroy();
             }
 
-        }));
+        });
 
         dialog.show_all();
     },
 
     _bindSettings() {
         // size options
-        let panel_size_scale = this._builder.get_object('panel_size_scale');
-        panel_size_scale.set_range(DEFAULT_PANEL_SIZES[DEFAULT_PANEL_SIZES.length - 1], DEFAULT_PANEL_SIZES[0]);
-        panel_size_scale.set_value(this._settings.get_int('panel-size'));
+        let panelSizeScale = this._builder.get_object('panel_size_scale');
+        panelSizeScale.set_range(DEFAULT_PANEL_SIZES[DEFAULT_PANEL_SIZES.length - 1], DEFAULT_PANEL_SIZES[0]);
+        panelSizeScale.set_value(this._settings.get_int('panel-size'));
         DEFAULT_PANEL_SIZES.slice(1, -1).forEach(val => {
-            panel_size_scale.add_mark(val, Gtk.PositionType.TOP, val.toString());
+            panelSizeScale.add_mark(val, Gtk.PositionType.TOP, val.toString());
         });
 
         // Corrent for rtl languages
         if (this._rtl) {
             // Flip value position: this is not done automatically
-            panel_size_scale.set_value_pos(Gtk.PositionType.LEFT);
+            panelSizeScale.set_value_pos(Gtk.PositionType.LEFT);
             // I suppose due to a bug, having a more than one mark and one above a value of 100
             // makes the rendering of the marks wrong in rtl. This doesn't happen setting the scale as not flippable
             // and then manually inverting it
-            panel_size_scale.set_flippable(false);
-            panel_size_scale.set_inverted(true);
+            panelSizeScale.set_flippable(false);
+            panelSizeScale.set_inverted(true);
         }
 
         // Dots Position option
@@ -511,58 +504,58 @@ const Settings = new Lang.Class({
         }
 
         this._builder.get_object('dot_style_focused_combo').set_active_id(this._settings.get_string('dot-style-focused'));
-        this._builder.get_object('dot_style_focused_combo').connect('changed', Lang.bind(this, function (widget) {
+        this._builder.get_object('dot_style_focused_combo').connect('changed', widget => {
             this._settings.set_string('dot-style-focused', widget.get_active_id());
-        }));
+        });
 
         this._builder.get_object('dot_style_unfocused_combo').set_active_id(this._settings.get_string('dot-style-unfocused'));
-        this._builder.get_object('dot_style_unfocused_combo').connect('changed', Lang.bind(this, function (widget) {
+        this._builder.get_object('dot_style_unfocused_combo').connect('changed', widget => {
             this._settings.set_string('dot-style-unfocused', widget.get_active_id());
-        }));
+        });
 
         for (let i = 1; i <= MAX_WINDOW_INDICATOR; i++) {
             let idx = i;
-            this._builder.get_object(`dot_color_${idx}_colorbutton`).connect('notify::color', Lang.bind(this, function (button) {
+            this._builder.get_object(`dot_color_${idx}_colorbutton`).connect('notify::color', button => {
                 let rgba = button.get_rgba();
                 let css = rgba.to_string();
                 let hexString = cssHexString(css);
                 this._settings.set_string(`dot-color-${idx}`, hexString);
-            }));
+            });
 
-            this._builder.get_object(`dot_color_unfocused_${idx}_colorbutton`).connect('notify::color', Lang.bind(this, function (button) {
+            this._builder.get_object(`dot_color_unfocused_${idx}_colorbutton`).connect('notify::color', button => {
                 let rgba = button.get_rgba();
                 let css = rgba.to_string();
                 let hexString = cssHexString(css);
                 this._settings.set_string(`dot-color-unfocused-${idx}`, hexString);
-            }));
+            });
         }
 
-        this._builder.get_object('dot_color_apply_all_button').connect('clicked', Lang.bind(this, function () {
+        this._builder.get_object('dot_color_apply_all_button').connect('clicked', () => {
             for (let i = 2; i <= MAX_WINDOW_INDICATOR; i++) {
                 this._settings.set_value(`dot-color-${i}`, this._settings.get_value('dot-color-1'));
                 let rgba = new Gdk.RGBA();
                 rgba.parse(this._settings.get_string(`dot-color-${i}`));
                 this._builder.get_object(`dot_color_${i}_colorbutton`).set_rgba(rgba);
             }
-        }));
+        });
 
-        this._builder.get_object('dot_color_unfocused_apply_all_button').connect('clicked', Lang.bind(this, function () {
+        this._builder.get_object('dot_color_unfocused_apply_all_button').connect('clicked', () => {
             for (let i = 2; i <= MAX_WINDOW_INDICATOR; i++) {
                 this._settings.set_value(`dot-color-unfocused-${i}`, this._settings.get_value('dot-color-unfocused-1'));
                 let rgba = new Gdk.RGBA();
                 rgba.parse(this._settings.get_string(`dot-color-unfocused-${i}`));
                 this._builder.get_object(`dot_color_unfocused_${i}_colorbutton`).set_rgba(rgba);
             }
-        }));
+        });
 
-        this._builder.get_object('focus_highlight_color_colorbutton').connect('notify::color', Lang.bind(this, function (button) {
+        this._builder.get_object('focus_highlight_color_colorbutton').connect('notify::color', button => {
             let rgba = button.get_rgba();
             let css = rgba.to_string();
             let hexString = cssHexString(css);
             this._settings.set_string('focus-highlight-color', hexString);
-        }));
+        });
 
-        this._builder.get_object('dot_style_options_button').connect('clicked', Lang.bind(this, function () {
+        this._builder.get_object('dot_style_options_button').connect('clicked', () => {
 
             let dialog = new Gtk.Dialog({ title: _('Running Indicator Options'),
                 transient_for: this.widget.get_toplevel(),
@@ -587,14 +580,14 @@ const Settings = new Lang.Class({
                 Gio.SettingsBindFlags.DEFAULT);
 
             // when either becomes active, turn the other off
-            this._builder.get_object('dot_color_dominant_switch').connect('state-set', Lang.bind(this, function (widget) {
+            this._builder.get_object('dot_color_dominant_switch').connect('state-set', widget => {
                 if (widget.get_active())
                     this._settings.set_boolean('dot-color-override', false);
-            }));
-            this._builder.get_object('dot_color_override_switch').connect('state-set', Lang.bind(this, function (widget) {
+            });
+            this._builder.get_object('dot_color_override_switch').connect('state-set', widget => {
                 if (widget.get_active())
                     this._settings.set_boolean('dot-color-dominant', false);
-            }));
+            });
 
             this._settings.bind('dot-color-unfocused-different',
                 this._builder.get_object('dot_color_unfocused_different_switch'),
@@ -659,17 +652,17 @@ const Settings = new Lang.Class({
             }).apply(this);
 
             this._builder.get_object('focus_highlight_opacity_spinbutton').set_value(this._settings.get_int('focus-highlight-opacity'));
-            this._builder.get_object('focus_highlight_opacity_spinbutton').connect('value-changed', Lang.bind(this, function (widget) {
+            this._builder.get_object('focus_highlight_opacity_spinbutton').connect('value-changed', widget => {
                 this._settings.set_int('focus-highlight-opacity', widget.get_value());
-            }));
+            });
 
             this._builder.get_object('dot_size_spinbutton').set_value(this._settings.get_int('dot-size'));
-            this._builder.get_object('dot_size_spinbutton').connect('value-changed', Lang.bind(this, function (widget) {
+            this._builder.get_object('dot_size_spinbutton').connect('value-changed', widget => {
                 this._settings.set_int('dot-size', widget.get_value());
-            }));
+            });
 
-            dialog.connect('response', Lang.bind(this, function (dialog, id) {
-                if (id == 1) {
+            dialog.connect('response', (dlog, id) => {
+                if (id === 1) {
                     // restore default settings
                     this._settings.set_value('dot-color-dominant', this._settings.get_default_value('dot-color-dominant'));
                     this._settings.set_value('dot-color-override', this._settings.get_default_value('dot-color-override'));
@@ -703,15 +696,15 @@ const Settings = new Lang.Class({
 
                 } else {
                     // remove the settings box so it doesn't get destroyed;
-                    dialog.get_content_area().remove(box);
-                    dialog.destroy();
+                    dlog.get_content_area().remove(box);
+                    dlog.destroy();
                 }
 
-            }));
+            });
 
             dialog.show_all();
 
-        }));
+        });
 
         // multi-monitor
         this.monitors = this._settings.get_value('available-monitors').deep_unpack();
@@ -731,11 +724,9 @@ const Settings = new Lang.Class({
             // the primary index is the first one in the "available-monitors" setting
             let label = !i ? _('Primary monitor') : _('Monitor ') + (i + 1);
 
-            this._builder.get_object('multimon_primary_combo').append_text(label);
             this._builder.get_object('taskbar_position_monitor_combo').append_text(label);
         }
 
-        this._builder.get_object('multimon_primary_combo').set_active(dtpPrimaryMonitorIndex);
         this._builder.get_object('taskbar_position_monitor_combo').set_active(dtpPrimaryMonitorIndex);
 
         this._settings.bind('panel-element-positions-monitors-sync',
@@ -750,14 +741,10 @@ const Settings = new Lang.Class({
 
         this._settings.connect('changed::panel-element-positions-monitors-sync', () => this._maybeDisableTopPosition());
 
-        this._builder.get_object('multimon_primary_combo').connect('changed', Lang.bind(this, function (widget) {
-            this._settings.set_int('primary-monitor', this.monitors[widget.get_active()]);
-        }));
-
-        this._builder.get_object('taskbar_position_monitor_combo').connect('changed', Lang.bind(this, function (widget) {
+        this._builder.get_object('taskbar_position_monitor_combo').connect('changed', widget => {
             this._currentMonitorIndex = this.monitors[widget.get_active()];
             this._displayPanelPositionsForMonitor(this._currentMonitorIndex);
-        }));
+        });
 
         // panel positions
         this._displayPanelPositionsForMonitor(this._currentMonitorIndex);
@@ -786,12 +773,12 @@ const Settings = new Lang.Class({
         rgba.parse(this._settings.get_string('trans-bg-color'));
         this._builder.get_object('trans_bg_color_colorbutton').set_rgba(rgba);
 
-        this._builder.get_object('trans_bg_color_colorbutton').connect('notify::color', Lang.bind(this, function (button) {
-            let rgba = button.get_rgba();
-            let css = rgba.to_string();
+        this._builder.get_object('trans_bg_color_colorbutton').connect('notify::color', button => {
+            let buttonrgba = button.get_rgba();
+            let css = buttonrgba.to_string();
             let hexString = cssHexString(css);
             this._settings.set_string('trans-bg-color', hexString);
-        }));
+        });
 
         this._settings.bind('trans-use-custom-opacity',
             this._builder.get_object('trans_opacity_override_switch'),
@@ -809,9 +796,9 @@ const Settings = new Lang.Class({
         });
 
         this._builder.get_object('trans_opacity_spinbutton').set_value(this._settings.get_double('trans-panel-opacity') * 100);
-        this._builder.get_object('trans_opacity_spinbutton').connect('value-changed', Lang.bind(this, function (widget) {
+        this._builder.get_object('trans_opacity_spinbutton').connect('value-changed', widget => {
             this._settings.set_double('trans-panel-opacity', widget.get_value() * 0.01);
-        }));
+        });
 
         this._settings.bind('trans-use-dynamic-opacity',
             this._builder.get_object('trans_dyn_switch'),
@@ -841,49 +828,49 @@ const Settings = new Lang.Class({
         rgba.parse(this._settings.get_string('trans-gradient-top-color'));
         this._builder.get_object('trans_gradient_color1_colorbutton').set_rgba(rgba);
 
-        this._builder.get_object('trans_gradient_color1_colorbutton').connect('notify::color', Lang.bind(this, function (button) {
-            let rgba = button.get_rgba();
-            let css = rgba.to_string();
+        this._builder.get_object('trans_gradient_color1_colorbutton').connect('notify::color', button => {
+            let buttonrgba = button.get_rgba();
+            let css = buttonrgba.to_string();
             let hexString = cssHexString(css);
             this._settings.set_string('trans-gradient-top-color', hexString);
-        }));
+        });
 
         this._builder.get_object('trans_gradient_color1_spinbutton').set_value(this._settings.get_double('trans-gradient-top-opacity') * 100);
-        this._builder.get_object('trans_gradient_color1_spinbutton').connect('value-changed', Lang.bind(this, function (widget) {
+        this._builder.get_object('trans_gradient_color1_spinbutton').connect('value-changed', widget => {
             this._settings.set_double('trans-gradient-top-opacity', widget.get_value() * 0.01);
-        }));
+        });
 
         rgba.parse(this._settings.get_string('trans-gradient-bottom-color'));
         this._builder.get_object('trans_gradient_color2_colorbutton').set_rgba(rgba);
 
-        this._builder.get_object('trans_gradient_color2_colorbutton').connect('notify::color', Lang.bind(this, function (button) {
-            let rgba = button.get_rgba();
-            let css = rgba.to_string();
+        this._builder.get_object('trans_gradient_color2_colorbutton').connect('notify::color', button => {
+            let buttonrgba = button.get_rgba();
+            let css = buttonrgba.to_string();
             let hexString = cssHexString(css);
             this._settings.set_string('trans-gradient-bottom-color', hexString);
-        }));
+        });
 
         this._builder.get_object('trans_gradient_color2_spinbutton').set_value(this._settings.get_double('trans-gradient-bottom-opacity') * 100);
-        this._builder.get_object('trans_gradient_color2_spinbutton').connect('value-changed', Lang.bind(this, function (widget) {
+        this._builder.get_object('trans_gradient_color2_spinbutton').connect('value-changed', widget => {
             this._settings.set_double('trans-gradient-bottom-opacity', widget.get_value() * 0.01);
-        }));
+        });
 
         this._builder.get_object('trans_options_distance_spinbutton').set_value(this._settings.get_int('trans-dynamic-distance'));
-        this._builder.get_object('trans_options_distance_spinbutton').connect('value-changed', Lang.bind(this, function (widget) {
+        this._builder.get_object('trans_options_distance_spinbutton').connect('value-changed', widget => {
             this._settings.set_int('trans-dynamic-distance', widget.get_value());
-        }));
+        });
 
         this._builder.get_object('trans_options_min_opacity_spinbutton').set_value(this._settings.get_double('trans-dynamic-anim-target') * 100);
-        this._builder.get_object('trans_options_min_opacity_spinbutton').connect('value-changed', Lang.bind(this, function (widget) {
+        this._builder.get_object('trans_options_min_opacity_spinbutton').connect('value-changed', widget => {
             this._settings.set_double('trans-dynamic-anim-target', widget.get_value() * 0.01);
-        }));
+        });
 
         this._builder.get_object('trans_options_anim_time_spinbutton').set_value(this._settings.get_int('trans-dynamic-anim-time'));
-        this._builder.get_object('trans_options_anim_time_spinbutton').connect('value-changed', Lang.bind(this, function (widget) {
+        this._builder.get_object('trans_options_anim_time_spinbutton').connect('value-changed', widget => {
             this._settings.set_int('trans-dynamic-anim-time', widget.get_value());
-        }));
+        });
 
-        this._builder.get_object('trans_dyn_options_button').connect('clicked', Lang.bind(this, function () {
+        this._builder.get_object('trans_dyn_options_button').connect('clicked', () => {
             let dialog = new Gtk.Dialog({ title: _('Dynamic opacity options'),
                 transient_for: this.widget.get_toplevel(),
                 use_header_bar: true,
@@ -896,8 +883,8 @@ const Settings = new Lang.Class({
             let box = this._builder.get_object('box_dynamic_opacity_options');
             dialog.get_content_area().add(box);
 
-            dialog.connect('response', Lang.bind(this, function (dialog, id) {
-                if (id == 1) {
+            dialog.connect('response', (dlog, id) => {
+                if (id === 1) {
                     // restore default settings
                     this._settings.set_value('trans-dynamic-behavior', this._settings.get_default_value('trans-dynamic-behavior'));
 
@@ -911,15 +898,15 @@ const Settings = new Lang.Class({
                     this._builder.get_object('trans_options_anim_time_spinbutton').set_value(this._settings.get_int('trans-dynamic-anim-time'));
                 } else {
                     // remove the settings box so it doesn't get destroyed;
-                    dialog.get_content_area().remove(box);
-                    dialog.destroy();
+                    dlog.get_content_area().remove(box);
+                    dlog.destroy();
                 }
 
-            }));
+            });
 
             dialog.show_all();
 
-        }));
+        });
 
         this._settings.bind('desktop-line-use-custom-color',
             this._builder.get_object('override_show_desktop_line_color_switch'),
@@ -933,11 +920,11 @@ const Settings = new Lang.Class({
 
         rgba.parse(this._settings.get_string('desktop-line-custom-color'));
         this._builder.get_object('override_show_desktop_line_color_colorbutton').set_rgba(rgba);
-        this._builder.get_object('override_show_desktop_line_color_colorbutton').connect('notify::color', Lang.bind(this, function (button) {
-            let rgba = button.get_rgba();
-            let css = rgba.to_string();
+        this._builder.get_object('override_show_desktop_line_color_colorbutton').connect('notify::color', button => {
+            let buttonrgba = button.get_rgba();
+            let css = buttonrgba.to_string();
             this._settings.set_string('desktop-line-custom-color', css);
-        }));
+        });
 
 
         this._settings.bind('intellihide',
@@ -996,14 +983,14 @@ const Settings = new Lang.Class({
         });
 
         this._builder.get_object('intellihide_pressure_threshold_spinbutton').set_value(this._settings.get_int('intellihide-pressure-threshold'));
-        this._builder.get_object('intellihide_pressure_threshold_spinbutton').connect('value-changed', Lang.bind(this, function (widget) {
+        this._builder.get_object('intellihide_pressure_threshold_spinbutton').connect('value-changed', widget => {
             this._settings.set_int('intellihide-pressure-threshold', widget.get_value());
-        }));
+        });
 
         this._builder.get_object('intellihide_pressure_time_spinbutton').set_value(this._settings.get_int('intellihide-pressure-time'));
-        this._builder.get_object('intellihide_pressure_time_spinbutton').connect('value-changed', Lang.bind(this, function (widget) {
+        this._builder.get_object('intellihide_pressure_time_spinbutton').connect('value-changed', widget => {
             this._settings.set_int('intellihide-pressure-time', widget.get_value());
-        }));
+        });
 
         this._settings.bind('intellihide-key-toggle-text',
             this._builder.get_object('intellihide_toggle_entry'),
@@ -1012,21 +999,21 @@ const Settings = new Lang.Class({
         this._settings.connect('changed::intellihide-key-toggle-text', () => setShortcut(this._settings, 'intellihide-key-toggle'));
 
         this._builder.get_object('intellihide_animation_time_spinbutton').set_value(this._settings.get_int('intellihide-animation-time'));
-        this._builder.get_object('intellihide_animation_time_spinbutton').connect('value-changed', Lang.bind(this, function (widget) {
+        this._builder.get_object('intellihide_animation_time_spinbutton').connect('value-changed', widget => {
             this._settings.set_int('intellihide-animation-time', widget.get_value());
-        }));
+        });
 
         this._builder.get_object('intellihide_close_delay_spinbutton').set_value(this._settings.get_int('intellihide-close-delay'));
-        this._builder.get_object('intellihide_close_delay_spinbutton').connect('value-changed', Lang.bind(this, function (widget) {
+        this._builder.get_object('intellihide_close_delay_spinbutton').connect('value-changed', widget => {
             this._settings.set_int('intellihide-close-delay', widget.get_value());
-        }));
+        });
 
         this._builder.get_object('intellihide_enable_start_delay_spinbutton').set_value(this._settings.get_int('intellihide-enable-start-delay'));
-        this._builder.get_object('intellihide_enable_start_delay_spinbutton').connect('value-changed', Lang.bind(this, function (widget) {
+        this._builder.get_object('intellihide_enable_start_delay_spinbutton').connect('value-changed', widget => {
             this._settings.set_int('intellihide-enable-start-delay', widget.get_value());
-        }));
+        });
 
-        this._builder.get_object('intellihide_options_button').connect('clicked', Lang.bind(this, function () {
+        this._builder.get_object('intellihide_options_button').connect('clicked', () => {
             let dialog = new Gtk.Dialog({ title: _('Intellihide options'),
                 transient_for: this.widget.get_toplevel(),
                 use_header_bar: true,
@@ -1039,8 +1026,8 @@ const Settings = new Lang.Class({
             let box = this._builder.get_object('box_intellihide_options');
             dialog.get_content_area().add(box);
 
-            dialog.connect('response', Lang.bind(this, function (dialog, id) {
-                if (id == 1) {
+            dialog.connect('response', (dlog, id) => {
+                if (id === 1) {
                     // restore default settings
                     this._settings.set_value('intellihide-hide-from-windows', this._settings.get_default_value('intellihide-hide-from-windows'));
                     this._settings.set_value('intellihide-behaviour', this._settings.get_default_value('intellihide-behaviour'));
@@ -1066,22 +1053,22 @@ const Settings = new Lang.Class({
                     this._builder.get_object('intellihide_enable_start_delay_spinbutton').set_value(this._settings.get_int('intellihide-enable-start-delay'));
                 } else {
                     // remove the settings box so it doesn't get destroyed;
-                    dialog.get_content_area().remove(box);
-                    dialog.destroy();
+                    dlog.get_content_area().remove(box);
+                    dlog.destroy();
                 }
 
-            }));
+            });
 
             dialog.show_all();
 
-        }));
+        });
 
         // Behavior panel
 
         this._builder.get_object('show_applications_side_padding_spinbutton').set_value(this._settings.get_int('show-apps-icon-side-padding'));
-        this._builder.get_object('show_applications_side_padding_spinbutton').connect('value-changed', Lang.bind(this, function (widget) {
+        this._builder.get_object('show_applications_side_padding_spinbutton').connect('value-changed', widget => {
             this._settings.set_int('show-apps-icon-side-padding', widget.get_value());
-        }));
+        });
 
         this._settings.bind('animate-show-apps',
             this._builder.get_object('application_button_animation_switch'),
@@ -1145,14 +1132,14 @@ const Settings = new Lang.Class({
 
         this._setPreviewTitlePosition();
 
-        this._builder.get_object('grid_preview_title_font_color_colorbutton').connect('notify::color', Lang.bind(this, function (button) {
-            let rgba = button.get_rgba();
-            let css = rgba.to_string();
+        this._builder.get_object('grid_preview_title_font_color_colorbutton').connect('notify::color', button => {
+            let buttonrgba = button.get_rgba();
+            let css = buttonrgba.to_string();
             let hexString = cssHexString(css);
             this._settings.set_string('window-preview-title-font-color', hexString);
-        }));
+        });
 
-        this._builder.get_object('show_window_previews_button').connect('clicked', Lang.bind(this, function () {
+        this._builder.get_object('show_window_previews_button').connect('clicked', () => {
 
             let dialog = new Gtk.Dialog({ title: _('Window preview options'),
                 transient_for: this.widget.get_toplevel(),
@@ -1170,9 +1157,9 @@ const Settings = new Lang.Class({
             dialog.get_content_area().add(scrolledWindow);
 
             this._builder.get_object('preview_timeout_spinbutton').set_value(this._settings.get_int('show-window-previews-timeout'));
-            this._builder.get_object('preview_timeout_spinbutton').connect('value-changed', Lang.bind(this, function (widget) {
+            this._builder.get_object('preview_timeout_spinbutton').connect('value-changed', widget => {
                 this._settings.set_int('show-window-previews-timeout', widget.get_value());
-            }));
+            });
 
             this._settings.bind('preview-middle-click-close',
                 this._builder.get_object('preview_middle_click_close_switch'),
@@ -1207,9 +1194,9 @@ const Settings = new Lang.Class({
                 Gio.SettingsBindFlags.DEFAULT);
 
             this._builder.get_object('preview_custom_opacity_spinbutton').set_value(this._settings.get_int('preview-custom-opacity'));
-            this._builder.get_object('preview_custom_opacity_spinbutton').connect('value-changed', Lang.bind(this, function (widget) {
+            this._builder.get_object('preview_custom_opacity_spinbutton').connect('value-changed', widget => {
                 this._settings.set_int('preview-custom-opacity', widget.get_value());
-            }));
+            });
 
             this._settings.bind('peek-mode',
                 this._builder.get_object('peek_mode_switch'),
@@ -1246,14 +1233,14 @@ const Settings = new Lang.Class({
                 Gio.SettingsBindFlags.DEFAULT);
 
             this._builder.get_object('enter_peek_mode_timeout_spinbutton').set_value(this._settings.get_int('enter-peek-mode-timeout'));
-            this._builder.get_object('enter_peek_mode_timeout_spinbutton').connect('value-changed', Lang.bind(this, function (widget) {
+            this._builder.get_object('enter_peek_mode_timeout_spinbutton').connect('value-changed', widget => {
                 this._settings.set_int('enter-peek-mode-timeout', widget.get_value());
-            }));
+            });
 
             this._builder.get_object('leave_timeout_spinbutton').set_value(this._settings.get_int('leave-timeout'));
-            this._builder.get_object('leave_timeout_spinbutton').connect('value-changed', Lang.bind(this, function (widget) {
+            this._builder.get_object('leave_timeout_spinbutton').connect('value-changed', widget => {
                 this._settings.set_int('leave-timeout', widget.get_value());
-            }));
+            });
 
             this._settings.bind('window-preview-hide-immediate-click',
                 this._builder.get_object('preview_immediate_click_button'),
@@ -1261,58 +1248,58 @@ const Settings = new Lang.Class({
                 Gio.SettingsBindFlags.DEFAULT);
 
             this._builder.get_object('animation_time_spinbutton').set_value(this._settings.get_int('window-preview-animation-time'));
-            this._builder.get_object('animation_time_spinbutton').connect('value-changed', Lang.bind(this, function (widget) {
+            this._builder.get_object('animation_time_spinbutton').connect('value-changed', widget => {
                 this._settings.set_int('window-preview-animation-time', widget.get_value());
-            }));
+            });
 
             this._builder.get_object('peek_mode_opacity_spinbutton').set_value(this._settings.get_int('peek-mode-opacity'));
-            this._builder.get_object('peek_mode_opacity_spinbutton').connect('value-changed', Lang.bind(this, function (widget) {
+            this._builder.get_object('peek_mode_opacity_spinbutton').connect('value-changed', widget => {
                 this._settings.set_int('peek-mode-opacity', widget.get_value());
-            }));
+            });
 
             this._builder.get_object('preview_size_spinbutton').set_value(this._settings.get_int('window-preview-size'));
-            this._builder.get_object('preview_size_spinbutton').connect('value-changed', Lang.bind(this, function (widget) {
+            this._builder.get_object('preview_size_spinbutton').connect('value-changed', widget => {
                 this._settings.set_int('window-preview-size', widget.get_value());
-            }));
+            });
 
             this._builder.get_object('preview_aspect_ratio_x_combo').set_active_id(this._settings.get_int('window-preview-aspect-ratio-x').toString());
-            this._builder.get_object('preview_aspect_ratio_x_combo').connect('changed', Lang.bind(this, function (widget) {
+            this._builder.get_object('preview_aspect_ratio_x_combo').connect('changed', widget => {
                 this._settings.set_int('window-preview-aspect-ratio-x', parseInt(widget.get_active_id(), 10));
-            }));
+            });
 
             this._builder.get_object('preview_aspect_ratio_y_combo').set_active_id(this._settings.get_int('window-preview-aspect-ratio-y').toString());
-            this._builder.get_object('preview_aspect_ratio_y_combo').connect('changed', Lang.bind(this, function (widget) {
+            this._builder.get_object('preview_aspect_ratio_y_combo').connect('changed', widget => {
                 this._settings.set_int('window-preview-aspect-ratio-y', parseInt(widget.get_active_id(), 10));
-            }));
+            });
 
             this._builder.get_object('preview_padding_spinbutton').set_value(this._settings.get_int('window-preview-padding'));
-            this._builder.get_object('preview_padding_spinbutton').connect('value-changed', Lang.bind(this, function (widget) {
+            this._builder.get_object('preview_padding_spinbutton').connect('value-changed', widget => {
                 this._settings.set_int('window-preview-padding', widget.get_value());
-            }));
+            });
 
             this._builder.get_object('preview_title_size_spinbutton').set_value(this._settings.get_int('window-preview-title-font-size'));
-            this._builder.get_object('preview_title_size_spinbutton').connect('value-changed', Lang.bind(this, function (widget) {
+            this._builder.get_object('preview_title_size_spinbutton').connect('value-changed', widget => {
                 this._settings.set_int('window-preview-title-font-size', widget.get_value());
-            }));
+            });
 
             this._builder.get_object('preview_custom_icon_size_spinbutton').set_value(this._settings.get_int('window-preview-custom-icon-size'));
-            this._builder.get_object('preview_custom_icon_size_spinbutton').connect('value-changed', Lang.bind(this, function (widget) {
+            this._builder.get_object('preview_custom_icon_size_spinbutton').connect('value-changed', widget => {
                 this._settings.set_int('window-preview-custom-icon-size', widget.get_value());
-            }));
+            });
 
             this._builder.get_object('grid_preview_title_weight_combo').set_active_id(this._settings.get_string('window-preview-title-font-weight'));
-            this._builder.get_object('grid_preview_title_weight_combo').connect('changed', Lang.bind(this, function (widget) {
+            this._builder.get_object('grid_preview_title_weight_combo').connect('changed', widget => {
                 this._settings.set_string('window-preview-title-font-weight', widget.get_active_id());
-            }));
+            });
 
             (function () {
-                let rgba = new Gdk.RGBA();
-                rgba.parse(this._settings.get_string('window-preview-title-font-color'));
-                this._builder.get_object('grid_preview_title_font_color_colorbutton').set_rgba(rgba);
+                let gdkrgba = new Gdk.RGBA();
+                gdkrgba.parse(this._settings.get_string('window-preview-title-font-color'));
+                this._builder.get_object('grid_preview_title_font_color_colorbutton').set_rgba(gdkrgba);
             }).apply(this);
 
-            dialog.connect('response', Lang.bind(this, function (dialog, id) {
-                if (id == 1) {
+            dialog.connect('response', (dlog, id) => {
+                if (id === 1) {
                     // restore default settings
                     this._settings.set_value('show-window-previews-timeout', this._settings.get_default_value('show-window-previews-timeout'));
                     this._builder.get_object('preview_timeout_spinbutton').set_value(this._settings.get_int('show-window-previews-timeout'));
@@ -1369,21 +1356,21 @@ const Settings = new Lang.Class({
                     this._builder.get_object('grid_preview_title_weight_combo').set_active_id(this._settings.get_string('window-preview-title-font-weight'));
 
                     this._settings.set_value('window-preview-title-font-color', this._settings.get_default_value('window-preview-title-font-color'));
-                    let rgba = new Gdk.RGBA();
-                    rgba.parse(this._settings.get_string('window-preview-title-font-color'));
-                    this._builder.get_object('grid_preview_title_font_color_colorbutton').set_rgba(rgba);
+                    let gdkrgba = new Gdk.RGBA();
+                    gdkrgba.parse(this._settings.get_string('window-preview-title-font-color'));
+                    this._builder.get_object('grid_preview_title_font_color_colorbutton').set_rgba(gdkrgba);
 
                 } else {
                     // remove the settings box so it doesn't get destroyed;
-                    dialog.get_content_area().remove(scrolledWindow);
-                    dialog.destroy();
+                    dlog.get_content_area().remove(scrolledWindow);
+                    dlog.destroy();
                 }
 
-            }));
+            });
 
             dialog.show_all();
 
-        }));
+        });
 
         this._settings.bind('isolate-workspaces',
             this._builder.get_object('isolate_workspaces_switch'),
@@ -1410,19 +1397,19 @@ const Settings = new Lang.Class({
             'sensitive',
             Gio.SettingsBindFlags.DEFAULT | Gio.SettingsBindFlags.INVERT_BOOLEAN);
 
-        this._builder.get_object('group_apps_label_font_color_colorbutton').connect('notify::color', Lang.bind(this, function (button) {
-            let rgba = button.get_rgba();
-            let css = rgba.to_string();
+        this._builder.get_object('group_apps_label_font_color_colorbutton').connect('notify::color', button => {
+            let buttonrgba = button.get_rgba();
+            let css = buttonrgba.to_string();
             let hexString = cssHexString(css);
             this._settings.set_string('group-apps-label-font-color', hexString);
-        }));
+        });
 
-        this._builder.get_object('group_apps_label_font_color_minimized_colorbutton').connect('notify::color', Lang.bind(this, function (button) {
-            let rgba = button.get_rgba();
-            let css = rgba.to_string();
+        this._builder.get_object('group_apps_label_font_color_minimized_colorbutton').connect('notify::color', button => {
+            let buttonrgba = button.get_rgba();
+            let css = buttonrgba.to_string();
             let hexString = cssHexString(css);
             this._settings.set_string('group-apps-label-font-color-minimized', hexString);
-        }));
+        });
 
         this._settings.bind('group-apps-use-fixed-width',
             this._builder.get_object('group_apps_use_fixed_width_switch'),
@@ -1439,7 +1426,7 @@ const Settings = new Lang.Class({
             'active',
             Gio.SettingsBindFlags.DEFAULT);
 
-        this._builder.get_object('show_group_apps_options_button').connect('clicked', Lang.bind(this, function () {
+        this._builder.get_object('show_group_apps_options_button').connect('clicked', () => {
             let dialog = new Gtk.Dialog({ title: _('Ungrouped application options'),
                 transient_for: this.widget.get_toplevel(),
                 use_header_bar: true,
@@ -1453,34 +1440,34 @@ const Settings = new Lang.Class({
             dialog.get_content_area().add(box);
 
             this._builder.get_object('group_apps_label_font_size_spinbutton').set_value(this._settings.get_int('group-apps-label-font-size'));
-            this._builder.get_object('group_apps_label_font_size_spinbutton').connect('value-changed', Lang.bind(this, function (widget) {
+            this._builder.get_object('group_apps_label_font_size_spinbutton').connect('value-changed', widget => {
                 this._settings.set_int('group-apps-label-font-size', widget.get_value());
-            }));
+            });
 
             this._builder.get_object('group_apps_label_font_weight_combo').set_active_id(this._settings.get_string('group-apps-label-font-weight'));
-            this._builder.get_object('group_apps_label_font_weight_combo').connect('changed', Lang.bind(this, function (widget) {
+            this._builder.get_object('group_apps_label_font_weight_combo').connect('changed', widget => {
                 this._settings.set_string('group-apps-label-font-weight', widget.get_active_id());
-            }));
+            });
 
             (function () {
-                let rgba = new Gdk.RGBA();
-                rgba.parse(this._settings.get_string('group-apps-label-font-color'));
-                this._builder.get_object('group_apps_label_font_color_colorbutton').set_rgba(rgba);
+                let gdkrgba = new Gdk.RGBA();
+                gdkrgba.parse(this._settings.get_string('group-apps-label-font-color'));
+                this._builder.get_object('group_apps_label_font_color_colorbutton').set_rgba(gdkrgba);
             }).apply(this);
 
             (function () {
-                let rgba = new Gdk.RGBA();
-                rgba.parse(this._settings.get_string('group-apps-label-font-color-minimized'));
-                this._builder.get_object('group_apps_label_font_color_minimized_colorbutton').set_rgba(rgba);
+                let gdkrgba = new Gdk.RGBA();
+                gdkrgba.parse(this._settings.get_string('group-apps-label-font-color-minimized'));
+                this._builder.get_object('group_apps_label_font_color_minimized_colorbutton').set_rgba(gdkrgba);
             }).apply(this);
 
             this._builder.get_object('group_apps_label_max_width_spinbutton').set_value(this._settings.get_int('group-apps-label-max-width'));
-            this._builder.get_object('group_apps_label_max_width_spinbutton').connect('value-changed', Lang.bind(this, function (widget) {
+            this._builder.get_object('group_apps_label_max_width_spinbutton').connect('value-changed', widget => {
                 this._settings.set_int('group-apps-label-max-width', widget.get_value());
-            }));
+            });
 
-            dialog.connect('response', Lang.bind(this, function (dialog, id) {
-                if (id == 1) {
+            dialog.connect('response', (dlog, id) => {
+                if (id === 1) {
                     // restore default settings
                     this._settings.set_value('group-apps-label-font-size', this._settings.get_default_value('group-apps-label-font-size'));
                     this._builder.get_object('group_apps_label_font_size_spinbutton').set_value(this._settings.get_int('group-apps-label-font-size'));
@@ -1489,9 +1476,9 @@ const Settings = new Lang.Class({
                     this._builder.get_object('group_apps_label_font_weight_combo').set_active_id(this._settings.get_string('group-apps-label-font-weight'));
 
                     this._settings.set_value('group-apps-label-font-color', this._settings.get_default_value('group-apps-label-font-color'));
-                    let rgba = new Gdk.RGBA();
-                    rgba.parse(this._settings.get_string('group-apps-label-font-color'));
-                    this._builder.get_object('group_apps_label_font_color_colorbutton').set_rgba(rgba);
+                    let gdkrgba = new Gdk.RGBA();
+                    gdkrgba.parse(this._settings.get_string('group-apps-label-font-color'));
+                    this._builder.get_object('group_apps_label_font_color_colorbutton').set_rgba(gdkrgba);
 
                     this._settings.set_value('group-apps-label-font-color-minimized', this._settings.get_default_value('group-apps-label-font-color-minimized'));
                     let minimizedFontColor = new Gdk.RGBA();
@@ -1506,34 +1493,34 @@ const Settings = new Lang.Class({
                     this._settings.set_value('group-apps-use-launchers', this._settings.get_default_value('group-apps-use-launchers'));
                 } else {
                     // remove the settings box so it doesn't get destroyed;
-                    dialog.get_content_area().remove(box);
-                    dialog.destroy();
+                    dlog.get_content_area().remove(box);
+                    dlog.destroy();
                 }
 
-            }));
+            });
 
             dialog.show_all();
 
-        }));
+        });
 
         this._builder.get_object('click_action_combo').set_active_id(this._settings.get_string('click-action'));
-        this._builder.get_object('click_action_combo').connect('changed', Lang.bind(this, function (widget) {
+        this._builder.get_object('click_action_combo').connect('changed', widget => {
             this._settings.set_string('click-action', widget.get_active_id());
-        }));
+        });
 
-        this._builder.get_object('shift_click_action_combo').connect('changed', Lang.bind(this, function (widget) {
+        this._builder.get_object('shift_click_action_combo').connect('changed', widget => {
             this._settings.set_string('shift-click-action', widget.get_active_id());
-        }));
+        });
 
-        this._builder.get_object('middle_click_action_combo').connect('changed', Lang.bind(this, function (widget) {
+        this._builder.get_object('middle_click_action_combo').connect('changed', widget => {
             this._settings.set_string('middle-click-action', widget.get_active_id());
-        }));
-        this._builder.get_object('shift_middle_click_action_combo').connect('changed', Lang.bind(this, function (widget) {
+        });
+        this._builder.get_object('shift_middle_click_action_combo').connect('changed', widget => {
             this._settings.set_string('shift-middle-click-action', widget.get_active_id());
-        }));
+        });
 
         // Create dialog for middle-click options
-        this._builder.get_object('middle_click_options_button').connect('clicked', Lang.bind(this, function () {
+        this._builder.get_object('middle_click_options_button').connect('clicked', () => {
 
             let dialog = new Gtk.Dialog({ title: _('Customize middle-click behavior'),
                 transient_for: this.widget.get_toplevel(),
@@ -1566,8 +1553,8 @@ const Settings = new Lang.Class({
                 'active-id',
                 Gio.SettingsBindFlags.DEFAULT);
 
-            dialog.connect('response', Lang.bind(this, function (dialog, id) {
-                if (id == 1) {
+            dialog.connect('response', (dlog, id) => {
+                if (id === 1) {
                     // restore default settings for the relevant keys
                     let keys = ['shift-click-action', 'middle-click-action', 'shift-middle-click-action'];
                     keys.forEach(function (val) {
@@ -1578,28 +1565,28 @@ const Settings = new Lang.Class({
                     this._builder.get_object('shift_middle_click_action_combo').set_active_id(this._settings.get_string('shift-middle-click-action'));
                 } else {
                     // remove the settings box so it doesn't get destroyed;
-                    dialog.get_content_area().remove(box);
-                    dialog.destroy();
+                    dlog.get_content_area().remove(box);
+                    dlog.destroy();
                 }
 
-            }));
+            });
 
             dialog.show_all();
 
-        }));
+        });
 
         this._builder.get_object('scroll_panel_combo').set_active_id(this._settings.get_string('scroll-panel-action'));
-        this._builder.get_object('scroll_panel_combo').connect('changed', Lang.bind(this, function (widget) {
+        this._builder.get_object('scroll_panel_combo').connect('changed', widget => {
             this._settings.set_string('scroll-panel-action', widget.get_active_id());
-        }));
+        });
 
         this._builder.get_object('scroll_icon_combo').set_active_id(this._settings.get_string('scroll-icon-action'));
-        this._builder.get_object('scroll_icon_combo').connect('changed', Lang.bind(this, function (widget) {
+        this._builder.get_object('scroll_icon_combo').connect('changed', widget => {
             this._settings.set_string('scroll-icon-action', widget.get_active_id());
-        }));
+        });
 
         // Create dialog for panel scroll options
-        this._builder.get_object('scroll_panel_options_button').connect('clicked', Lang.bind(this, function () {
+        this._builder.get_object('scroll_panel_options_button').connect('clicked', () => {
             let dialog = new Gtk.Dialog({ title: _('Customize panel scroll behavior'),
                 transient_for: this.widget.get_toplevel(),
                 use_header_bar: true,
@@ -1613,17 +1600,17 @@ const Settings = new Lang.Class({
             dialog.get_content_area().add(box);
 
             this._builder.get_object('scroll_panel_options_delay_spinbutton').set_value(this._settings.get_int('scroll-panel-delay'));
-            this._builder.get_object('scroll_panel_options_delay_spinbutton').connect('value-changed', Lang.bind(this, function (widget) {
+            this._builder.get_object('scroll_panel_options_delay_spinbutton').connect('value-changed', widget => {
                 this._settings.set_int('scroll-panel-delay', widget.get_value());
-            }));
+            });
 
             this._settings.bind('scroll-panel-show-ws-popup',
                 this._builder.get_object('scroll_panel_options_show_ws_popup_switch'),
                 'active',
                 Gio.SettingsBindFlags.DEFAULT);
 
-            dialog.connect('response', Lang.bind(this, function (dialog, id) {
-                if (id == 1) {
+            dialog.connect('response', (dlog, id) => {
+                if (id === 1) {
                     // restore default settings
                     this._settings.set_value('scroll-panel-delay', this._settings.get_default_value('scroll-panel-delay'));
                     this._builder.get_object('scroll_panel_options_delay_spinbutton').set_value(this._settings.get_int('scroll-panel-delay'));
@@ -1631,18 +1618,18 @@ const Settings = new Lang.Class({
                     this._settings.set_value('scroll-panel-show-ws-popup', this._settings.get_default_value('scroll-panel-show-ws-popup'));
                 } else {
                     // remove the settings box so it doesn't get destroyed;
-                    dialog.get_content_area().remove(box);
-                    dialog.destroy();
+                    dlog.get_content_area().remove(box);
+                    dlog.destroy();
                 }
 
-            }));
+            });
 
             dialog.show_all();
 
-        }));
+        });
 
         // Create dialog for icon scroll options
-        this._builder.get_object('scroll_icon_options_button').connect('clicked', Lang.bind(this, function () {
+        this._builder.get_object('scroll_icon_options_button').connect('clicked', () => {
             let dialog = new Gtk.Dialog({ title: _('Customize icon scroll behavior'),
                 transient_for: this.widget.get_toplevel(),
                 use_header_bar: true,
@@ -1656,26 +1643,26 @@ const Settings = new Lang.Class({
             dialog.get_content_area().add(box);
 
             this._builder.get_object('scroll_icon_options_delay_spinbutton').set_value(this._settings.get_int('scroll-icon-delay'));
-            this._builder.get_object('scroll_icon_options_delay_spinbutton').connect('value-changed', Lang.bind(this, function (widget) {
+            this._builder.get_object('scroll_icon_options_delay_spinbutton').connect('value-changed', widget => {
                 this._settings.set_int('scroll-icon-delay', widget.get_value());
-            }));
+            });
 
-            dialog.connect('response', Lang.bind(this, function (dialog, id) {
-                if (id == 1) {
+            dialog.connect('response', (dlog, id) => {
+                if (id === 1) {
                     // restore default settings
                     this._settings.set_value('scroll-icon-delay', this._settings.get_default_value('scroll-icon-delay'));
                     this._builder.get_object('scroll_icon_options_delay_spinbutton').set_value(this._settings.get_int('scroll-icon-delay'));
                 } else {
                     // remove the settings box so it doesn't get destroyed;
-                    dialog.get_content_area().remove(box);
-                    dialog.destroy();
+                    dlog.get_content_area().remove(box);
+                    dlog.destroy();
                 }
 
-            }));
+            });
 
             dialog.show_all();
 
-        }));
+        });
 
         this._settings.bind('hot-keys',
             this._builder.get_object('hot_keys_switch'),
@@ -1686,9 +1673,9 @@ const Settings = new Lang.Class({
             'sensitive',
             Gio.SettingsBindFlags.DEFAULT);
 
-        this._builder.get_object('overlay_combo').connect('changed', Lang.bind(this, function (widget) {
+        this._builder.get_object('overlay_combo').connect('changed', widget => {
             this._settings.set_string('hotkeys-overlay-combo', widget.get_active_id());
-        }));
+        });
 
         this._settings.bind('shortcut-previews',
             this._builder.get_object('shortcut_preview_switch'),
@@ -1696,13 +1683,13 @@ const Settings = new Lang.Class({
             Gio.SettingsBindFlags.DEFAULT);
 
         this._builder.get_object('shortcut_num_keys_combo').set_active_id(this._settings.get_string('shortcut-num-keys'));
-        this._builder.get_object('shortcut_num_keys_combo').connect('changed', Lang.bind(this, function (widget) {
+        this._builder.get_object('shortcut_num_keys_combo').connect('changed', widget => {
             this._settings.set_string('shortcut-num-keys', widget.get_active_id());
-        }));
+        });
 
-        this._settings.connect('changed::hotkey-prefix-text', Lang.bind(this, function () {
+        this._settings.connect('changed::hotkey-prefix-text', () => {
             checkHotkeyPrefix(this._settings);
-        }));
+        });
 
         this._builder.get_object('hotkey_prefix_combo').set_active_id(this._settings.get_string('hotkey-prefix-text'));
 
@@ -1726,23 +1713,23 @@ const Settings = new Lang.Class({
             this._builder.get_object('timeout_spinbutton').set_sensitive(false);
 
 
-        this._settings.connect('changed::hotkeys-overlay-combo', Lang.bind(this, function () {
+        this._settings.connect('changed::hotkeys-overlay-combo', () => {
             if (this._settings.get_string('hotkeys-overlay-combo') !== 'TEMPORARILY')
                 this._builder.get_object('timeout_spinbutton').set_sensitive(false);
             else
                 this._builder.get_object('timeout_spinbutton').set_sensitive(true);
-        }));
+        });
 
         this._settings.bind('shortcut-text',
             this._builder.get_object('shortcut_entry'),
             'text',
             Gio.SettingsBindFlags.DEFAULT);
-        this._settings.connect('changed::shortcut-text', Lang.bind(this, function () {
+        this._settings.connect('changed::shortcut-text', () => {
             setShortcut(this._settings, 'shortcut');
-        }));
+        });
 
         // Create dialog for number overlay options
-        this._builder.get_object('overlay_button').connect('clicked', Lang.bind(this, function () {
+        this._builder.get_object('overlay_button').connect('clicked', () => {
 
             let dialog = new Gtk.Dialog({ title: _('Advanced hotkeys options'),
                 transient_for: this.widget.get_toplevel(),
@@ -1756,8 +1743,8 @@ const Settings = new Lang.Class({
             let box = this._builder.get_object('box_overlay_shortcut');
             dialog.get_content_area().add(box);
 
-            dialog.connect('response', Lang.bind(this, function (dialog, id) {
-                if (id == 1) {
+            dialog.connect('response', (dlog, id) => {
+                if (id === 1) {
                     // restore default settings for the relevant keys
                     let keys = ['hotkey-prefix-text', 'shortcut-text', 'hotkeys-overlay-combo', 'overlay-timeout', 'shortcut-previews'];
                     keys.forEach(function (val) {
@@ -1765,18 +1752,18 @@ const Settings = new Lang.Class({
                     }, this);
                 } else {
                     // remove the settings box so it doesn't get destroyed;
-                    dialog.get_content_area().remove(box);
-                    dialog.destroy();
+                    dlog.get_content_area().remove(box);
+                    dlog.destroy();
                 }
 
-            }));
+            });
 
             dialog.show_all();
 
-        }));
+        });
 
         // setup dialog for secondary menu options
-        this._builder.get_object('secondarymenu_options_button').connect('clicked', Lang.bind(this, function () {
+        this._builder.get_object('secondarymenu_options_button').connect('clicked', () => {
 
             let dialog = new Gtk.Dialog({ title: _('Secondary Menu Options'),
                 transient_for: this.widget.get_toplevel(),
@@ -1800,25 +1787,25 @@ const Settings = new Lang.Class({
                 'active',
                 Gio.SettingsBindFlags.DEFAULT);
 
-            dialog.connect('response', Lang.bind(this, function (dialog, id) {
-                if (id == 1) {
+            dialog.connect('response', (dlog, id) => {
+                if (id === 1) {
                     // restore default settings
                     this._settings.set_value('secondarymenu-contains-appmenu', this._settings.get_default_value('secondarymenu-contains-appmenu'));
                     this._settings.set_value('secondarymenu-contains-showdetails', this._settings.get_default_value('secondarymenu-contains-showdetails'));
                 } else {
                     // remove the settings box so it doesn't get destroyed;
-                    dialog.get_content_area().remove(box);
-                    dialog.destroy();
+                    dlog.get_content_area().remove(box);
+                    dlog.destroy();
                 }
 
-            }));
+            });
 
             dialog.show_all();
 
-        }));
+        });
 
         // setup dialog for advanced options
-        this._builder.get_object('button_advanced_options').connect('clicked', Lang.bind(this, function () {
+        this._builder.get_object('button_advanced_options').connect('clicked', () => {
 
             let dialog = new Gtk.Dialog({ title: _('Advanced Options'),
                 transient_for: this.widget.get_toplevel(),
@@ -1832,21 +1819,21 @@ const Settings = new Lang.Class({
             let box = this._builder.get_object('box_advanced_options');
             dialog.get_content_area().add(box);
 
-            dialog.connect('response', Lang.bind(this, (dialog, id) => {
-                if (id == 1) {
+            dialog.connect('response', (dlog, id) => {
+                if (id === 1) {
                     // restore default settings
 
                 } else {
                     // remove the settings box so it doesn't get destroyed;
-                    dialog.get_content_area().remove(box);
-                    dialog.destroy();
+                    dlog.get_content_area().remove(box);
+                    dlog.destroy();
                 }
 
-            }));
+            });
 
             dialog.show_all();
 
-        }));
+        });
 
         // Fine-tune panel
 
@@ -1861,23 +1848,23 @@ const Settings = new Lang.Class({
         ];
 
         for (var idx in sizeScales) {
-            let size_scale = this._builder.get_object(sizeScales[idx].objectName);
+            let sizeScale = this._builder.get_object(sizeScales[idx].objectName);
             let range = sizeScales[idx].range;
-            size_scale.set_range(range[range.length - 1], range[0]);
-            size_scale.set_value(this._settings.get_int(sizeScales[idx].valueName));
+            sizeScale.set_range(range[range.length - 1], range[0]);
+            sizeScale.set_value(this._settings.get_int(sizeScales[idx].valueName));
             range.slice(1, -1).forEach(val => {
-                size_scale.add_mark(val, Gtk.PositionType.TOP, val.toString());
+                sizeScale.add_mark(val, Gtk.PositionType.TOP, val.toString());
             });
 
             // Corrent for rtl languages
             if (this._rtl) {
                 // Flip value position: this is not done automatically
-                size_scale.set_value_pos(Gtk.PositionType.LEFT);
+                sizeScale.set_value_pos(Gtk.PositionType.LEFT);
                 // I suppose due to a bug, having a more than one mark and one above a value of 100
                 // makes the rendering of the marks wrong in rtl. This doesn't happen setting the scale as not flippable
                 // and then manually inverting it
-                size_scale.set_flippable(false);
-                size_scale.set_inverted(true);
+                sizeScale.set_flippable(false);
+                sizeScale.set_inverted(true);
             }
         }
 
@@ -1921,7 +1908,7 @@ const Settings = new Lang.Class({
 
         this._builder.get_object('extension_version').set_label(Me.metadata.version.toString() + (Me.metadata.commit ? ` (${Me.metadata.commit})` : ''));
 
-        this._builder.get_object('importexport_export_button').connect('clicked', widget => {
+        this._builder.get_object('importexport_export_button').connect('clicked', () => {
             this._showFileChooser(
                 _('Export settings'),
                 { action: Gtk.FileChooserAction.SAVE,
@@ -1938,7 +1925,7 @@ const Settings = new Lang.Class({
             );
         });
 
-        this._builder.get_object('importexport_import_button').connect('clicked', widget => {
+        this._builder.get_object('importexport_import_button').connect('clicked', () => {
             this._showFileChooser(
                 _('Import settings'),
                 { action: Gtk.FileChooserAction.OPEN },
@@ -1960,7 +1947,7 @@ const Settings = new Lang.Class({
 
                     let [, , , retCode] = GLib.spawn_command_line_sync(`${GSET} -d ${Me.uuid}`);
 
-                    if (retCode == 0)
+                    if (retCode === 0)
                         GLib.child_watch_add(GLib.PRIORITY_DEFAULT, pid, () => GLib.spawn_command_line_sync(`${GSET} -e ${Me.uuid}`));
 
 
@@ -1973,7 +1960,7 @@ const Settings = new Lang.Class({
 
         updateCheckSwitch.set_sensitive(false);
 
-        this._builder.get_object('updates_check_now_button').connect('clicked', widget => {
+        this._builder.get_object('updates_check_now_button').connect('clicked', () => {
             this._settings.set_boolean('force-check-update', true);
         });
 
@@ -2003,7 +1990,7 @@ const Settings = new Lang.Class({
         dialog.add_button(Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL);
         dialog.add_button(acceptBtn, Gtk.ResponseType.ACCEPT);
 
-        if (dialog.run() == Gtk.ResponseType.ACCEPT) {
+        if (dialog.run() === Gtk.ResponseType.ACCEPT) {
             try {
                 acceptHandler(dialog.get_filename());
             } catch (e) {
@@ -2076,13 +2063,13 @@ const Settings = new Lang.Class({
         panel_size_scale_value_changed_cb(scale) {
             // Avoid settings the size consinuosly
             if (this._panel_size_timeout > 0)
-                Mainloop.source_remove(this._panel_size_timeout);
+                GLib.source_remove(this._panel_size_timeout);
 
-            this._panel_size_timeout = Mainloop.timeout_add(SCALE_UPDATE_TIMEOUT, Lang.bind(this, function () {
+            this._panel_size_timeout = GLib.timeout_add(0, SCALE_UPDATE_TIMEOUT, () => {
                 this._settings.set_int('panel-size', scale.get_value());
                 this._panel_size_timeout = 0;
                 return GLib.SOURCE_REMOVE;
-            }));
+            });
         },
 
         tray_size_scale_format_value_cb(scale, value) {
@@ -2092,13 +2079,13 @@ const Settings = new Lang.Class({
         tray_size_scale_value_changed_cb(scale) {
             // Avoid settings the size consinuosly
             if (this._tray_size_timeout > 0)
-                Mainloop.source_remove(this._tray_size_timeout);
+                GLib.source_remove(this._tray_size_timeout);
 
-            this._tray_size_timeout = Mainloop.timeout_add(SCALE_UPDATE_TIMEOUT, Lang.bind(this, function () {
+            this._tray_size_timeout = GLib.timeout_add(0, SCALE_UPDATE_TIMEOUT, () => {
                 this._settings.set_int('tray-size', scale.get_value());
                 this._tray_size_timeout = 0;
                 return GLib.SOURCE_REMOVE;
-            }));
+            });
         },
 
         leftbox_size_scale_format_value_cb(scale, value) {
@@ -2108,13 +2095,13 @@ const Settings = new Lang.Class({
         leftbox_size_scale_value_changed_cb(scale) {
             // Avoid settings the size consinuosly
             if (this._leftbox_size_timeout > 0)
-                Mainloop.source_remove(this._leftbox_size_timeout);
+                GLib.source_remove(this._leftbox_size_timeout);
 
-            this._leftbox_size_timeout = Mainloop.timeout_add(SCALE_UPDATE_TIMEOUT, Lang.bind(this, function () {
+            this._leftbox_size_timeout = GLib.timeout_add(0, SCALE_UPDATE_TIMEOUT, () => {
                 this._settings.set_int('leftbox-size', scale.get_value());
                 this._leftbox_size_timeout = 0;
                 return GLib.SOURCE_REMOVE;
-            }));
+            });
         },
 
         appicon_margin_scale_format_value_cb(scale, value) {
@@ -2124,13 +2111,13 @@ const Settings = new Lang.Class({
         appicon_margin_scale_value_changed_cb(scale) {
             // Avoid settings the size consinuosly
             if (this._appicon_margin_timeout > 0)
-                Mainloop.source_remove(this._appicon_margin_timeout);
+                GLib.source_remove(this._appicon_margin_timeout);
 
-            this._appicon_margin_timeout = Mainloop.timeout_add(SCALE_UPDATE_TIMEOUT, Lang.bind(this, function () {
+            this._appicon_margin_timeout = GLib.timeout_add(0, SCALE_UPDATE_TIMEOUT, () => {
                 this._settings.set_int('appicon-margin', scale.get_value());
                 this._appicon_margin_timeout = 0;
                 return GLib.SOURCE_REMOVE;
-            }));
+            });
         },
 
         appicon_padding_scale_format_value_cb(scale, value) {
@@ -2140,13 +2127,13 @@ const Settings = new Lang.Class({
         appicon_padding_scale_value_changed_cb(scale) {
             // Avoid settings the size consinuosly
             if (this._appicon_padding_timeout > 0)
-                Mainloop.source_remove(this._appicon_padding_timeout);
+                GLib.source_remove(this._appicon_padding_timeout);
 
-            this._appicon_padding_timeout = Mainloop.timeout_add(SCALE_UPDATE_TIMEOUT, Lang.bind(this, function () {
+            this._appicon_padding_timeout = GLib.timeout_add(0, SCALE_UPDATE_TIMEOUT, () => {
                 this._settings.set_int('appicon-padding', scale.get_value());
                 this._appicon_padding_timeout = 0;
                 return GLib.SOURCE_REMOVE;
-            }));
+            });
         },
 
         tray_padding_scale_format_value_cb(scale, value) {
@@ -2156,13 +2143,13 @@ const Settings = new Lang.Class({
         tray_padding_scale_value_changed_cb(scale) {
             // Avoid settings the size consinuosly
             if (this._tray_padding_timeout > 0)
-                Mainloop.source_remove(this._tray_padding_timeout);
+                GLib.source_remove(this._tray_padding_timeout);
 
-            this._tray_padding_timeout = Mainloop.timeout_add(SCALE_UPDATE_TIMEOUT, Lang.bind(this, function () {
+            this._tray_padding_timeout = GLib.timeout_add(0, SCALE_UPDATE_TIMEOUT, () => {
                 this._settings.set_int('tray-padding', scale.get_value());
                 this._tray_padding_timeout = 0;
                 return GLib.SOURCE_REMOVE;
-            }));
+            });
         },
 
         statusicon_padding_scale_format_value_cb(scale, value) {
@@ -2172,13 +2159,13 @@ const Settings = new Lang.Class({
         statusicon_padding_scale_value_changed_cb(scale) {
             // Avoid settings the size consinuosly
             if (this._statusicon_padding_timeout > 0)
-                Mainloop.source_remove(this._statusicon_padding_timeout);
+                GLib.source_remove(this._statusicon_padding_timeout);
 
-            this._statusicon_padding_timeout = Mainloop.timeout_add(SCALE_UPDATE_TIMEOUT, Lang.bind(this, function () {
+            this._statusicon_padding_timeout = GLib.timeout_add(0, SCALE_UPDATE_TIMEOUT, () => {
                 this._settings.set_int('status-icon-padding', scale.get_value());
                 this._statusicon_padding_timeout = 0;
                 return GLib.SOURCE_REMOVE;
-            }));
+            });
         },
 
         leftbox_padding_scale_format_value_cb(scale, value) {
@@ -2188,22 +2175,22 @@ const Settings = new Lang.Class({
         leftbox_padding_scale_value_changed_cb(scale) {
             // Avoid settings the size consinuosly
             if (this._leftbox_padding_timeout > 0)
-                Mainloop.source_remove(this._leftbox_padding_timeout);
+                GLib.source_remove(this._leftbox_padding_timeout);
 
-            this._leftbox_padding_timeout = Mainloop.timeout_add(SCALE_UPDATE_TIMEOUT, Lang.bind(this, function () {
+            this._leftbox_padding_timeout = GLib.timeout_add(0, SCALE_UPDATE_TIMEOUT, () => {
                 this._settings.set_int('leftbox-padding', scale.get_value());
                 this._leftbox_padding_timeout = 0;
                 return GLib.SOURCE_REMOVE;
-            }));
+            });
         },
     },
 });
 
-function init() {
+function init() { // eslint-disable-line no-unused-vars
     Convenience.initTranslations();
 }
 
-function buildPrefsWidget() {
+function buildPrefsWidget() { // eslint-disable-line no-unused-vars
     let settings = new Settings();
     let widget = settings.widget;
 
