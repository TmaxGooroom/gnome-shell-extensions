From: jiyun_ha <jiyun_ha@tmax.co.kr>
Date: Wed, 28 Apr 2021 10:38:41 +0900
Subject: [feat] tos-hotkey : added grabHelper to altF4 widget

 - forked Gnome Shell modalDialog to add grabHelper to it
 - removed pushModal/popModal functions from modalDialog

[IMS] N/A
---
 extensions/tos-hotkey/modalDialog.js  | 186 ++++++++++++++++++++++++++++++++++
 extensions/tos-hotkey/systemDialog.js |  72 +++++++------
 2 files changed, 220 insertions(+), 38 deletions(-)
 create mode 100644 extensions/tos-hotkey/modalDialog.js

diff --git a/extensions/tos-hotkey/modalDialog.js b/extensions/tos-hotkey/modalDialog.js
new file mode 100644
index 0000000..cd91b5d
--- /dev/null
+++ b/extensions/tos-hotkey/modalDialog.js
@@ -0,0 +1,186 @@
+// Credits:
+// Some code was adapted from the upstream Gnome Shell source code.
+
+const { Atk, Clutter, GObject, Shell, St } = imports.gi;
+
+const Dialog = imports.ui.dialog;
+const Layout = imports.ui.layout;
+const Main = imports.ui.main;
+const Params = imports.misc.params;
+
+const GrabHelper = imports.ui.grabHelper;
+
+var OPEN_AND_CLOSE_TIME = 100;
+var FADE_OUT_DIALOG_TIME = 1000;
+
+var State = {
+    OPENED: 0,
+    CLOSED: 1,
+    OPENING: 2,
+    CLOSING: 3,
+    FADED_OUT: 4,
+};
+
+var ModalDialog = GObject.registerClass({ // eslint-disable-line no-unused-vars
+    Properties: {
+        'state': GObject.ParamSpec.int('state', 'Dialog state', 'state',
+            GObject.ParamFlags.READABLE,
+            Math.min(...Object.values(State)),
+            Math.max(...Object.values(State)),
+            State.CLOSED),
+    },
+    Signals: { 'opened': {}, 'closed': {} },
+}, class ModalDialog extends St.Widget {
+    _init(params) {
+        super._init({ visible: false,
+            x: 0,
+            y: 0,
+            accessible_role: Atk.Role.DIALOG });
+
+        params = Params.parse(params, { shellReactive: false,
+            styleClass: null,
+            actionMode: Shell.ActionMode.SYSTEM_MODAL,
+            shouldFadeIn: true,
+            shouldFadeOut: true,
+            destroyOnClose: true });
+
+        this._state = State.CLOSED;
+        this._actionMode = params.actionMode;
+        this._shellReactive = params.shellReactive;
+        this._shouldFadeIn = params.shouldFadeIn;
+        this._shouldFadeOut = params.shouldFadeOut;
+        this._destroyOnClose = params.destroyOnClose;
+
+        Main.uiGroup.add_actor(this);
+
+        let constraint = new Clutter.BindConstraint({ source: global.stage,
+            coordinate: Clutter.BindCoordinate.ALL });
+        this.add_constraint(constraint);
+
+        this.backgroundStack = new St.Widget({
+            layout_manager: new Clutter.BinLayout(),
+            x_expand: true,
+            y_expand: true,
+        });
+        this._backgroundBin = new St.Bin({ child: this.backgroundStack });
+        this._monitorConstraint = new Layout.MonitorConstraint();
+        this._backgroundBin.add_constraint(this._monitorConstraint);
+        this.add_actor(this._backgroundBin);
+
+        this.dialogLayout = new Dialog.Dialog(this.backgroundStack, params.styleClass);
+        this.contentLayout = this.dialogLayout.contentLayout;
+        this.buttonLayout = this.dialogLayout.buttonLayout;
+
+        global.focus_manager.add_group(this.dialogLayout);
+        this._initialKeyFocus = null;
+        this._initialKeyFocusDestroyId = 0;
+        this._savedKeyFocus = null;
+
+        this._grabHelper = new GrabHelper.GrabHelper(this);
+    }
+
+    get state() {
+        return this._state;
+    }
+
+    _setState(state) {
+        if (this._state === state)
+            return;
+
+        this._state = state;
+        this.notify('state');
+    }
+
+    _fadeOpen(onPrimary) {
+        if (onPrimary)
+            this._monitorConstraint.primary = true;
+        else
+            this._monitorConstraint.index = global.display.get_current_monitor();
+
+        this._setState(State.OPENING);
+
+        this.dialogLayout.opacity = 255;
+        if (this._lightbox)
+            this._lightbox.lightOn();
+        this.opacity = 0;
+        this.show();
+        this.ease({
+            opacity: 255,
+            duration: this._shouldFadeIn ? OPEN_AND_CLOSE_TIME : 0,
+            mode: Clutter.AnimationMode.EASE_OUT_QUAD,
+            onComplete: () => {
+                this._setState(State.OPENED);
+                this.emit('opened');
+            },
+        });
+    }
+
+    open(onPrimary) {
+        if (this.state === State.OPENED || this.state === State.OPENING)
+            return true;
+
+        this._fadeOpen(onPrimary);
+        this._grabHelper.grab({ actor: this,
+            focus: this.buttonLayout.get_children()[0],
+            onUngrab: this.close.bind(this) });
+        return true;
+    }
+
+    _closeComplete() {
+        this._setState(State.CLOSED);
+        this.hide();
+        this.emit('closed');
+
+        if (this._destroyOnClose)
+            this.destroy();
+    }
+
+    close() {
+        if (this.state === State.CLOSED || this.state === State.CLOSING)
+            return;
+
+        if (this._grabHelper._isWithinGrabbedActor(this))
+            this._grabHelper.ungrab();
+
+
+        this._setState(State.CLOSING);
+        this._savedKeyFocus = null;
+
+        if (this._shouldFadeOut) {
+            this.ease({
+                opacity: 0,
+                duration: OPEN_AND_CLOSE_TIME,
+                mode: Clutter.AnimationMode.EASE_OUT_QUAD,
+                onComplete: () => this._closeComplete(),
+            });
+        } else {
+            this._closeComplete();
+        }
+    }
+
+    // This method is like close, but fades the dialog out much slower,
+    // and leaves the lightbox in place. Once in the faded out state,
+    // the dialog can be brought back by an open call, or the lightbox
+    // can be dismissed by a close call.
+    //
+    // The main point of this method is to give some indication to the user
+    // that the dialog response has been acknowledged but will take a few
+    // moments before being processed.
+    // e.g., if a user clicked "Log Out" then the dialog should go away
+    // immediately, but the lightbox should remain until the logout is
+    // complete.
+    _fadeOutDialog() {
+        if (this.state === State.CLOSED || this.state === State.CLOSING)
+            return;
+
+        if (this.state === State.FADED_OUT)
+            return;
+
+        this.dialogLayout.ease({
+            opacity: 0,
+            duration: FADE_OUT_DIALOG_TIME,
+            mode: Clutter.AnimationMode.EASE_OUT_QUAD,
+            onComplete: () => (this.state = State.FADED_OUT),
+        });
+    }
+});
diff --git a/extensions/tos-hotkey/systemDialog.js b/extensions/tos-hotkey/systemDialog.js
index 4077e06..116c2b3 100644
--- a/extensions/tos-hotkey/systemDialog.js
+++ b/extensions/tos-hotkey/systemDialog.js
@@ -2,12 +2,13 @@ const { Atk, Clutter, GObject, Gio, St } = imports.gi;
 
 const _ = imports.gettext.gettext;
 
-const ModalDialog = imports.ui.modalDialog;
+// const ModalDialog = imports.ui.modalDialog;
 
 const SystemActions = imports.misc.systemActions;
 const Params = imports.misc.params;
 
 const Me = imports.misc.extensionUtils.getCurrentExtension();
+const ModalDialog = Me.imports.modalDialog;
 
 const LOGOUT_IMG_FILE_PATH = '/assets/tos_desktop_ic_windowf4_logout.svg';
 const USER_SWITCH_IMAGE_PATH = '/assets/tos_desktop_ic_windowf4_user.svg';
@@ -21,7 +22,6 @@ const SLEEP_LABEL_TEXT = _('잠자기');
 const RESTART_LABEL_TEXT = _('다시 시작');
 const POWEROFF_LABEL_TEXT = _('시스템 종료');
 
-
 var SystemDialogButton = GObject.registerClass(
 class SystemDialogButton extends St.BoxLayout {
     _init(params) {
@@ -42,6 +42,9 @@ class SystemDialogButton extends St.BoxLayout {
             track_hover: params.reactive,
             can_focus: params.can_focus,
             accessible_role: Atk.Role.TOGGLE_BUTTON });
+
+
+
         this._delegate = this;
 
         if (params.handler)
@@ -50,7 +53,6 @@ class SystemDialogButton extends St.BoxLayout {
 
         if (params.systemDialog)
             this._systemDialog = params.systemDialog;
-
     }
 
     vfunc_button_press_event() {
@@ -66,99 +68,93 @@ class SystemDialogButton extends St.BoxLayout {
         this._handler();
 
         return Clutter.EVENT_STOP;
-
     }
-});
 
-function createButton(params, iconName, labelText) {
-    let icon = new St.Icon({ style_class: 'system-dialog-button-image',
-        y_align: Clutter.ActorAlign.CENTER,
-        gicon: Gio.icon_new_for_string(iconName),
-        icon_size: 38 });
-    let label = new St.Label({ style_class: 'system-dialog-button-label',
-        text: labelText,
-        y_align: Clutter.ActorAlign.CENTER });
-    let button = new SystemDialogButton(params);
+    vfunc_key_release_event(event) {
+        if (event.keyval === Clutter.KEY_Return)
+            return this.vfunc_button_release_event();
 
-    button.add_child(icon);
-    button.add_child(label);
 
-    button.vertical = true;
-    return button;
-}
+        return Clutter.EVENT_PROPAGATE;
+    }
+});
 
 var SystemDialog = GObject.registerClass( // eslint-disable-line no-unused-vars
 class SystemDialog extends ModalDialog.ModalDialog {
-// class SystemDialog extends St.Widget {
     _init() {
         super._init({
             styleClass: 'system-dialog',
             destroyOnClose: false,
+            shellReactive: true,
         });
 
-
         let _title = _('원하는 작업을 선택해 주세요.');
         let label = new St.Label({ style_class: 'system-dialog-title',
             text: _title });
 
+
         this.contentLayout.set_style_class_name('system-dialog-content-box');
         this.contentLayout.add_actor(label);
 
         this.systemActions = SystemActions.getDefault();
 
         this.buttonLayout.set_style_class_name('system-dialog-button-container');
+        this._buttons = [];
 
         let iconPath = Me.path + LOGOUT_IMG_FILE_PATH;
-        let button = createButton({
+        let button = this._createButton({
             handler: this.systemActions.activateLogout.bind(this.systemActions),
             systemDialog: this,
         }, iconPath, LOGOUT_LABEL_TEXT);
+        button.add_style_pseudo_class('focus');
         this.buttonLayout.add_child(button);
 
         iconPath = Me.path + USER_SWITCH_IMAGE_PATH;
-        button = createButton({
+        button = this._createButton({
             handler: this.systemActions.activateSwitchUser.bind(this.systemActions),
             systemDialog: this,
         }, iconPath, USER_SWITCH_LABEL_TEXT);
         this.buttonLayout.add_child(button);
 
         iconPath = Me.path + SLEEP_IMAGE_PATH;
-        button = createButton({
+        button = this._createButton({
             handler: this.systemActions.activateSuspend.bind(this.systemActions),
             systemDialog: this,
         }, iconPath, SLEEP_LABEL_TEXT);
         this.buttonLayout.add_child(button);
 
         iconPath = Me.path + RESTART_IMAGE_PATH;
-        button = createButton({
+        button = this._createButton({
             handler: this.systemActions.activateRestart.bind(this.systemActions),
             systemDialog: this,
         }, iconPath, RESTART_LABEL_TEXT);
         this.buttonLayout.add_child(button);
 
         iconPath = Me.path + POWEROFF_IMAGE_PATH;
-        button = createButton({
+        button = this._createButton({
             handler: this.systemActions.activatePowerOff.bind(this.systemActions),
             systemDialog: this,
         }, iconPath, POWEROFF_LABEL_TEXT);
         this.buttonLayout.add_child(button);
     }
 
+    _createButton(params, iconName, labelText) {
+        let icon = new St.Icon({ style_class: 'system-dialog-button-image',
+            y_align: Clutter.ActorAlign.CENTER,
+            gicon: Gio.icon_new_for_string(iconName),
+            icon_size: 38 });
+        let label = new St.Label({ style_class: 'system-dialog-button-label',
+            text: labelText,
+            y_align: Clutter.ActorAlign.CENTER });
+        let button = new SystemDialogButton(params);
 
-    vfunc_key_release_event(event) {
-        if (event.keyval === Clutter.KEY_Escape) {
-            this.close();
-            return Clutter.EVENT_STOP;
-        }
+        button.add_child(icon);
+        button.add_child(label);
 
-        return Clutter.EVENT_PROPAGATE;
-    }
+        button.vertical = true;
 
-    _fadeOpen(onPrimary) {
-        super._fadeOpen(onPrimary);
+        this._buttons.push(button);
 
-        if (this._lightbox)
-            this._lightbox.lightOff();
+        return button;
     }
-
 });
