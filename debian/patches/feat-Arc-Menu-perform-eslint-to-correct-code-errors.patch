From: sohee_yoon <sohee_yoon@tmax.co.kr>
Date: Mon, 5 Apr 2021 18:52:13 +0900
Subject: [feat] Arc Menu : perform eslint to correct code errors

- perform eslint to correct code errors

[IMS] N/A
---
 extensions/arc-menu/controller.js  |  148 +++--
 extensions/arc-menu/menuButton.js  |  293 +++++-----
 extensions/arc-menu/menuWidgets.js | 1087 +++++++++++++++++++-----------------
 3 files changed, 786 insertions(+), 742 deletions(-)

diff --git a/extensions/arc-menu/controller.js b/extensions/arc-menu/controller.js
index c60fd58..b50c6c8 100644
--- a/extensions/arc-menu/controller.js
+++ b/extensions/arc-menu/controller.js
@@ -22,7 +22,7 @@
  */
 const Me = imports.misc.extensionUtils.getCurrentExtension();
 
-const {Gdk, Gio, GLib, Gtk, St} = imports.gi;
+const { Gio, Gtk } = imports.gi;
 const Constants = Me.imports.constants;
 const Gettext = imports.gettext.domain(Me.metadata['gettext-domain']);
 const Helper = Me.imports.helper;
@@ -31,7 +31,7 @@ const MenuButton = Me.imports.menuButton;
 const Utils = Me.imports.utils;
 const _ = Gettext.gettext;
 
-var MenuSettingsController = class {
+var MenuSettingsController = class { // eslint-disable-line no-unused-vars
     constructor(settings, settingsControllers, panel, panelIndex) {
         this._settings = settings;
         this.panel = panel;
@@ -40,13 +40,13 @@ var MenuSettingsController = class {
 
         this.currentMonitorIndex = 0;
         this._activitiesButton = Main.panel.statusArea.activities;
-        this.enableHotkey = panelIndex === 0 ? true : false;
+        this.enableHotkey = panelIndex === 0;
 
         this._menuButton = new MenuButton.MenuButton(settings, panel);
 
-        this._settingsControllers = settingsControllers
-        this._hotCornerManager = new Helper.HotCornerManager(this._settings,() => this.toggleMenus());
-        if(this.enableHotkey){
+        this._settingsControllers = settingsControllers;
+        this._hotCornerManager = new Helper.HotCornerManager(this._settings, () => this.toggleMenus());
+        if (this.enableHotkey) {
             this._menuHotKeybinder = new Helper.MenuHotKeybinder(() => this._onHotkey());
             this._keybindingManager = new Helper.KeybindingManager(this._settings);
         }
@@ -56,7 +56,7 @@ var MenuSettingsController = class {
     // Load and apply the settings from the arc-menu settings
     _applySettings() {
         this._updateHotCornerManager();
-        if(this.enableHotkey)
+        if (this.enableHotkey)
             this._updateHotKeyBinder();
         this._setButtonAppearance();
         this._setButtonText();
@@ -64,60 +64,54 @@ var MenuSettingsController = class {
         this._setButtonIconSize();
         this._setButtonIconPadding();
     }
+
     // Bind the callbacks for handling the settings changes to the event signals
     bindSettingsChanges() {
         this.settingsChangeIds = [
             this._settings.connect('changed::hot-corners', this._updateHotCornerManager.bind(this)),
             this._settings.connect('changed::recently-installed-apps', this._reload.bind(this)),
-            this._settings.connect('changed::pinned-app-list',this._updateFavorites.bind(this)),
+            this._settings.connect('changed::pinned-app-list', this._updateFavorites.bind(this)),
         ];
     }
 
-    _reload(){
+    _reload() {
         this._menuButton.reload();
     }
 
-    updateLocation(){
+    updateLocation() {
         this._menuButton.updateLocation();
     }
 
-    updateIcons(){
+    updateIcons() {
         this._menuButton.updateIcons();
     }
 
-    _setDefaultMenuView(){
+    _setDefaultMenuView() {
         this._menuButton.setDefaultMenuView();
     }
 
-    toggleMenus(){
-        if (Main.overview.visible)
+    toggleMenus() {
+        if (Main.overview.visible) {
             Main.overview.hide();
-        else {
-            if (global.dashToPanel){
-                this.currentMonitor = Main.layoutManager.currentMonitor;
-                //close current menus that are open on monitors other than current monitor
-                if(this._settingsControllers.length > 1){
-                    for (let i = 0; i < this._settingsControllers.length; i++) {
-                        let actor = this._settingsControllers[i]._menuButton.menuButtonWidget.actor;
-                        let monitorForActor = Main.layoutManager.findMonitorForActor(actor);
-                        if(this.currentMonitor == monitorForActor){
-                            this.currentMonitorIndex = i;
-                        }
-                        else{
-                            if(this._settingsControllers[i]._menuButton.arcMenu.isOpen)
-                                this._settingsControllers[i]._menuButton.toggleMenu();
-                        }
-                    }
-                    //open the current monitors menu
-                    this._settingsControllers[this.currentMonitorIndex]._menuButton.toggleMenu();
-                }
-                else{
-                    this._menuButton.toggleMenu();
+        } else if (global.dashToPanel) {
+            this.currentMonitor = Main.layoutManager.currentMonitor;
+            // close current menus that are open on monitors other than current monitor
+            if (this._settingsControllers.length > 1) {
+                for (let i = 0; i < this._settingsControllers.length; i++) {
+                    let actor = this._settingsControllers[i]._menuButton.menuButtonWidget.actor;
+                    let monitorForActor = Main.layoutManager.findMonitorForActor(actor);
+                    if (this.currentMonitor === monitorForActor)
+                        this.currentMonitorIndex = i;
+                    else if (this._settingsControllers[i]._menuButton.arcMenu.isOpen)
+                        this._settingsControllers[i]._menuButton.toggleMenu();
                 }
-            }
-            else {
+                // open the current monitors menu
+                this._settingsControllers[this.currentMonitorIndex]._menuButton.toggleMenu();
+            } else {
                 this._menuButton.toggleMenu();
             }
+        } else {
+            this._menuButton.toggleMenu();
         }
     }
 
@@ -125,11 +119,11 @@ var MenuSettingsController = class {
         this._menuButton.updateStyle();
     }
 
-    _updateMenuHeight(){
+    _updateMenuHeight() {
         this._menuButton.updateHeight();
     }
 
-    _updateFavorites(){
+    _updateFavorites() {
         if (this._menuButton.getShouldLoadFavorites())
             this._menuButton._loadFavorites();
 
@@ -140,18 +134,18 @@ var MenuSettingsController = class {
 
     _updateHotCornerManager() {
         let hotCornerAction = this._settings.get_enum('hot-corners');
-        if (hotCornerAction == Constants.HOT_CORNERS_ACTION.Default) {
+        if (hotCornerAction === Constants.HOT_CORNERS_ACTION.Default)
             this._hotCornerManager.restoreDefaultHotCorners();
-        }
-        else if(hotCornerAction == Constants.HOT_CORNERS_ACTION.Disabled) {
+
+        else if (hotCornerAction === Constants.HOT_CORNERS_ACTION.Disabled)
             this._hotCornerManager.disableHotCorners();
-        }
-        else if(hotCornerAction == Constants.HOT_CORNERS_ACTION.ToggleArcMenu) {
+
+        else if (hotCornerAction === Constants.HOT_CORNERS_ACTION.ToggleArcMenu)
             this._hotCornerManager.modifyHotCorners();
-        }
-        else if(hotCornerAction == Constants.HOT_CORNERS_ACTION.Custom) {
+
+        else if (hotCornerAction === Constants.HOT_CORNERS_ACTION.Custom)
             this._hotCornerManager.modifyHotCorners();
-        }
+
     }
 
     _updateHotKeyBinder() {
@@ -164,49 +158,48 @@ var MenuSettingsController = class {
             this._menuHotKeybinder.disableHotKey();
             this._menuKeyBindingKey = 0;
 
-            if(hotKeyPos === Constants.HOT_KEY.Custom){
+            if (hotKeyPos === Constants.HOT_KEY.Custom) {
                 this._keybindingManager.bind(hotkeySettingsKey, 'menu-keybinding', () => this._onHotkey());
                 menuKeyBinding = this._settings.get_string(hotkeySettingsKey);
-            }
-            else if(hotKeyPos === Constants.HOT_KEY.Super_L || hotKeyPos === Constants.HOT_KEY.Super_R){
+            } else if (hotKeyPos === Constants.HOT_KEY.Super_L || hotKeyPos === Constants.HOT_KEY.Super_R) {
                 let hotKey = Constants.HOT_KEY[hotKeyPos];
                 this._menuHotKeybinder.enableHotKey(hotKey);
                 menuKeyBinding = hotKey;
             }
-            if(menuKeyBinding){
+            if (menuKeyBinding)
                 this._menuKeyBindingKey = Gtk.accelerator_parse(menuKeyBinding)[0];
-            }
+
         }
     }
 
     _onHotkey() {
         let hotKeyPos = this._settings.get_enum('menu-hotkey');
-        if (hotKeyPos === Constants.HOT_KEY.Super_L) {
+        if (hotKeyPos === Constants.HOT_KEY.Super_L)
             this.toggleMenus();
-        }
-        else {
+
+        else
             this._onHotkeyRelease();
-        }
+
     }
 
     _onHotkeyRelease() {
         let activeMenu = this._settingsControllers[this.currentMonitorIndex]._menuButton.getActiveMenu();
         let focusPanel = this.panel;
-        let focusTarget = activeMenu ?
-                          (activeMenu.actor || activeMenu) : focusPanel;
+        let focusTarget = activeMenu
+            ? activeMenu.actor || activeMenu : focusPanel;
 
         this.disconnectKeyRelease();
 
         this.keyInfo = {
-            pressId: focusTarget.connect('key-press-event', _ => this.disconnectKeyRelease()),
+            pressId: focusTarget.connect('key-press-event', () => this.disconnectKeyRelease()),
             releaseId: focusTarget.connect('key-release-event', (actor, event) => {
                 this.disconnectKeyRelease();
 
-                if (this._menuKeyBindingKey == event.get_key_symbol()) {
+                if (this._menuKeyBindingKey === event.get_key_symbol())
                     this.toggleMenus();
-                }
+
             }),
-            target: focusTarget
+            target: focusTarget,
         };
 
         focusTarget.grab_key_focus();
@@ -228,9 +221,11 @@ var MenuSettingsController = class {
             this._setMenuPositionAlignment();
         }
     }
-    _setMenuPositionAlignment(){
+
+    _setMenuPositionAlignment() {
         this._menuButton._setMenuPositionAlignment();
     }
+
     // Change the menu button appearance as specified in the settings
     _setButtonAppearance() {
         let menuButtonWidget = this._menuButton.menuButtonWidget;
@@ -242,6 +237,7 @@ var MenuSettingsController = class {
         menuButtonWidget.showPanelIcon();
         this._setMenuButtonArrow();
     }
+
     _setMenuButtonArrow() {
         let menuButtonWidget = this._menuButton.menuButtonWidget;
         menuButtonWidget.hideArrowIcon();
@@ -270,6 +266,7 @@ var MenuSettingsController = class {
         let stIcon = menuButtonWidget.getPanelIcon();
         stIcon.icon_size = 25;
     }
+
     _setButtonIconPadding() {
         this._menuButton.style = null;
     }
@@ -278,27 +275,28 @@ var MenuSettingsController = class {
     _getMenuPositionTuple() {
         return ['left', 0];
     }
+
     // Check if the activities button is present on the main panel
     _isActivitiesButtonPresent() {
         // Thanks to lestcape @github.com for the refinement of this method.
-        return (this._activitiesButton &&
+        return this._activitiesButton &&
             this._activitiesButton.container &&
-            this.panel._leftBox.contains(this._activitiesButton.container));
+            this.panel._leftBox.contains(this._activitiesButton.container);
     }
 
     // Remove the activities button from the main panel
     _removeActivitiesButtonFromMainPanel() {
-        if (this._isActivitiesButtonPresent()) {
+        if (this._isActivitiesButtonPresent())
             this.panel._leftBox.remove_child(this._activitiesButton.container);
-        }
+
     }
 
     // Add or restore the activities button on the main panel
     _addActivitiesButtonToMainPanel() {
-        if (this.panel == Main.panel && !this._isActivitiesButtonPresent()) {
+        if (this.panel === Main.panel && !this._isActivitiesButtonPresent()) {
             // Retsore the activities button at the default position
             let parent = this._activitiesButton.container.get_parent();
-            if(!parent)
+            if (!parent)
                 this.panel._leftBox.insert_child_at_index(this._activitiesButton.container, 0);
         }
     }
@@ -316,7 +314,7 @@ var MenuSettingsController = class {
     }
 
     // Enable the menu button
-    enableButton(index) {
+    enableButton() {
         this._removeActivitiesButtonFromMainPanel();
         this._addMenuButtonToMainPanel();
         this._menuButton.initiate();
@@ -338,14 +336,14 @@ var MenuSettingsController = class {
         this.settingsChangeIds.forEach(id => this._settings.disconnect(id));
         this._hotCornerManager.destroy();
 
-        if (this.panel == undefined) {
+        if (this.panel === undefined)
             this._menuButton.destroy();
-        }
-        else if (this._isButtonEnabled()) {
+
+        else if (this._isButtonEnabled())
             this._disableButton();
-        }
 
-        if(this.enableHotkey){
+
+        if (this.enableHotkey) {
             this.disconnectKeyRelease();
             this._menuHotKeybinder.destroy();
             this._keybindingManager.destroy();
diff --git a/extensions/arc-menu/menuButton.js b/extensions/arc-menu/menuButton.js
index 20c611d..9f7ca20 100644
--- a/extensions/arc-menu/menuButton.js
+++ b/extensions/arc-menu/menuButton.js
@@ -23,9 +23,8 @@
 
 const Me = imports.misc.extensionUtils.getCurrentExtension();
 
-const {Clutter, GLib, GObject, Shell, St} = imports.gi;
+const { Clutter, GLib, GObject, Shell, St } = imports.gi;
 const appSys = Shell.AppSystem.get_default();
-const Constants = Me.imports.constants;
 const Convenience = Me.imports.convenience;
 const Gettext = imports.gettext.domain(Me.metadata['gettext-domain']);
 const Main = imports.ui.main;
@@ -33,15 +32,12 @@ const MW = Me.imports.menuWidgets;
 const MenuLayout = Me.imports.menuLayout;
 const PanelMenu = imports.ui.panelMenu;
 const PopupMenu = imports.ui.popupMenu;
-const Util = imports.misc.util;
 const Utils = Me.imports.utils;
 const _ = Gettext.gettext;
 
 var DASH_TO_PANEL_UUID = 'dash-to-panel@jderose9.github.com';
-var DASH_TO_DOCK_UUID = 'dash-to-dock@micxgx.gmail.com';
-var UBUNTU_DOCK_UUID = 'ubuntu-dock@ubuntu.com';
 
-var MenuButton = GObject.registerClass(class Arc_Menu_MenuButton extends PanelMenu.Button{
+var MenuButton = GObject.registerClass(class ArcMenuButton extends PanelMenu.Button { // eslint-disable-line no-unused-vars
     _init(settings, panel) {
         super._init(0.5, null, true);
         this._settings = settings;
@@ -54,37 +50,34 @@ var MenuButton = GObject.registerClass(class Arc_Menu_MenuButton extends PanelMe
 
         let menuManagerParent = this._panel;
 
-        //Create Main Menus - ArcMenu and arcMenu's context menu
+        // Create Main Menus - ArcMenu and arcMenu's context menu
         this.arcMenu = new ArcMenu(this, 0.5, St.Side.TOP);
         this.arcMenu.connect('open-state-changed', this._onOpenStateChanged.bind(this));
 
         this.menuManager = new PopupMenu.PopupMenuManager(menuManagerParent);
-        this.menuManager._changeMenu = (menu) => {};
         this.menuManager.addMenu(this.arcMenu);
 
-        //Context Menus for applications and other menu items
+        // Context Menus for applications and other menu items
         this.contextMenuManager = new PopupMenu.PopupMenuManager(this);
-        this.contextMenuManager._changeMenu = (menu) => {};
-        this.contextMenuManager._onMenuSourceEnter = (menu) =>{
-            if (this.contextMenuManager.activeMenu && this.contextMenuManager.activeMenu != menu)
+        this.contextMenuManager._onMenuSourceEnter = menu => {
+            if (this.contextMenuManager.activeMenu && this.contextMenuManager.activeMenu !== menu)
                 return Clutter.EVENT_STOP;
 
             return Clutter.EVENT_PROPAGATE;
-        }
+        };
 
-        //Sub Menu Manager - Control all other popup menus
+        // Sub Menu Manager - Control all other popup menus
         this.subMenuManager = new PopupMenu.PopupMenuManager(this);
-        this.subMenuManager._changeMenu = (menu) => {};
         this.menuButtonWidget = new MW.MenuButtonWidget();
         this.x_expand = false;
         this.y_expand = false;
 
-        //Add Menu Button Widget to Button
+        // Add Menu Button Widget to Button
         this.add_actor(this.menuButtonWidget.actor);
     }
 
-    initiate(){
-        //Dash to Panel Integration
+    initiate() {
+        // Dash to Panel Integration
         this.dashToPanel = Main.extensionManager.lookup(DASH_TO_PANEL_UUID);
         this.extensionChangedId = Main.extensionManager.connect('extension-state-changed', (data, extension) => {
             if (extension.uuid === DASH_TO_PANEL_UUID && extension.state === 1) {
@@ -94,15 +87,15 @@ var MenuButton = GObject.registerClass(class Arc_Menu_MenuButton extends PanelMe
             if (extension.uuid === DASH_TO_PANEL_UUID && extension.state === 2) {
                 this.dashToPanel = null;
                 this.updateArrowSide(St.Side.TOP);
-                if(this.dtpPostionChangedID>0 && this.extensionSettingsItem){
+                if (this.dtpPostionChangedID > 0 && this.extensionSettingsItem) {
                     this.extensionSettingsItem.disconnect(this.dtpPostionChangedID);
                     this.dtpPostionChangedID = 0;
                 }
             }
         });
-        if(this.dashToPanel && this.dashToPanel.stateObj){
+        if (this.dashToPanel && this.dashToPanel.stateObj)
             this.syncWithDashToPanel();
-        }
+
 
         this._iconThemeChangedId = St.TextureCache.get_default().connect('icon-theme-changed', this.reload.bind(this));
         this._monitorsChangedId = Main.layoutManager.connect('monitors-changed', () => {
@@ -110,16 +103,16 @@ var MenuButton = GObject.registerClass(class Arc_Menu_MenuButton extends PanelMe
         });
 
         this._appList = this.listAllApps();
-        //Update Categories on 'installed-changed' event-------------------------------------
+        // Update Categories on 'installed-changed' event-------------------------------------
         this._installedChangedId = appSys.connect('installed-changed', () => {
             this._newAppList = this.listAllApps();
 
-            //Filter to find if a new application has been installed
+            // Filter to find if a new application has been installed
             let newApps = this._newAppList.filter(app => !this._appList.includes(app));
 
-            //A New Application has been installed
-            //Save it in settings
-            if(newApps.length){
+            // A New Application has been installed
+            // Save it in settings
+            if (newApps.length) {
                 let recentApps = this._settings.get_strv('recently-installed-apps');
                 let newRecentApps = [...new Set(recentApps.concat(newApps))];
                 this._settings.set_strv('recently-installed-apps', newRecentApps);
@@ -129,7 +122,7 @@ var MenuButton = GObject.registerClass(class Arc_Menu_MenuButton extends PanelMe
         });
         this._setMenuPositionAlignment();
 
-        //Create Basic Layout
+        // Create Basic Layout
         this.createLayoutID = GLib.timeout_add(0, 100, () => {
             this.createMenuLayout();
             this.createLayoutID = null;
@@ -137,7 +130,8 @@ var MenuButton = GObject.registerClass(class Arc_Menu_MenuButton extends PanelMe
         });
     }
 
-    setDragApp(){
+    /*
+    setDragApp() {
     }
 
     handleDragOver(source, _actor, _x, _y, _time) {
@@ -147,33 +141,40 @@ var MenuButton = GObject.registerClass(class Arc_Menu_MenuButton extends PanelMe
     acceptDrop(source, _actor, _x, _y, _time) {
         return false;
     }
+    */
 
-    syncWithDashToPanel(){
-        this.extensionSettingsItem = Convenience.getDTPSettings('org.gnome.shell.extensions.dash-to-panel', this.dashToPanel);
+    getArrowSide() {
         let monitorIndex = Main.layoutManager.findIndexForActor(this.menuButtonWidget.actor);
         let side = Utils.getDashToPanelPosition(this.extensionSettingsItem, monitorIndex);
-        this.updateArrowSide(side);
-        let dashToPanelPositionSettings = 'panel-positions'
-        try{
+        return side;
+    }
+
+    syncWithDashToPanel() {
+        this.extensionSettingsItem = Convenience.getDTPSettings('org.gnome.shell.extensions.dash-to-panel', this.dashToPanel);
+        //     let monitorIndex = Main.layoutManager.findIndexForActor(this.menuButtonWidget.actor);
+        //     let side = Utils.getDashToPanelPosition(this.extensionSettingsItem, monitorIndex);
+        this.updateArrowSide(this.getArrowSide());
+        let dashToPanelPositionSettings = 'panel-positions';
+        try {
             this.extensionSettingsItem.get_string(dashToPanelPositionSettings);
-        } catch(e){
-            dashToPanelPositionSettings = 'panel-position'
+        } catch (e) {
+            dashToPanelPositionSettings = 'panel-position';
         }
-        this.dtpPostionChangedID = this.extensionSettingsItem.connect('changed::' + dashToPanelPositionSettings, ()=> {
-            let monitorIndex = Main.layoutManager.findIndexForActor(this.menuButtonWidget.actor);
-            let side = Utils.getDashToPanelPosition(this.extensionSettingsItem, monitorIndex);
-            this.updateArrowSide(side);
+        this.dtpPostionChangedID = this.extensionSettingsItem.connect(`changed::${dashToPanelPositionSettings}`, () => {
+            //           let monitorIndex = Main.layoutManager.findIndexForActor(this.menuButtonWidget.actor);
+            //           let side = Utils.getDashToPanelPosition(this.extensionSettingsItem, monitorIndex);
+            this.updateArrowSide(this.getArrowSide());
         });
-        if(global.dashToPanel){
+        if (global.dashToPanel) {
             global.dashToPanel.panels.forEach(p => {
-                if(p.panel === this._panel){
+                if (p.panel === this._panel)
                     this.dtpPanel = p;
-                }
+
             });
         }
     }
 
-    listAllApps(){
+    listAllApps() {
         let appList = appSys.get_installed().filter(appInfo => {
             try {
                 appInfo.get_id(); // catch invalid file encodings
@@ -185,7 +186,7 @@ var MenuButton = GObject.registerClass(class Arc_Menu_MenuButton extends PanelMe
         return appList.map(app => app.get_id());
     }
 
-    createMenuLayout(){
+    createMenuLayout() {
         this.section = new PopupMenu.PopupMenuSection();
         this.arcMenu.addMenuItem(this.section);
         this.mainBox = new St.BoxLayout({
@@ -193,7 +194,7 @@ var MenuButton = GObject.registerClass(class Arc_Menu_MenuButton extends PanelMe
             x_expand: true,
             y_expand: true,
             x_align: Clutter.ActorAlign.FILL,
-            y_align: Clutter.ActorAlign.FILL
+            y_align: Clutter.ActorAlign.FILL,
         });
         this.mainBox._delegate = this.mainBox;
 
@@ -202,9 +203,9 @@ var MenuButton = GObject.registerClass(class Arc_Menu_MenuButton extends PanelMe
         let monitorWorkArea = Main.layoutManager.getWorkAreaForMonitor(monitorIndex);
         let height = Math.round(650 / scaleFactor);
 
-        if(height > monitorWorkArea.height){
-            height = (monitorWorkArea.height * 8) / 10;
-        }
+        if (height > monitorWorkArea.height)
+            height = monitorWorkArea.height * 8 / 10;
+
 
         this.mainBox.style = `height: ${height}px`;
         this.section.actor.add_actor(this.mainBox);
@@ -213,19 +214,17 @@ var MenuButton = GObject.registerClass(class Arc_Menu_MenuButton extends PanelMe
         this.updateStyle();
     }
 
-    _setMenuPositionAlignment(){
-        let arrowAlignment = 0.5;
+    _setMenuPositionAlignment() {
         if (this.dashToPanel && this.dashToPanel.stateObj) {
-          let monitorIndex = Main.layoutManager.findIndexForActor(this.menuButtonWidget.actor);
-          let side = Utils.getDashToPanelPosition(this.extensionSettingsItem, monitorIndex);
-          this.updateArrowSide(side, false);
-        }
-        else {
-          this.updateArrowSide(St.Side.TOP, false);
+            let monitorIndex = Main.layoutManager.findIndexForActor(this.menuButtonWidget.actor);
+            let side = Utils.getDashToPanelPosition(this.extensionSettingsItem, monitorIndex);
+            this.updateArrowSide(side, false);
+        } else {
+            this.updateArrowSide(St.Side.TOP, false);
         }
     }
 
-    updateArrowSide(side, setAlignment = true){
+    updateArrowSide(side, setAlignment = true) {
         let arrowAlignment;
         this.menuButtonWidget.updateArrowIconSide(side);
         if (side === St.Side.RIGHT || side === St.Side.LEFT)
@@ -240,99 +239,100 @@ var MenuButton = GObject.registerClass(class Arc_Menu_MenuButton extends PanelMe
         this.arcMenu._arrowAlignment = arrowAlignment;
         this.arcMenu._boxPointer._border.queue_repaint();
 
-        if(setAlignment)
+        if (setAlignment)
             this._setMenuPositionAlignment();
     }
-    updateStyle(){
+
+    updateStyle() {
         this.arcMenu.actor.style_class = 'popup-menu-boxpointer';
         this.arcMenu.actor.add_style_class_name('popup-menu');
 
-        this.arcMenu.actor.style = "-arrow-base:0px; -arrow-rise:0px; -boxpointer-gap: 0px; -arrow-border-radius: 14px;";
-        this.arcMenu.box.style = "margin:0px; padding: 0px;";
+        this.arcMenu.actor.style = '-arrow-base:0px; -arrow-rise:0px; -boxpointer-gap: 0px; -arrow-border-radius: 14px;';
+        this.arcMenu.box.style = 'margin:0px; padding: 0px;';
 
-        if(this.MenuLayout)
+        if (this.MenuLayout)
             this.MenuLayout.updateStyle();
     }
+
     setSensitive(sensitive) {
         this.reactive = sensitive;
         this.can_focus = sensitive;
         this.track_hover = sensitive;
     }
-    vfunc_event(event){
-        if (event.type() === Clutter.EventType.BUTTON_PRESS){
-            if(event.get_button() == 1){
+
+    vfunc_event(event) {
+        if (event.type() === Clutter.EventType.BUTTON_PRESS) {
+            if (event.get_button() === 1)
                 this.toggleMenu();
-            }
-        }
-        else if(event.type() === Clutter.EventType.TOUCH_BEGIN){
+
+        } else if (event.type() === Clutter.EventType.TOUCH_BEGIN) {
             this.toggleMenu();
         }
         return Clutter.EVENT_PROPAGATE;
     }
 
-    toggleMenu(){
-        if(this.contextMenuManager.activeMenu)
+    toggleMenu() {
+        if (this.contextMenuManager.activeMenu)
             this.contextMenuManager.activeMenu.toggle();
-        if(this.subMenuManager.activeMenu)
+        if (this.subMenuManager.activeMenu)
             this.subMenuManager.activeMenu.toggle();
 
-        if (this.dtpPanel && !this.arcMenu.isOpen){
-            if (this.dtpPanel.intellihide && this.dtpPanel.intellihide.enabled)
+        if (this.dtpPanel && !this.arcMenu.isOpen) {
+            if (this.dtpPanel.intellihide && this.dtpPanel.intellihide.enabled) {
                 this.dtpPanel.intellihide._revealPanel(true);
-            else if (!this.dtpPanel.panelBox.visible){
+            } else if (!this.dtpPanel.panelBox.visible) {
                 this.dtpPanel.panelBox.visible = true;
                 this.dtpNeedsHiding = true;
             }
-        }
-        else if(this._panel === Main.panel && !Main.layoutManager.panelBox.visible && !this.arcMenu.isOpen){
-          Main.layoutManager.panelBox.visible = true;
-          this.mainPanelNeedsHiding = true;
+        } else if (this._panel === Main.panel && !Main.layoutManager.panelBox.visible && !this.arcMenu.isOpen) {
+            Main.layoutManager.panelBox.visible = true;
+            this.mainPanelNeedsHiding = true;
         }
 
         this.arcMenu.toggle();
-        if(this.arcMenu.isOpen){
-          this.mainBox.grab_key_focus();
-        }
+        if (this.arcMenu.isOpen)
+            this.mainBox.grab_key_focus();
+
     }
 
-    getActiveMenu(){
-        if(this.contextMenuManager.activeMenu)
+    getActiveMenu() {
+        if (this.contextMenuManager.activeMenu)
             return this.contextMenuManager.activeMenu;
-        else if(this.subMenuManager.activeMenu)
+        else if (this.subMenuManager.activeMenu)
             return this.subMenuManager.activeMenu;
-        else if(this.arcMenu.isOpen)
+        else if (this.arcMenu.isOpen)
             return this.arcMenu;
         else
             return null;
     }
 
-    updateHeight(){
+    updateHeight() {
         let monitorIndex = Main.layoutManager.findIndexForActor(this.menuButtonWidget.actor);
         let scaleFactor = Main.layoutManager.monitors[monitorIndex].geometry_scale;
         let monitorWorkArea = Main.layoutManager.getWorkAreaForMonitor(monitorIndex);
         let height = Math.round(650 / scaleFactor);
 
-        if(height > monitorWorkArea.height){
-            height = (monitorWorkArea.height * 8) / 10;
-        }
+        if (height > monitorWorkArea.height)
+            height = monitorWorkArea.height * 8 / 10;
+
 
         this.reload();
     }
 
-    _onDestroy(){
-        if (this._iconThemeChangedId){
+    _onDestroy() {
+        if (this._iconThemeChangedId) {
             St.TextureCache.get_default().disconnect(this._iconThemeChangedId);
             this._iconThemeChangedId = null;
         }
-        if (this._monitorsChangedId){
+        if (this._monitorsChangedId) {
             Main.layoutManager.disconnect(this._monitorsChangedId);
             this._monitorsChangedId = null;
         }
-        if(this.reloadID){
+        if (this.reloadID) {
             GLib.source_remove(this.reloadID);
             this.reloadID = null;
         }
-        if(this.createLayoutID){
+        if (this.createLayoutID) {
             GLib.source_remove(this.createLayoutID);
             this.createLayoutID = null;
         }
@@ -344,102 +344,102 @@ var MenuButton = GObject.registerClass(class Arc_Menu_MenuButton extends PanelMe
             GLib.source_remove(this.tooltipHidingID);
             this.tooltipHidingID = null;
         }
-        if(this.MenuLayout)
+        if (this.MenuLayout)
             this.MenuLayout.destroy();
 
-        if(this.extensionChangedId){
+        if (this.extensionChangedId) {
             Main.extensionManager.disconnect(this.extensionChangedId);
             this.extensionChangedId = null;
         }
-        if(this.dtpPostionChangedID && this.extensionSettingsItem){
+        if (this.dtpPostionChangedID && this.extensionSettingsItem) {
             this.extensionSettingsItem.disconnect(this.dtpPostionChangedID);
             this.dtpPostionChangedID = null;
         }
-        if(this.dtdPostionChangedID && this._panel._settings){
+        if (this.dtdPostionChangedID && this._panel._settings) {
             this._panel._settings.disconnect(this.dtdPostionChangedID);
             this.dtdPostionChangedID = null;
         }
-        if(this._installedChangedId){
+        if (this._installedChangedId) {
             appSys.disconnect(this._installedChangedId);
             this._installedChangedId = null;
         }
-        if(this.arcMenu){
+        if (this.arcMenu)
             this.arcMenu.destroy();
-        }
+
         super._onDestroy();
     }
 
-    _loadPinnedShortcuts(){
-        if(this.MenuLayout)
+    _loadPinnedShortcuts() {
+        if (this.MenuLayout)
             this.MenuLayout.loadPinnedShortcuts();
     }
 
-    updateLocation(){
-        if(this.MenuLayout)
+    updateLocation() {
+        if (this.MenuLayout)
             this.MenuLayout.updateLocation();
     }
 
-    updateIcons(){
-        if(this.MenuLayout)
+    updateIcons() {
+        if (this.MenuLayout)
             this.MenuLayout.updateIcons();
     }
 
-    _loadCategories(){
-        if(this.MenuLayout)
+    _loadCategories() {
+        if (this.MenuLayout)
             this.MenuLayout.loadCategories();
     }
 
     _clearApplicationsBox() {
-        if(this.MenuLayout)
+        if (this.MenuLayout)
             this.MenuLayout.clearApplicationsBox();
     }
 
     _displayCategories() {
-        if(this.MenuLayout)
+        if (this.MenuLayout)
             this.MenuLayout.displayCategories();
     }
 
     _displayFavorites() {
-        if(this.MenuLayout)
+        if (this.MenuLayout)
             this.MenuLayout.displayFavorites();
     }
 
     _loadFavorites() {
-        if(this.MenuLayout)
+        if (this.MenuLayout)
             this.MenuLayout.loadFavorites();
     }
 
     _displayAllApps() {
-        if(this.MenuLayout)
+        if (this.MenuLayout)
             this.MenuLayout.displayAllApps();
     }
 
     selectCategory(dir) {
-        if(this.MenuLayout)
+        if (this.MenuLayout)
             this.MenuLayout.selectCategory(dir);
     }
 
-    _displayGnomeFavorites(){
-        if(this.MenuLayout)
+    _displayGnomeFavorites() {
+        if (this.MenuLayout)
             this.MenuLayout.displayGnomeFavorites();
     }
 
-    scrollToButton(button){
-        if(this.MenuLayout)
+    scrollToButton(button) {
+        if (this.MenuLayout)
             this.MenuLayout.scrollToButton(button);
     }
 
-    reload(){
-        if(this.MenuLayout)
+    reload() {
+        if (this.MenuLayout)
             this.MenuLayout.needsReload = true;
     }
 
-    getShouldLoadFavorites(){
-        if(this.MenuLayout)
+    getShouldLoadFavorites() {
+        if (this.MenuLayout)
             return this.MenuLayout.shouldLoadFavorites;
     }
 
-    setDefaultMenuView(){
+    setDefaultMenuView() {
         if (this.MenuLayout)
             this.MenuLayout.setDefaultMenuView();
     }
@@ -449,23 +449,23 @@ var MenuButton = GObject.registerClass(class Arc_Menu_MenuButton extends PanelMe
             this.menuButtonWidget.setActiveStylePseudoClass(true);
             this.add_style_pseudo_class('active');
 
-            if(Main.panel.menuManager && Main.panel.menuManager.activeMenu)
+            if (Main.panel.menuManager && Main.panel.menuManager.activeMenu)
                 Main.panel.menuManager.activeMenu.toggle();
-        }
-        else {
-            if(this.dtpPanel && this.dtpNeedsRelease){
+        } else {
+            if (this.dtpPanel && this.dtpNeedsRelease) {
                 this.dtpNeedsRelease = false;
-                this.dtpPanel.intellihide ? this.dtpPanel.intellihide.release(2) : null;
+                if (this.dtpPanel.intellihide)
+                    this.dtpPanel.intellihide.release(2);
             }
-            if(this.dtpPanel && this.dtpNeedsHiding){
+            if (this.dtpPanel && this.dtpNeedsHiding) {
                 this.dtpNeedsHiding = false;
                 this.dtpPanel.panelBox.visible = false;
             }
-            if(this.mainPanelNeedsHiding){
+            if (this.mainPanelNeedsHiding) {
                 Main.layoutManager.panelBox.visible = false;
                 this.mainPanelNeedsHiding = false;
             }
-            if(!this.arcMenu.isOpen){
+            if (!this.arcMenu.isOpen) {
                 this.menuButtonWidget.setActiveStylePseudoClass(false);
                 this.remove_style_pseudo_class('active');
             }
@@ -473,7 +473,7 @@ var MenuButton = GObject.registerClass(class Arc_Menu_MenuButton extends PanelMe
     }
 });
 
-var ArcMenu = class Arc_Menu_ArcMenu extends PopupMenu.PopupMenu{
+var ArcMenu = class ArcMenu extends PopupMenu.PopupMenu {
     constructor(sourceActor, arrowAlignment, arrowSide) {
         super(sourceActor, arrowAlignment, arrowSide);
         this._settings = sourceActor._settings;
@@ -484,44 +484,45 @@ var ArcMenu = class Arc_Menu_ArcMenu extends PopupMenu.PopupMenu{
         this.connect('destroy', () => this._onDestroy());
     }
 
-    open(animation){
+    open(animation) {
         if (this._menuButton.dtpPanel && !this._menuButton.dtpNeedsRelease) {
             this._menuButton.dtpNeedsRelease = true;
-            this._menuButton.dtpPanel.intellihide ? this._menuButton.dtpPanel.intellihide.revealAndHold(2) : null;
+            if (this._menuButton.dtpPanel.intellihide)
+                this._menuButton.dtpPanel.intellihide.revealAndHold(2);
         }
         this._onOpenEvent();
         super.open(animation);
     }
 
-    close(animation){
-        if(this._menuButton.contextMenuManager.activeMenu)
+    close(animation) {
+        if (this._menuButton.contextMenuManager.activeMenu)
             this._menuButton.contextMenuManager.activeMenu.toggle();
-        if(this._menuButton.subMenuManager.activeMenu)
+        if (this._menuButton.subMenuManager.activeMenu)
             this._menuButton.subMenuManager.activeMenu.toggle();
         super.close(animation);
     }
 
-    _onOpenEvent(){
+    _onOpenEvent() {
         this._menuButton.arcMenu.actor._muteInput = false;
-        if(this._menuButton.MenuLayout && this._menuButton.MenuLayout.needsReload){
+        if (this._menuButton.MenuLayout && this._menuButton.MenuLayout.needsReload) {
             this._menuButton.MenuLayout.reload();
             this._menuButton.MenuLayout.needsReload = false;
             this._menuButton.setDefaultMenuView();
         }
     }
 
-    _onCloseEvent(){
-        if(this._menuButton.MenuLayout && this._menuButton.MenuLayout.isRunning){
-            if(this._menuButton.MenuLayout.needsReload)
+    _onCloseEvent() {
+        if (this._menuButton.MenuLayout && this._menuButton.MenuLayout.isRunning) {
+            if (this._menuButton.MenuLayout.needsReload)
                 this._menuButton.MenuLayout.reload();
             this._menuButton.MenuLayout.needsReload = false;
             this._menuButton.setDefaultMenuView();
         }
     }
 
-    _onDestroy(){
-        if(this._menuCloseID){
-            this.disconnect(this._menuCloseID)
+    _onDestroy() {
+        if (this._menuCloseID) {
+            this.disconnect(this._menuCloseID);
             this._menuCloseID = null;
         }
     }
diff --git a/extensions/arc-menu/menuWidgets.js b/extensions/arc-menu/menuWidgets.js
index c7fd977..cabd57a 100644
--- a/extensions/arc-menu/menuWidgets.js
+++ b/extensions/arc-menu/menuWidgets.js
@@ -23,7 +23,7 @@
 
 // Import Libraries
 const Me = imports.misc.extensionUtils.getCurrentExtension();
-const {Atk, Clutter, Gio, GLib, GMenu, GObject, Gtk, Shell, St} = imports.gi;
+const { Atk, Clutter, Gio, GLib, GObject, Gtk, Shell, St } = imports.gi;
 const AccountsService = imports.gi.AccountsService;
 const AppFavorites = imports.ui.appFavorites;
 const Constants = Me.imports.constants;
@@ -36,10 +36,6 @@ const Signals = imports.signals;
 const Util = imports.misc.util;
 const Utils =  Me.imports.utils;
 const _ = Gettext.gettext;
-const { loadInterfaceXML } = imports.misc.fileUtils;
-
-const ClocksIntegrationIface = loadInterfaceXML('org.gnome.Shell.ClocksIntegration');
-const ClocksProxy = Gio.DBusProxy.makeProxyWrapper(ClocksIntegrationIface);
 
 const SWITCHEROO_BUS_NAME = 'net.hadess.SwitcherooControl';
 const SWITCHEROO_OBJECT_PATH = '/net/hadess/SwitcherooControl';
@@ -55,14 +51,13 @@ const SwitcherooProxyInterface = '<node> \
 const SwitcherooProxy = Gio.DBusProxy.makeProxyWrapper(SwitcherooProxyInterface);
 
 // Menu Size variables
-const LARGE_ICON_SIZE = 34;
 const MEDIUM_ICON_SIZE = 25;
 const INDICATOR_ICON_SIZE = 18;
 const SMALL_ICON_SIZE = 16;
 const USER_AVATAR_SIZE = 28;
 
-var ApplicationContextMenu = class Arc_Menu_ApplicationContextMenu extends PopupMenu.PopupMenu {
-    constructor(actor, app, menuLayout){
+var ApplicationContextMenu = class ArcMenuApplicationContextMenu extends PopupMenu.PopupMenu {
+    constructor(actor, app, menuLayout) {
         super(actor, 0.0, St.Side.TOP);
         this._menuLayout = menuLayout;
         this._settings = menuLayout._settings;
@@ -83,13 +78,13 @@ var ApplicationContextMenu = class Arc_Menu_ApplicationContextMenu extends Popup
         this._menuLayout.contextMenuManager.addMenu(this);
     }
 
-    centerBoxPointerPosition(){
+    centerBoxPointerPosition() {
         this._boxPointer.setSourceAlignment(.50);
         this._arrowAlignment = .5;
         this._boxPointer._border.queue_repaint();
     }
 
-    rightBoxPointerPosition(){
+    rightBoxPointerPosition() {
         this._arrowSide = St.Side.LEFT;
         this._boxPointer._arrowSide = St.Side.LEFT;
         this._boxPointer._userArrowSide = St.Side.LEFT;
@@ -98,11 +93,11 @@ var ApplicationContextMenu = class Arc_Menu_ApplicationContextMenu extends Popup
         this._boxPointer._border.queue_repaint();
     }
 
-    set isPinnedApp(isPinnedApp){
+    set isPinnedApp(isPinnedApp) {
         this._isPinnedApp = isPinnedApp;
     }
 
-    set path(path){
+    set path(path) {
         this._path = path;
     }
 
@@ -123,44 +118,47 @@ var ApplicationContextMenu = class Arc_Menu_ApplicationContextMenu extends Popup
                 this._updateDiscreteGpuAvailable();
             });
     }
-    closeMenus(){
+
+    closeMenus() {
         this.close();
         this._menuLayout.arcMenu.toggle();
     }
-    open(animate){
-        if(this._menuButton.tooltipShowingID){
+
+    open(animate) {
+        if (this._menuButton.tooltipShowingID) {
             GLib.source_remove(this._menuButton.tooltipShowingID);
             this._menuButton.tooltipShowingID = null;
             this._menuButton.tooltipShowing = false;
         }
-        if(this.sourceActor.tooltip){
+        if (this.sourceActor.tooltip) {
             this.sourceActor.tooltip.hide();
             this._menuButton.tooltipShowing = false;
         }
 
         super.open(animate);
     }
-    close(animate){
-        if(this.isOpen){
+
+    close(animate) {
+        if (this.isOpen) {
             this.sourceActor.sync_hover();
             super.close(animate);
         }
     }
-    redisplay(){
+
+    redisplay() {
         this.removeAll();
         this.actor.style_class = 'popup-menu-boxpointer';
         this.actor.add_style_class_name('popup-menu');
 
-        if(this._app instanceof Shell.App){
-            if(this._path != undefined){
-                this._newWindowMenuItem = this._appendMenuItem(_("Open Folder Location"));
+        if (this._app instanceof Shell.App) {
+            if (this._path !== undefined) {
+                this._newWindowMenuItem = this._appendMenuItem(_('Open Folder Location'));
                 this._newWindowMenuItem.connect('activate', () => {
-                    Util.spawnCommandLine('nautilus "' +this._path +'"');
+                    Util.spawnCommandLine(`nautilus "${this._path}"`);
                     this.emit('activate-window', null);
                     this.closeMenus();
                 });
-            }
-            else{
+            } else {
                 this.appInfo = this._app.get_app_info();
                 let actions = this.appInfo.list_actions();
 
@@ -168,15 +166,15 @@ var ApplicationContextMenu = class Arc_Menu_ApplicationContextMenu extends Popup
                     w => !w.skip_taskbar
                 );
 
-                if (windows.length > 0){
-                    let item = new PopupMenu.PopupMenuItem(_("Current Windows:"),{reactive:false,can_focus:false});
+                if (windows.length > 0) {
+                    let item = new PopupMenu.PopupMenuItem(_('Current Windows:'), { reactive: false, can_focus: false });
                     item.actor.add_style_class_name('inactive');
                     this.addMenuItem(item);
                 }
 
                 windows.forEach(window => {
                     let title = window.title ? window.title
-                                            : this._app.get_name();
+                        : this._app.get_name();
                     let item = this._appendMenuItem(title);
                     item.connect('activate', () => {
                         this.closeMenus();
@@ -187,7 +185,7 @@ var ApplicationContextMenu = class Arc_Menu_ApplicationContextMenu extends Popup
                 if (!this._app.is_window_backed()) {
                     this._appendSeparator();
                     if (this._app.can_open_new_window() && !actions.includes('new-window')) {
-                        this._newWindowMenuItem = this._appendMenuItem(_("New Window"));
+                        this._newWindowMenuItem = this._appendMenuItem(_('New Window'));
                         this._newWindowMenuItem.connect('activate', () => {
                             this.closeMenus();
                             this._app.open_new_window(-1);
@@ -195,9 +193,9 @@ var ApplicationContextMenu = class Arc_Menu_ApplicationContextMenu extends Popup
                         });
                     }
                     if (this.discreteGpuAvailable &&
-                        this._app.state == Shell.AppState.STOPPED &&
+                        this._app.state === Shell.AppState.STOPPED &&
                         !actions.includes('activate-discrete-gpu')) {
-                        this._onDiscreteGpuMenuItem = this._appendMenuItem(_("Launch using Dedicated Graphics Card"));
+                        this._onDiscreteGpuMenuItem = this._appendMenuItem(_('Launch using Dedicated Graphics Card'));
                         this._onDiscreteGpuMenuItem.connect('activate', () => {
                             this.closeMenus();
                             this._app.launch(0, -1, true);
@@ -208,17 +206,15 @@ var ApplicationContextMenu = class Arc_Menu_ApplicationContextMenu extends Popup
                     for (let i = 0; i < actions.length; i++) {
                         let action = actions[i];
                         let item;
-                        if(action === "empty-trash-inactive"){
-                            item = new PopupMenu.PopupMenuItem(this.appInfo.get_action_name(action), {reactive:false,can_focus:false});
+                        if (action === 'empty-trash-inactive') {
+                            item = new PopupMenu.PopupMenuItem(this.appInfo.get_action_name(action), { reactive: false, can_focus: false });
                             item.actor.add_style_class_name('inactive');
                             this._appendSeparator();
                             this.addMenuItem(item);
-                        }
-                        else if(action === "empty-trash"){
+                        } else if (action === 'empty-trash') {
                             this._appendSeparator();
                             item = this._appendMenuItem(this.appInfo.get_action_name(action));
-                        }
-                        else{
+                        } else {
                             item = this._appendMenuItem(this.appInfo.get_action_name(action));
                         }
 
@@ -229,31 +225,30 @@ var ApplicationContextMenu = class Arc_Menu_ApplicationContextMenu extends Popup
                         });
                     }
 
-                    //If Trash Can, we don't want to add the rest of the entries below.
-                    if(this.appInfo.get_string('Id') === "ArcMenu_Trash")
+                    // If Trash Can, we don't want to add the rest of the entries below.
+                    if (this.appInfo.get_string('Id') === 'ArcMenu_Trash')
                         return false;
 
-                    let desktopIcons = Main.extensionManager.lookup("desktop-icons@csoriano");
-                    let desktopIconsNG = Main.extensionManager.lookup("ding@rastersoft.com");
-                    if((desktopIcons && desktopIcons.stateObj) || (desktopIconsNG && desktopIconsNG.stateObj) ){
+                    let desktopIcons = Main.extensionManager.lookup('desktop-icons@csoriano');
+                    let desktopIconsNG = Main.extensionManager.lookup('ding@rastersoft.com');
+                    if (desktopIcons && desktopIcons.stateObj || desktopIconsNG && desktopIconsNG.stateObj) {
                         this._appendSeparator();
                         let fileSource = this.appInfo.get_filename();
                         let fileDestination = GLib.get_user_special_dir(imports.gi.GLib.UserDirectory.DIRECTORY_DESKTOP);
-                        let file = Gio.File.new_for_path(fileDestination + "/" + this._app.get_id());
+                        let file = Gio.File.new_for_path(`${fileDestination}/${this._app.get_id()}`);
                         let exists = file.query_exists(null);
-                        if(exists){
-                            let item = this._appendMenuItem(_("Delete Desktop Shortcut"));
+                        if (exists) {
+                            let item = this._appendMenuItem(_('Delete Desktop Shortcut'));
                             item.connect('activate', () => {
-                                if(fileSource && fileDestination)
-                                    Util.spawnCommandLine("rm " + fileDestination + "/" + this._app.get_id());
+                                if (fileSource && fileDestination)
+                                    Util.spawnCommandLine(`rm ${fileDestination}/${this._app.get_id()}`);
                                 this.close();
                             });
-                        }
-                        else{
-                            let item = this._appendMenuItem(_("Create Desktop Shortcut"));
+                        } else {
+                            let item = this._appendMenuItem(_('Create Desktop Shortcut'));
                             item.connect('activate', () => {
-                                if(fileSource && fileDestination)
-                                    Util.spawnCommandLine("cp " + fileSource + " " + fileDestination);
+                                if (fileSource && fileDestination)
+                                    Util.spawnCommandLine(`cp ${fileSource} ${fileDestination}`);
                                 this.close();
                             });
                         }
@@ -264,13 +259,13 @@ var ApplicationContextMenu = class Arc_Menu_ApplicationContextMenu extends Popup
                         this._appendSeparator();
                         let isFavorite = AppFavorites.getAppFavorites().isFavorite(this._app.get_id());
                         if (isFavorite) {
-                            let item = this._appendMenuItem(_("Remove from Favorites"));
+                            let item = this._appendMenuItem(_('Remove from Favorites'));
                             item.connect('activate', () => {
                                 let favs = AppFavorites.getAppFavorites();
                                 favs.removeFavorite(this._app.get_id());
                             });
                         } else {
-                            let item = this._appendMenuItem(_("Add to Favorites"));
+                            let item = this._appendMenuItem(_('Add to Favorites'));
                             item.connect('activate', () => {
                                 let favs = AppFavorites.getAppFavorites();
                                 favs.addFavorite(this._app.get_id());
@@ -279,53 +274,52 @@ var ApplicationContextMenu = class Arc_Menu_ApplicationContextMenu extends Popup
                     }
 
                     let pinnedApps = this._settings.get_strv('pinned-app-list');
-                    let pinnedAppID=[];
-                    for(let i=2;i<pinnedApps.length;i+=3){
+                    let pinnedAppID = [];
+                    for (let i = 2; i < pinnedApps.length; i += 3)
                         pinnedAppID.push(pinnedApps[i]);
-                    }
-                    let match = pinnedAppID.find( (element)=>{
-                        return element == this._app.get_id();
+
+                    let match = pinnedAppID.find(element => {
+                        return element === this._app.get_id();
                     });
-                    if(match){ //if app is pinned add Unpin
-                        let item = new PopupMenu.PopupMenuItem(_("Unpin from ArcMenu"));
-                        item.connect('activate', ()=>{
+                    if (match) { // if app is pinned add Unpin
+                        let item = new PopupMenu.PopupMenuItem(_('Unpin from ArcMenu'));
+                        item.connect('activate', () => {
                             this.close();
-                            for(let i = 0;i<pinnedApps.length;i+=3){
-                                if(pinnedApps[i+2]==this._app.get_id()){
-                                    pinnedApps.splice(i,3);
-                                    this._settings.set_strv('pinned-app-list',pinnedApps);
+                            for (let i = 0; i < pinnedApps.length; i += 3) {
+                                if (pinnedApps[i + 2] === this._app.get_id()) {
+                                    pinnedApps.splice(i, 3);
+                                    this._settings.set_strv('pinned-app-list', pinnedApps);
                                     break;
                                 }
                             }
                         });
                         this.addMenuItem(item);
-                    }
-                    else{ //if app is not pinned add pin
-                        let item = new PopupMenu.PopupMenuItem(_("Pin to ArcMenu"));
-                        item.connect('activate', ()=>{
+                    } else { // if app is not pinned add pin
+                        let item = new PopupMenu.PopupMenuItem(_('Pin to ArcMenu'));
+                        item.connect('activate', () => {
                             this.close();
                             pinnedApps.push(this.appInfo.get_display_name());
                             pinnedApps.push('');
                             pinnedApps.push(this._app.get_id());
-                            this._settings.set_strv('pinned-app-list',pinnedApps);
+                            this._settings.set_strv('pinned-app-list', pinnedApps);
                         });
                         this.addMenuItem(item);
                     }
 
                     if (Shell.AppSystem.get_default().lookup_app('org.gnome.Software.desktop')) {
                         this._appendSeparator();
-                        let item = this._appendMenuItem(_("Show Details"));
+                        let item = this._appendMenuItem(_('Show Details'));
                         item.connect('activate', () => {
                             let id = this._app.get_id();
                             let args = GLib.Variant.new('(ss)', [id, '']);
                             Gio.DBus.get(Gio.BusType.SESSION, null, (o, res) => {
                                 let bus = Gio.DBus.get_finish(res);
                                 bus.call('org.gnome.Software',
-                                        '/org/gnome/Software',
-                                        'org.gtk.Actions', 'Activate',
-                                        GLib.Variant.new('(sava{sv})',
-                                                        ['details', [args], null]),
-                                        null, 0, -1, null, null);
+                                    '/org/gnome/Software',
+                                    'org.gtk.Actions', 'Activate',
+                                    GLib.Variant.new('(sava{sv})',
+                                        ['details', [args], null]),
+                                    null, 0, -1, null, null);
                                 this.closeMenus();
                             });
                         });
@@ -333,17 +327,16 @@ var ApplicationContextMenu = class Arc_Menu_ApplicationContextMenu extends Popup
                 }
 
             }
-        }
-        else{  //if pinned custom shortcut add unpin option to menu
+        } else {  // if pinned custom shortcut add unpin option to menu
             this._appendSeparator();
-            let item = new PopupMenu.PopupMenuItem(_("Unpin from ArcMenu"));
-            item.connect('activate', ()=>{
+            let item = new PopupMenu.PopupMenuItem(_('Unpin from ArcMenu'));
+            item.connect('activate', () => {
                 this.close();
                 let pinnedApps = this._settings.get_strv('pinned-app-list');
-                for(let i = 0;i<pinnedApps.length;i+=3){
-                    if(pinnedApps[i+2]==this._app){
-                        pinnedApps.splice(i,3);
-                        this._settings.set_strv('pinned-app-list',pinnedApps);
+                for (let i = 0; i < pinnedApps.length; i += 3) {
+                    if (pinnedApps[i + 2] === this._app) {
+                        pinnedApps.splice(i, 3);
+                        this._settings.set_strv('pinned-app-list', pinnedApps);
                         break;
                     }
                 }
@@ -354,7 +347,7 @@ var ApplicationContextMenu = class Arc_Menu_ApplicationContextMenu extends Popup
 
     _appendSeparator() {
         let separator = new PopupMenu.PopupSeparatorMenuItem();
-        separator.actor.style_class='app-right-click-sep';
+        separator.actor.style_class = 'app-right-click-sep';
         separator._separator.style_class = null;
         this.addMenuItem(separator);
     }
@@ -364,6 +357,7 @@ var ApplicationContextMenu = class Arc_Menu_ApplicationContextMenu extends Popup
         this.addMenuItem(item);
         return item;
     }
+
     _onKeyPress(actor, event) {
         // Disable toggling the menu by keyboard
         // when it cannot be toggled by pointer
@@ -397,54 +391,50 @@ var ApplicationContextMenu = class Arc_Menu_ApplicationContextMenu extends Popup
             return Clutter.EVENT_PROPAGATE;
 
         let symbol = event.get_key_symbol();
-        if (symbol == Clutter.KEY_space || symbol == Clutter.KEY_Return) {
+        if (symbol === Clutter.KEY_space || symbol === Clutter.KEY_Return) {
             this.toggle();
             return Clutter.EVENT_STOP;
-        } else if (symbol == Clutter.KEY_Escape && this.isOpen) {
+        } else if (symbol === Clutter.KEY_Escape && this.isOpen) {
             this.close();
             return Clutter.EVENT_STOP;
-        } else if (symbol == navKey) {
-            if (this.isOpen){
+        } else if (symbol === navKey) {
+            if (this.isOpen) {
                 this.actor.navigate_focus(null, Gtk.DirectionType.TAB_FORWARD, false);
                 return Clutter.EVENT_STOP;
-            }
-            else
+            } else {
                 return Clutter.EVENT_PROPAGATE;
+            }
         } else {
             return Clutter.EVENT_PROPAGATE;
         }
     }
 };
 
-var ScrollView = GObject.registerClass(
-    class Arc_Menu_ScrollView extends St.ScrollView{
-    _init(params){
-        super._init(params);
-    }
-
-    vfunc_style_changed(){
-        super.vfunc_style_changed();
-        let fade = this.get_effect("fade");
-        if(fade)
-            fade.set_shader_source(Utils.ScrollViewShader);
-    }
-});
+var ScrollView = GObject.registerClass( // eslint-disable-line no-unused-vars
+    class ArcMenuScrollView extends St.ScrollView {
+        vfunc_style_changed() {
+            super.vfunc_style_changed();
+            let fade = this.get_effect('fade');
+            if (fade)
+                fade.set_shader_source(Utils.ScrollViewShader);
+        }
+    });
 
 var ArcMenuPopupBaseMenuItem = GObject.registerClass({
     Properties: {
         'active': GObject.ParamSpec.boolean('active', 'active', 'active',
-                                            GObject.ParamFlags.READWRITE,
-                                            false),
+            GObject.ParamFlags.READWRITE,
+            false),
         'sensitive': GObject.ParamSpec.boolean('sensitive', 'sensitive', 'sensitive',
-                                               GObject.ParamFlags.READWRITE,
-                                               true),
+            GObject.ParamFlags.READWRITE,
+            true),
     },
     Signals: {
         'activate': { param_types: [Clutter.Event.$gtype] },
     },
 
-},   class Arc_Menu_PopupBaseMenuItem extends St.BoxLayout{
-    _init(menuLayout, params){
+},   class ArcMenuPopupBaseMenuItem extends St.BoxLayout {
+    _init(menuLayout, params) {
         params = imports.misc.params.parse(params, {
             reactive: true,
             activate: true,
@@ -453,11 +443,10 @@ var ArcMenuPopupBaseMenuItem = GObject.registerClass({
             can_focus: true,
         });
         super._init({ style_class: 'popup-menu-item',
-                      reactive: params.reactive,
-                      track_hover: params.reactive,
-                      can_focus: params.can_focus,
-                      accessible_role: Atk.Role.MENU_ITEM
-        });
+            reactive: params.reactive,
+            track_hover: params.reactive,
+            can_focus: params.can_focus,
+            accessible_role: Atk.Role.MENU_ITEM });
         this.hasContextMenu = false;
         this._delegate = this;
         this.needsDestroy = true;
@@ -487,7 +476,7 @@ var ArcMenuPopupBaseMenuItem = GObject.registerClass({
         if (params.reactive && params.hover)
             this.bind_property('hover', this, 'active', GObject.BindingFlags.SYNC_CREATE);
 
-        if(params.hover)
+        if (params.hover)
             this.actor.connect('notify::hover', this._onHover.bind(this));
         this.actor.connect('destroy', this._onDestroy.bind(this));
     }
@@ -497,16 +486,15 @@ var ArcMenuPopupBaseMenuItem = GObject.registerClass({
     }
 
     set active(active) {
-        let activeChanged = active != this.active;
-        if(activeChanged){
+        let activeChanged = active !== this.active;
+        if (activeChanged) {
             this._active = active;
-            if(active){
+            if (active) {
                 this.add_style_class_name('selected');
                 this._menuLayout.activeMenuItem = this;
-                if(this.can_focus)
+                if (this.can_focus)
                     this.grab_key_focus();
-            }
-            else{
+            } else {
                 this.remove_style_class_name('selected');
                 this.set_style_pseudo_class(null);
             }
@@ -514,64 +502,65 @@ var ArcMenuPopupBaseMenuItem = GObject.registerClass({
         }
     }
 
-    setShouldShow(){
-        //If a saved shortcut link is a desktop app, check if currently installed.
-        //Do NOT display if application not found.
-        if(this._command.endsWith(".desktop") && !Shell.AppSystem.get_default().lookup_app(this._command)){
+    setShouldShow() {
+        // If a saved shortcut link is a desktop app, check if currently installed.
+        // Do NOT display if application not found.
+        if (this._command.endsWith('.desktop') && !Shell.AppSystem.get_default().lookup_app(this._command))
             this.shouldShow = false;
-        }
+
     }
 
     _onHover() {
-        if(this.tooltip==undefined && this.actor.hover && this.label){
+        if (this.tooltip === undefined && this.actor.hover && this.label) {
             let description = this.description;
-            if(this._app)
+            if (this._app)
                 description = this._app.get_description();
             Utils.createTooltip(this._menuLayout, this, this.label, description);
         }
     }
 
-    vfunc_button_press_event(){
+    vfunc_button_press_event() {
         let event = Clutter.get_current_event();
         this.pressed = false;
-        if(event.get_button() == 1){
+        if (event.get_button() === 1) {
             this._menuLayout._blockActivateEvent = false;
             this.pressed = true;
-            if(this.hasContextMenu)
+            if (this.hasContextMenu)
                 this.contextMenuTimeOut();
-        }
-        else if(event.get_button() == 3){
+        } else if (event.get_button() === 3) {
             this.pressed = true;
         }
         this.add_style_pseudo_class('active');
         return Clutter.EVENT_PROPAGATE;
     }
-    vfunc_button_release_event(){
+
+    vfunc_button_release_event() {
         let event = Clutter.get_current_event();
-        if(event.get_button() == 1 && !this._menuLayout._blockActivateEvent && this.pressed){
+        if (event.get_button() === 1 && !this._menuLayout._blockActivateEvent && this.pressed) {
             this.pressed = false;
             this.activate(event);
             this.remove_style_pseudo_class('active');
         }
-        if(event.get_button() == 3 && this.pressed){
+        if (event.get_button() === 3 && this.pressed) {
             this.pressed = false;
-            if(this.hasContextMenu)
+            if (this.hasContextMenu)
                 this.popupContextMenu();
             this.remove_style_pseudo_class('active');
         }
         return Clutter.EVENT_STOP;
     }
+
     vfunc_key_focus_in() {
         super.vfunc_key_focus_in();
-        if(!this.actor.hover)
+        if (!this.actor.hover)
             this._menuLayout._keyFocusIn(this.actor);
         this.active = true;
     }
 
     vfunc_key_focus_out() {
-        if(this.contextMenu && this.contextMenu.isOpen){
+        if (this.contextMenu && this.contextMenu.isOpen)
             return;
-        }
+
         super.vfunc_key_focus_out();
         this.active = false;
     }
@@ -579,6 +568,7 @@ var ArcMenuPopupBaseMenuItem = GObject.registerClass({
     activate(event) {
         this.emit('activate', event);
     }
+
     vfunc_key_press_event(keyEvent) {
         if (!this._activatable)
             return super.vfunc_key_press_event(keyEvent);
@@ -595,60 +585,60 @@ var ArcMenuPopupBaseMenuItem = GObject.registerClass({
             return Clutter.EVENT_PROPAGATE;
 
         let symbol = keyEvent.keyval;
-        if (symbol == Clutter.KEY_space || symbol == Clutter.KEY_Return) {
+        if (symbol === Clutter.KEY_space || symbol === Clutter.KEY_Return) {
             this.activate(Clutter.get_current_event());
             return Clutter.EVENT_STOP;
         }
         return Clutter.EVENT_PROPAGATE;
     }
 
-    vfunc_touch_event(event){
-        if(event.type == Clutter.EventType.TOUCH_END && !this._menuLayout._blockActivateEvent && this.pressed){
+    vfunc_touch_event(event) {
+        if (event.type === Clutter.EventType.TOUCH_END && !this._menuLayout._blockActivateEvent && this.pressed) {
             this.remove_style_pseudo_class('active');
             this.activate(Clutter.get_current_event());
             this.pressed = false;
             return Clutter.EVENT_STOP;
-        }
-        else if(event.type == Clutter.EventType.TOUCH_BEGIN && !this._menuLayout.contextMenuManager.activeMenu){
+        } else if (event.type === Clutter.EventType.TOUCH_BEGIN && !this._menuLayout.contextMenuManager.activeMenu) {
             this.pressed = true;
             this._menuLayout._blockActivateEvent = false;
-            if(this.hasContextMenu)
+            if (this.hasContextMenu)
                 this.contextMenuTimeOut();
             this.add_style_pseudo_class('active');
-        }
-        else if(event.type == Clutter.EventType.TOUCH_BEGIN && this._menuLayout.contextMenuManager.activeMenu){
+        } else if (event.type === Clutter.EventType.TOUCH_BEGIN && this._menuLayout.contextMenuManager.activeMenu) {
             this.pressed = false;
             this._menuLayout._blockActivateEvent = false;
             this._menuLayout.contextMenuManager.activeMenu.toggle();
         }
         return Clutter.EVENT_PROPAGATE;
     }
-    contextMenuTimeOut(){
+
+    contextMenuTimeOut() {
         this._popupTimeoutId = GLib.timeout_add(GLib.PRIORITY_DEFAULT, 600, () => {
             this.pressed = false;
             this._popupTimeoutId = null;
-            if(this.hasContextMenu && this._menuLayout.arcMenu.isOpen && !this._menuLayout._blockActivateEvent) {
+            if (this.hasContextMenu && this._menuLayout.arcMenu.isOpen && !this._menuLayout._blockActivateEvent) {
                 this.popupContextMenu();
                 this._menuLayout.contextMenuManager.ignoreRelease();
             }
             return GLib.SOURCE_REMOVE;
         });
     }
-    _onDestroy(){
+
+    _onDestroy() {
         this.needsDestroy = false;
-        if(this.contextMenu){
+        if (this.contextMenu) {
             Main.uiGroup.remove_actor(this.contextMenu.actor);
             this.contextMenu.destroy();
         }
     }
 });
 
-var Tooltip = class Arc_Menu_Tooltip{
+var Tooltip = class ArcMenuTooltip {
     constructor(menuLayout, sourceActor, title, description) {
         this._menuButton = menuLayout.menuButton;
         this._settings = this._menuButton._settings;
         this.sourceActor = sourceActor;
-        if(this.sourceActor.tooltipLocation)
+        if (this.sourceActor.tooltipLocation)
             this.location = this.sourceActor.tooltipLocation;
         else
             this.location = Constants.TooltipLocation.BOTTOM;
@@ -656,66 +646,65 @@ var Tooltip = class Arc_Menu_Tooltip{
         this.actor = new St.BoxLayout({
             vertical: true,
             style_class: 'dash-label tooltip-menu-item',
-            opacity: 0
+            opacity: 0,
         });
 
-        if(title){
+        if (title) {
             titleLabel = new St.Label({
                 text: title,
-                style: description ? "font-weight: bold;" : null,
-                y_align: Clutter.ActorAlign.CENTER
+                style: description ? 'font-weight: bold;' : null,
+                y_align: Clutter.ActorAlign.CENTER,
             });
             this.actor.add_actor(titleLabel);
         }
 
-        if(description){
+        if (description) {
             descriptionLabel = new St.Label({
                 text: description,
-                y_align: Clutter.ActorAlign.CENTER
+                y_align: Clutter.ActorAlign.CENTER,
             });
             this.actor.add_actor(descriptionLabel);
         }
 
         global.stage.add_actor(this.actor);
 
-        this.actor.connect('destroy',()=>{
-            if(this.destroyID){
+        this.actor.connect('destroy', () => {
+            if (this.destroyID) {
                 this.sourceActor.disconnect(this.destroyID);
                 this.destroyID = null;
             }
-            if(this.activeID){
+            if (this.activeID) {
                 this.sourceActor.disconnect(this.activeID);
                 this.activeID = null;
             }
 
-            if(this.hoverID){
+            if (this.hoverID) {
                 this.sourceActor.disconnect(this.hoverID);
                 this.hoverID = null;
             }
-            if(this.toggleID){
+            if (this.toggleID) {
                 this._settings.disconnect(this.toggleID);
                 this.toggleID = null;
             }
-        })
-        this.activeID = this.sourceActor.connect('notify::active', ()=> this.setActive(this.sourceActor.active));
-        this.destroyID = this.sourceActor.connect('destroy',this.destroy.bind(this));
+        });
+        this.activeID = this.sourceActor.connect('notify::active', () => this.setActive(this.sourceActor.active));
+        this.destroyID = this.sourceActor.connect('destroy', this.destroy.bind(this));
         this.hoverID = this.sourceActor.connect('notify::hover', this._onHover.bind(this));
         this._useTooltips = true;
     }
 
-    setActive(active){
-        if(!active)
+    setActive(active) {
+        if (!active)
             this.hide();
     }
 
     _onHover() {
-        if(this._useTooltips){
-            if(this.sourceActor.hover){
-                if(this._menuButton.tooltipShowing){
+        if (this._useTooltips) {
+            if (this.sourceActor.hover) {
+                if (this._menuButton.tooltipShowing) {
                     this.show();
                     this._menuButton.activeTooltip = this.actor;
-                }
-                else{
+                } else {
                     this._menuButton.tooltipShowingID = GLib.timeout_add(0, 750, () => {
                         this.show();
                         this._menuButton.tooltipShowing = true;
@@ -724,14 +713,13 @@ var Tooltip = class Arc_Menu_Tooltip{
                         return GLib.SOURCE_REMOVE;
                     });
                 }
-                if(this._menuButton.tooltipHidingID){
+                if (this._menuButton.tooltipHidingID) {
                     GLib.source_remove(this._menuButton.tooltipHidingID);
                     this._menuButton.tooltipHidingID = null;
                 }
-            }
-            else {
+            } else {
                 this.hide();
-                if(this._menuButton.tooltipShowingID){
+                if (this._menuButton.tooltipShowingID) {
                     GLib.source_remove(this._menuButton.tooltipShowingID);
                     this._menuButton.tooltipShowingID = null;
                 }
@@ -746,7 +734,7 @@ var Tooltip = class Arc_Menu_Tooltip{
     }
 
     show() {
-        if(this._useTooltips){
+        if (this._useTooltips) {
             this.actor.opacity = 0;
             this.actor.show();
 
@@ -762,18 +750,18 @@ var Tooltip = class Arc_Menu_Tooltip{
             let gap = 5;
 
             switch (this.location) {
-                case Constants.TooltipLocation.BOTTOM_CENTERED:
-                    y = stageY + itemHeight + gap;
-                    x = stageX + Math.floor((itemWidth - labelWidth) / 2);
-                    break;
-                case Constants.TooltipLocation.TOP_CENTERED:
-                    y = stageY - labelHeight - gap;
-                    x = stageX + Math.floor((itemWidth - labelWidth) / 2);
-                    break;
-                case Constants.TooltipLocation.BOTTOM:
-                    y = stageY + itemHeight + gap;
-                    x = stageX + gap;
-                    break;
+            case Constants.TooltipLocation.BOTTOM_CENTERED:
+                y = stageY + itemHeight + gap;
+                x = stageX + Math.floor((itemWidth - labelWidth) / 2);
+                break;
+            case Constants.TooltipLocation.TOP_CENTERED:
+                y = stageY - labelHeight - gap;
+                x = stageX + Math.floor((itemWidth - labelWidth) / 2);
+                break;
+            case Constants.TooltipLocation.BOTTOM:
+                y = stageY + itemHeight + gap;
+                x = stageX + gap;
+                break;
             }
 
             // keep the label inside the screen
@@ -797,12 +785,12 @@ var Tooltip = class Arc_Menu_Tooltip{
     }
 
     hide() {
-        if(this._useTooltips){
+        if (this._useTooltips) {
             this.actor.ease({
                 opacity: 0,
                 duration: Dash.DASH_ITEM_LABEL_HIDE_TIME,
                 mode: Clutter.AnimationMode.EASE_OUT_QUAD,
-                onComplete: () => this.actor.hide()
+                onComplete: () => this.actor.hide(),
             });
         }
     }
@@ -816,11 +804,11 @@ var Tooltip = class Arc_Menu_Tooltip{
             GLib.source_remove(this._menuButton.tooltipHidingID);
             this._menuButton.tooltipHidingID = null;
         }
-        if(this.toggleID>0){
+        if (this.toggleID > 0) {
             this._settings.disconnect(this.toggleID);
             this.toggleID = 0;
         }
-        if(this.hoverID>0){
+        if (this.hoverID > 0) {
             this.sourceActor.disconnect(this.hoverID);
             this.hoverID = 0;
         }
@@ -835,128 +823,131 @@ var Tooltip = class Arc_Menu_Tooltip{
  * A base class for custom session menuLayouts.
  */
 var SessionButton = GObject.registerClass(
-    class Arc_Menu_SessionButton extends St.Button {
-    _init(menuLayout, accessible_name, icon_name, gicon) {
-        super._init({
-            reactive: true,
-            can_focus: true,
-            track_hover: true,
-            accessible_name: accessible_name ? accessible_name : "",
-            style_class: "system-button"
-        });
-        this.hasContextMenu = false;
-        this._menuLayout = menuLayout;
-        this.needsDestroy = true;
-        this._settings = this._menuLayout._settings;
-        this.toggleMenuOnClick = true;
-        this.tooltip = new Tooltip(this._menuLayout, this.actor, accessible_name);
-        this.tooltip.location = Constants.TooltipLocation.TOP_CENTERED;
-        this.tooltip.hide();
-        let iconSize = SMALL_ICON_SIZE;
-        this._icon = new St.Icon({
-            gicon: gicon ? gicon : Gio.icon_new_for_string(icon_name),
-            icon_size: 22
-        });
-        if(icon_name)
-            this._icon.fallback_icon_name = icon_name;
-        this.set_child(this._icon);
-        this.connect('key-focus-in', this._onKeyFocusIn.bind(this));
-        this.connect('destroy', () => this.needsDestroy = false);
-    }
-
-    get actor() {
-        return this;
-    }
+    class ArcMenuSessionButton extends St.Button {
+        _init(menuLayout, accessibleName, iconName, gicon) {
+            super._init({
+                reactive: true,
+                can_focus: true,
+                track_hover: true,
+                accessible_name: accessibleName ? accessibleName : '',
+                style_class: 'system-button',
+            });
+            this.hasContextMenu = false;
+            this._menuLayout = menuLayout;
+            this.needsDestroy = true;
+            this._settings = this._menuLayout._settings;
+            this.toggleMenuOnClick = true;
+            this.tooltip = new Tooltip(this._menuLayout, this.actor, accessibleName);
+            this.tooltip.location = Constants.TooltipLocation.TOP_CENTERED;
+            this.tooltip.hide();
+            this._icon = new St.Icon({
+                gicon: gicon ? gicon : Gio.icon_new_for_string(iconName),
+                icon_size: 22,
+            });
+            if (iconName)
+                this._icon.fallback_icon_name = iconName;
+            this.set_child(this._icon);
+            this.connect('key-focus-in', this._onKeyFocusIn.bind(this));
+            this.connect('destroy', () => {
+                this.needsDestroy = false;
+            });
+        }
 
-    _onKeyFocusIn(){
-        if(!this.actor.hover)
-            this._menuLayout._keyFocusIn(this.actor);
-        this.active = true;
-    }
+        get actor() {
+            return this;
+        }
 
-    vfunc_button_press_event(buttonEvent) {
-        const ret = super.vfunc_button_press_event(buttonEvent);
-        if(buttonEvent.button == 1){
-            this._setPopupTimeout();
+        _onKeyFocusIn() {
+            if (!this.actor.hover)
+                this._menuLayout._keyFocusIn(this.actor);
+            this.active = true;
         }
-        else if (buttonEvent.button == 3){
-            if(this.hasContextMenu){
-                this.popupContextMenu();
-                this.fake_release();
-                this.set_hover(true);
-                this._menuLayout.contextMenuManager.ignoreRelease();
+
+        vfunc_button_press_event(buttonEvent) {
+            const ret = super.vfunc_button_press_event(buttonEvent);
+            if (buttonEvent.button === 1) {
+                this._setPopupTimeout();
+            } else if (buttonEvent.button === 3) {
+                if (this.hasContextMenu) {
+                    this.popupContextMenu();
+                    this.fake_release();
+                    this.set_hover(true);
+                    this._menuLayout.contextMenuManager.ignoreRelease();
+                }
+                return Clutter.EVENT_STOP;
             }
-            return Clutter.EVENT_STOP;
+            return ret;
         }
-        return ret;
-    }
-    vfunc_touch_event(touchEvent) {
-        const ret = super.vfunc_touch_event(touchEvent);
-        if (touchEvent.type == Clutter.EventType.TOUCH_BEGIN)
-            this._setPopupTimeout();
 
-        return ret;
-    }
+        vfunc_touch_event(touchEvent) {
+            const ret = super.vfunc_touch_event(touchEvent);
+            if (touchEvent.type === Clutter.EventType.TOUCH_BEGIN)
+                this._setPopupTimeout();
 
-    vfunc_clicked(button) {
-        this._removeMenuTimeout();
-        if(this.toggleMenuOnClick)
-            this._menuLayout.arcMenu.toggle();
-        this.activate(button);
-    }
+            return ret;
+        }
 
-    vfunc_leave_event(crossingEvent) {
-        const ret = super.vfunc_leave_event(crossingEvent);
+        vfunc_clicked(button) {
+            this._removeMenuTimeout();
+            if (this.toggleMenuOnClick)
+                this._menuLayout.arcMenu.toggle();
+            this.activate(button);
+        }
 
-        this.fake_release();
-        this._removeMenuTimeout();
-        return ret;
-    }
+        vfunc_leave_event(crossingEvent) {
+            const ret = super.vfunc_leave_event(crossingEvent);
 
-    _setPopupTimeout(){
-        this._popupTimeoutId = GLib.timeout_add(GLib.PRIORITY_DEFAULT, 600, () => {
-            this._popupTimeoutId = null;
-            if(this.hasContextMenu && this._menuLayout.arcMenu.isOpen && !this._menuLayout._blockActivateEvent) {
-                this.popupContextMenu();
-                this.fake_release();
-                this.set_hover(true);
-                this._menuLayout.contextMenuManager.ignoreRelease();
+            this.fake_release();
+            this._removeMenuTimeout();
+            return ret;
+        }
+
+        _setPopupTimeout() {
+            this._popupTimeoutId = GLib.timeout_add(GLib.PRIORITY_DEFAULT, 600, () => {
+                this._popupTimeoutId = null;
+                if (this.hasContextMenu && this._menuLayout.arcMenu.isOpen && !this._menuLayout._blockActivateEvent) {
+                    this.popupContextMenu();
+                    this.fake_release();
+                    this.set_hover(true);
+                    this._menuLayout.contextMenuManager.ignoreRelease();
+                }
+                return GLib.SOURCE_REMOVE;
+            });
+        }
+
+        _removeMenuTimeout() {
+            if (this._popupTimeoutId) {
+                GLib.source_remove(this._popupTimeoutId);
+                this._popupTimeoutId = null;
             }
-            return GLib.SOURCE_REMOVE;
-        });
-    }
-    _removeMenuTimeout() {
-        if (this._popupTimeoutId) {
-            GLib.source_remove(this._popupTimeoutId);
-            this._popupTimeoutId = null;
         }
-    }
 
-    activate() {
-        global.log("Activate Not Implemented")
-    }
-});
+        activate() {
+            global.log('Activate Not Implemented');
+        }
+    });
 // Menu Place Button Shortcut item class
-var PlaceButtonItem = GObject.registerClass(class Arc_Menu_PlaceButtonItem extends SessionButton {
+var PlaceButtonItem = GObject.registerClass(class ArcMenuPlaceButtonItem extends SessionButton { // eslint-disable-line no-unused-vars
     _init(menuLayout, info) {
         super._init(menuLayout, _(info.name), info.icon, info.gicon ? info.gicon : null);
         this._menuLayout = menuLayout;
         this._info = info;
     }
+
     activate() {
         this._info.launch();
     }
 
 });
 
-var ShortcutButtonItem = GObject.registerClass(class Arc_Menu_ShortcutButtonItem extends SessionButton {
+var ShortcutButtonItem = GObject.registerClass(class ArcMenuShortcutButtonItem extends SessionButton { // eslint-disable-line no-unused-vars
     _init(menuLayout, name, icon, command) {
         let app = Shell.AppSystem.get_default().lookup_app(command);
-        if(app && icon === ''){
+        if (app && icon === '') {
             let appIcon = app.create_icon_texture(MEDIUM_ICON_SIZE);
-            if(appIcon instanceof St.Icon){
+            if (appIcon instanceof St.Icon)
                 icon = appIcon.gicon.to_string();
-            }
+
         }
         super._init(menuLayout, name, icon);
         this._command = command;
@@ -964,136 +955,152 @@ var ShortcutButtonItem = GObject.registerClass(class Arc_Menu_ShortcutButtonItem
         this._settings = this._menuLayout._settings;
         this.shouldShow = true;
 
-        //Check for default commands--------
-        if(this._command == "ArcMenu_Software"){
+        // Check for default commands--------
+        if (this._command === 'ArcMenu_Software') {
             let softwareManager = Utils.findSoftwareManager();
             this._command = softwareManager ? softwareManager : 'ArcMenu_unfound.desktop';
         }
-        if(command === "ArcMenu_Trash"){
+        if (command === 'ArcMenu_Trash') {
             this.trash = new Me.imports.placeDisplay.Trash(this);
-            this._command = "ArcMenu_Trash";
+            this._command = 'ArcMenu_Trash';
             this._app = this.trash.getApp();
             this._icon.gicon = this._app.create_icon_texture(MEDIUM_ICON_SIZE).gicon;
         }
-        if(!this._app)
+        if (!this._app)
             this._app = Shell.AppSystem.get_default().lookup_app(this._command);
-        this.hasContextMenu = this._app ? true : false;
-        if(this._command.endsWith(".desktop") && !Shell.AppSystem.get_default().lookup_app(this._command)){
+        this.hasContextMenu = !!this._app;
+        if (this._command.endsWith('.desktop') && !Shell.AppSystem.get_default().lookup_app(this._command))
             this.shouldShow = false;
-        }
+
     }
-    popupContextMenu(){
-        if(this.contextMenu == undefined){
+
+    popupContextMenu() {
+        if (this.contextMenu === undefined) {
             this.contextMenu = new ApplicationContextMenu(this.actor, this._app, this._menuLayout);
             this.contextMenu.actor.hide();
         }
         this.tooltip.hide();
-        if(!this.contextMenu.isOpen)
+        if (!this.contextMenu.isOpen)
             this.contextMenu.redisplay();
         this.contextMenu.toggle();
     }
+
     activate() {
-        if(this._app)
+        if (this._app) {
             this._app.open_new_window(-1);
-        else if(this._command === "ArcMenu_LogOut")
+        } else if (this._command === 'ArcMenu_LogOut') {
             this._menuLayout.systemActions.activateLogout();
-        else if(this._command === "ArcMenu_Lock"){
+        } else if (this._command === 'ArcMenu_Lock') {
             this._menuLayout.isRunning = false;
             this._menuLayout.systemActions.activateLockScreen();
-        }
-        else if(this._command === "ArcMenu_PowerOff")
+        } else if (this._command === 'ArcMenu_PowerOff') {
             this._menuLayout.systemActions.activatePowerOff();
-        else if(this._command === "ArcMenu_Restart")
-            this._menuLayout.systemActions.activateRestart ? this._menuLayout.systemActions.activateRestart() : this._menuLayout.systemActions.activatePowerOff();
-        else if(this._command === "ArcMenu_Suspend")
+        } else if (this._command === 'ArcMenu_Restart') {
+            if (this._menuLayout.systemActions.activateRestart)
+                this._menuLayout.systemActions.activateRestart();
+            else
+                this._menuLayout.systemActions.activatePowerOff();
+        } else if (this._command === 'ArcMenu_Suspend') {
             this._menuLayout.systemActions.activateSuspend();
-        else if(this._command === "ArcMenu_ActivitiesOverview")
+        } else if (this._command === 'ArcMenu_ActivitiesOverview') {
             Main.overview.show();
-        else if(this._command === "ArcMenu_RunCommand")
+        } else if (this._command === 'ArcMenu_RunCommand') {
             Main.openRunDialog();
-        else if(this._command === "ArcMenu_ShowAllApplications")
+        } else if (this._command === 'ArcMenu_ShowAllApplications') {
             Main.overview.viewSelector._toggleAppsPage();
-        else
+        } else {
             Util.spawnCommandLine(this._command);
+        }
     }
 });
 // Settings Button
-var SettingsButton = GObject.registerClass(class Arc_Menu_SettingsButton extends SessionButton {
+var SettingsButton = GObject.registerClass(class ArcMenuSettingsButton extends SessionButton { // eslint-disable-line no-unused-vars
     _init(menuLayout) {
-        super._init(menuLayout, _("Settings"), 'emblem-system-symbolic');
+        super._init(menuLayout, _('Settings'), 'emblem-system-symbolic');
     }
+
     activate() {
         Util.spawnCommandLine('gnome-control-center');
     }
 });
 
-var LeaveButton = GObject.registerClass(class Arc_Menu_LeaveButton extends SessionButton {
+var LeaveButton = GObject.registerClass(class ArcMenuLeaveButton extends SessionButton { // eslint-disable-line no-unused-vars
     _init(menuLayout) {
-        super._init(menuLayout, _("Leave"), 'system-shutdown-symbolic');
+        super._init(menuLayout, _('Leave'), 'system-shutdown-symbolic');
         this.toggleMenuOnClick = false;
     }
+
     activate() {
         this._menuLayout.toggleLeaveMenu();
     }
 });
 
 // User Button
-var CurrentUserButton = GObject.registerClass(class Arc_Menu_CurrentUserButton extends SessionButton {
+var CurrentUserButton = GObject.registerClass(class ArcMenuCurrentUserButton extends SessionButton { // eslint-disable-line no-unused-vars
     _init(menuLayout) {
         super._init(menuLayout, GLib.get_real_name(), 'system-users-symbolic');
     }
+
     activate() {
-        Util.spawnCommandLine("gnome-control-center user-accounts");
+        Util.spawnCommandLine('gnome-control-center user-accounts');
     }
 });
 
-var PowerButton = GObject.registerClass(class Arc_Menu_PowerButton extends SessionButton {
+var PowerButton = GObject.registerClass(class ArcMenuPowerButton extends SessionButton { // eslint-disable-line no-unused-vars
     _init(menuLayout) {
-        super._init(menuLayout, _("Power Off"), 'system-shutdown-symbolic');
+        super._init(menuLayout, _('Power Off'), 'system-shutdown-symbolic');
     }
+
     activate() {
         this._menuLayout.systemActions.activatePowerOff();
     }
 });
 
-var RestartButton = GObject.registerClass(class Arc_Menu_RestartButton extends SessionButton {
+var RestartButton = GObject.registerClass(class ArcMenuRestartButton extends SessionButton { // eslint-disable-line no-unused-vars
     _init(menuLayout) {
-        super._init(menuLayout, _("Restart"), Me.path + Constants.RESTART_ICON.Path);
+        super._init(menuLayout, _('Restart'), Me.path + Constants.RESTART_ICON.Path);
     }
+
     activate() {
-        this._menuLayout.systemActions.activateRestart ? this._menuLayout.systemActions.activateRestart() : this._menuLayout.systemActions.activatePowerOff();
+        if (this._menuLayout.systemActions.activateRestart)
+            this._menuLayout.systemActions.activateRestart();
+        else
+            this._menuLayout.systemActions.activatePowerOff();
     }
 });
 
-var LogoutButton = GObject.registerClass(class Arc_Menu_LogoutButton extends SessionButton {
+var LogoutButton = GObject.registerClass(class ArcMenuLogoutButton extends SessionButton { // eslint-disable-line no-unused-vars
     _init(menuLayout) {
-        super._init(menuLayout, _("Log Out"), 'application-exit-symbolic');
+        super._init(menuLayout, _('Log Out'), 'application-exit-symbolic');
     }
+
     activate() {
         this._menuLayout.systemActions.activateLogout();
     }
 });
 
-var SuspendButton = GObject.registerClass(class Arc_Menu_SuspendButton extends SessionButton {
+var SuspendButton = GObject.registerClass(class ArcMenuSuspendButton extends SessionButton { // eslint-disable-line no-unused-vars
     _init(menuLayout) {
-        super._init(menuLayout, _("Suspend"), 'media-playback-pause-symbolic');
+        super._init(menuLayout, _('Suspend'), 'media-playback-pause-symbolic');
     }
+
     activate() {
         this._menuLayout.systemActions.activateSuspend();
     }
 });
 
-var LockButton = GObject.registerClass(class Arc_Menu_LockButton extends SessionButton {
+var LockButton = GObject.registerClass(class ArcMenuLockButton extends SessionButton { // eslint-disable-line no-unused-vars
     _init(menuLayout) {
-        super._init(menuLayout, _("Lock"), 'changes-prevent-symbolic');
+        super._init(menuLayout, _('Lock'), 'changes-prevent-symbolic');
     }
+
     activate() {
         this._menuLayout.isRunning = false;
         this._menuLayout.systemActions.activateLockScreen();
     }
 });
 
-var PlasmaPowerItem = GObject.registerClass(class Arc_Menu_PlasmaPowerItem extends ArcMenuPopupBaseMenuItem{
+var PlasmaPowerItem = GObject.registerClass(class ArcMenuPlasmaPowerItem extends ArcMenuPopupBaseMenuItem { // eslint-disable-line no-unused-vars
     _init(menuLayout, type, title, icon) {
         super._init(menuLayout);
         this.type = type;
@@ -1108,93 +1115,98 @@ var PlasmaPowerItem = GObject.registerClass(class Arc_Menu_PlasmaPowerItem exten
         this.label = new St.Label({
             text: _(title),
             y_expand: false,
-            y_align: Clutter.ActorAlign.CENTER
+            y_align: Clutter.ActorAlign.CENTER,
         });
 
         this.box.add_actor(this._icon);
         this.box.add_actor(this.label);
     }
 
-    activate(event){
-        if(this.type === Constants.PowerType.POWEROFF)
+    activate(event) {
+        if (this.type === Constants.PowerType.POWEROFF)
             this._menuLayout.systemActions.activatePowerOff();
-        if(this.type === Constants.PowerType.RESTART)
-            this._menuLayout.systemActions.activateRestart ? this._menuLayout.systemActions.activateRestart() : this._menuLayout.systemActions.activatePowerOff();
-        if(this.type === Constants.PowerType.LOCK){
+        if (this.type === Constants.PowerType.RESTART) {
+            if (this._menuLayout.systemActions.activateRestart)
+                this._menuLayout.systemActions.activateRestart();
+            else
+                this._menuLayout.systemActions.activatePowerOff();
+        }
+        if (this.type === Constants.PowerType.LOCK) {
             this._menuLayout.isRunning = false;
             this._menuLayout.systemActions.activateLockScreen();
         }
-        if(this.type === Constants.PowerType.LOGOUT)
+        if (this.type === Constants.PowerType.LOGOUT)
             this._menuLayout.systemActions.activateLogout();
-        if(this.type === Constants.PowerType.SUSPEND)
+        if (this.type === Constants.PowerType.SUSPEND)
             this._menuLayout.systemActions.activateSuspend();
         super.activate(event);
     }
 });
 
 // Menu shortcut item class
-var ShortcutMenuItem = GObject.registerClass(class Arc_Menu_ShortcutMenuItem extends ArcMenuPopupBaseMenuItem{
+var ShortcutMenuItem = GObject.registerClass(class ArcMenuShortcutMenuItem extends ArcMenuPopupBaseMenuItem { // eslint-disable-line no-unused-vars
     _init(menuLayout, name, icon, command) {
         super._init(menuLayout);
         this._menuLayout = menuLayout;
         this._settings = this._menuLayout._settings;
         this._command = command;
         this.isGridIcon = false;
-        //Check for default commands--------
-        if(this._command == "ArcMenu_Software"){
+        // Check for default commands--------
+        if (this._command === 'ArcMenu_Software') {
             let softwareManager = Utils.findSoftwareManager();
             this._command = softwareManager ? softwareManager : 'ArcMenu_unfound.desktop';
-        }
-        else if(this._command === "ArcMenu_Trash"){
+        } else if (this._command === 'ArcMenu_Trash') {
             this.trash = new Me.imports.placeDisplay.Trash(this);
-            this._command = "ArcMenu_Trash";
+            this._command = 'ArcMenu_Trash';
             this._app = this.trash.getApp();
         }
-        if(!this._app)
+        if (!this._app)
             this._app = Shell.AppSystem.get_default().lookup_app(this._command);
 
-        if(this._app && icon === ''){
+        if (this._app && icon === '') {
             let appIcon = this._app.create_icon_texture(MEDIUM_ICON_SIZE);
-            if(appIcon instanceof St.Icon){
+            if (appIcon instanceof St.Icon)
                 icon = appIcon.gicon.to_string();
-            }
+
         }
 
-        this.hasContextMenu = this._app ? true : false;
-        //---------
+        this.hasContextMenu = !!this._app;
+        // ---------
         this._icon = new St.Icon({
             icon_name: icon,
             gicon: Gio.icon_new_for_string(icon),
             style_class: 'popup-menu-icon',
-            icon_size: SMALL_ICON_SIZE
+            icon_size: SMALL_ICON_SIZE,
         });
         this.box.add_child(this._icon);
         this.label = new St.Label({
             text: _(name), y_expand: true,
-            y_align: Clutter.ActorAlign.CENTER
+            y_align: Clutter.ActorAlign.CENTER,
         });
         this.box.add_child(this.label);
 
         this.setShouldShow();
     }
-    popupContextMenu(){
-        if(this._app && this.contextMenu == undefined){
+
+    popupContextMenu() {
+        if (this._app && this.contextMenu === undefined) {
             this.contextMenu = new ApplicationContextMenu(this.actor, this._app, this._menuLayout);
-            if(this.isGridIcon)
+            if (this.isGridIcon)
                 this.contextMenu.centerBoxPointerPosition();
-            if(this._path)
+            if (this._path)
                 this.contextMenu.path = this._path;
         }
-        if(this.contextMenu != undefined){
-            if(this.tooltip!=undefined)
+        if (this.contextMenu !== undefined) {
+            if (this.tooltip !== undefined)
                 this.tooltip.hide();
-            if(!this.contextMenu.isOpen){
+            if (!this.contextMenu.isOpen)
                 this.contextMenu.redisplay();
-            }
+
             this.contextMenu.toggle();
         }
     }
-    setAsGridIcon(){
+
+    setAsGridIcon() {
         this.isGridIcon = true;
         this.tooltipLocation = Constants.TooltipLocation.BOTTOM_CENTERED;
         this.box.vertical = true;
@@ -1210,42 +1222,48 @@ var ShortcutMenuItem = GObject.registerClass(class Arc_Menu_ShortcutMenuItem ext
         this._iconSize = 36;
         this._icon.icon_size = this._iconSize;
     }
+
     activate(event) {
         this._menuLayout.arcMenu.toggle();
-        if(this._command === "ArcMenu_LogOut")
+        if (this._command === 'ArcMenu_LogOut') {
             this._menuLayout.systemActions.activateLogout();
-        else if(this._command === "ArcMenu_Lock"){
+        } else if (this._command === 'ArcMenu_Lock') {
             this._menuLayout.isRunning = false;
             this._menuLayout.systemActions.activateLockScreen();
-        }
-        else if(this._command === "ArcMenu_PowerOff")
+        } else if (this._command === 'ArcMenu_PowerOff') {
             this._menuLayout.systemActions.activatePowerOff();
-        else if(this._command === "ArcMenu_Restart")
-            this._menuLayout.systemActions.activateRestart ? this._menuLayout.systemActions.activateRestart() : this._menuLayout.systemActions.activatePowerOff();
-        else if(this._command === "ArcMenu_Suspend")
+        } else if (this._command === 'ArcMenu_Restart') {
+            if (this._menuLayout.systemActions.activateRestart)
+                this._menuLayout.systemActions.activateRestart();
+            else
+                this._menuLayout.systemActions.activatePowerOff();
+        } else if (this._command === 'ArcMenu_Suspend') {
             this._menuLayout.systemActions.activateSuspend();
-        else if(this._command === "ArcMenu_ActivitiesOverview")
+        } else if (this._command === 'ArcMenu_ActivitiesOverview') {
             Main.overview.show();
-        else if(this._command === "ArcMenu_RunCommand")
+        } else if (this._command === 'ArcMenu_RunCommand') {
             Main.openRunDialog();
-        else if(this._command === "ArcMenu_ShowAllApplications")
+        } else if (this._command === 'ArcMenu_ShowAllApplications') {
             Main.overview.viewSelector._toggleAppsPage();
-        else if(this._app)
+        } else if (this._app) {
             this._app.open_new_window(-1);
-        else
+        } else {
             Util.spawnCommandLine(this._command);
+        }
         super.activate(event);
     }
-    _updateIcon(){
+
+    _updateIcon() {
         this._icon.icon_size = SMALL_ICON_SIZE;
     }
-    setIconSizeLarge(){
+
+    setIconSizeLarge() {
         this._icon.icon_size = MEDIUM_ICON_SIZE;
     }
 });
 
 // Menu item which displays the current user
-var UserMenuItem = GObject.registerClass(class Arc_Menu_UserMenuItem extends ArcMenuPopupBaseMenuItem{
+var UserMenuItem = GObject.registerClass(class ArcMenuUserMenuItem extends ArcMenuPopupBaseMenuItem { // eslint-disable-line no-unused-vars
     _init(menuLayout, userAvatarSize) {
         super._init(menuLayout);
         this._menuLayout = menuLayout;
@@ -1253,16 +1271,16 @@ var UserMenuItem = GObject.registerClass(class Arc_Menu_UserMenuItem extends Arc
         this._user = AccountsService.UserManager.get_default().get_user(username);
         this.iconBin =  new St.Bin({
             style_class: 'menu-user-avatar',
-            y_align: Clutter.ActorAlign.CENTER
+            y_align: Clutter.ActorAlign.CENTER,
         });
 
         this._userAvatarSize = userAvatarSize ? userAvatarSize : USER_AVATAR_SIZE;
 
-        this.iconBin.style = "width: "+this._userAvatarSize +"px; height: "+this._userAvatarSize +"px;";
+        this.iconBin.style = `width: ${this._userAvatarSize}px; height: ${this._userAvatarSize}px;`;
         this.box.add_actor(this.iconBin);
         this._userLabel = new St.Label({
             text: GLib.get_real_name(),
-            y_align: Clutter.ActorAlign.CENTER
+            y_align: Clutter.ActorAlign.CENTER,
         });
         this.box.add_actor(this._userLabel);
         this._userLoadedId = this._user.connect('notify::is-loaded', this._onUserChanged.bind(this));
@@ -1270,42 +1288,45 @@ var UserMenuItem = GObject.registerClass(class Arc_Menu_UserMenuItem extends Arc
         this.actor.connect('destroy', this._onDestroy.bind(this));
         this._onUserChanged();
     }
+
     activate(event) {
-        Util.spawnCommandLine("gnome-control-center user-accounts");
+        Util.spawnCommandLine('gnome-control-center user-accounts');
         this._menuLayout.arcMenu.toggle();
         super.activate(event);
     }
+
     _onUserChanged() {
         if (this._user.is_loaded) {
             this._userLabel.set_text(this._user.get_real_name());
             let iconFileName = this._user.get_icon_file();
-            if (iconFileName && !GLib.file_test(iconFileName ,GLib.FileTest.EXISTS))
+            if (iconFileName && !GLib.file_test(iconFileName, GLib.FileTest.EXISTS))
                 iconFileName = null;
             if (iconFileName) {
                 this.iconBin.child = null;
-                this.iconBin.style = 'background-image: url("%s");'.format(iconFileName) + "width: "+this._userAvatarSize +"px; height: "+this._userAvatarSize +"px;";
+                this.iconBin.style = `${'background-image: url("%s");'.format(iconFileName)}width: ${this._userAvatarSize}px; height: ${this._userAvatarSize}px;`;
             } else {
                 this.iconBin.style = null;
                 this.iconBin.child = new St.Icon({
                     icon_name: 'avatar-default-symbolic',
-                    icon_size: this._userAvatarSize
+                    icon_size: this._userAvatarSize,
                 });
             }
         }
     }
+
     _onDestroy() {
-        if (this._userLoadedId != 0) {
+        if (this._userLoadedId !== 0) {
             this._user.disconnect(this._userLoadedId);
             this._userLoadedId = 0;
         }
-        if (this._userChangedId != 0) {
+        if (this._userChangedId !== 0) {
             this._user.disconnect(this._userChangedId);
             this._userChangedId = 0;
         }
     }
 });
 
-var UserMenuIcon = class Arc_Menu_UserMenuIcon{
+var UserMenuIcon = class ArcMenuUserMenuIcon { // eslint-disable-line no-unused-vars
     constructor(menuLayout, size) {
         this._menuLayout = menuLayout;
         this._size = size;
@@ -1313,45 +1334,48 @@ var UserMenuIcon = class Arc_Menu_UserMenuIcon{
         this._user = AccountsService.UserManager.get_default().get_user(username);
         this.actor = new St.Bin({
             style_class: 'menu-user-avatar',
-            track_hover:true,
-            reactive: true
+            track_hover: true,
+            reactive: true,
         });
-        this.actor.style = "width: " + this._size + "px; height: " + this._size + "px;";
+        this.actor.style = `width: ${this._size}px; height: ${this._size}px;`;
         this._userLoadedId = this._user.connect('notify::is-loaded', this._onUserChanged.bind(this));
         this._userChangedId = this._user.connect('changed', this._onUserChanged.bind(this));
         this.actor.connect('destroy', this._onDestroy.bind(this));
         this._onUserChanged();
-        this.actor.connect('notify::hover',this._onHover.bind(this));
+        this.actor.connect('notify::hover', this._onHover.bind(this));
     }
+
     _onHover() {
-        if(this.tooltip==undefined && this.actor.hover){
+        if (this.tooltip === undefined && this.actor.hover) {
             this.tooltip = new Tooltip(this._menuLayout, this.actor, GLib.get_real_name());
             this.tooltip.location = Constants.TooltipLocation.BOTTOM_CENTERED;
             this.tooltip._onHover();
         }
     }
+
     _onUserChanged() {
         if (this._user.is_loaded) {
             let iconFileName = this._user.get_icon_file();
-            if (iconFileName && !GLib.file_test(iconFileName ,GLib.FileTest.EXISTS))
+            if (iconFileName && !GLib.file_test(iconFileName, GLib.FileTest.EXISTS))
                 iconFileName = null;
             if (iconFileName) {
                 this.actor.child = null;
-                this.actor.style = 'background-image: url("%s");'.format(iconFileName) + "width: " + this._size + "px; height: " + this._size + "px;";
+                this.actor.style = `${'background-image: url("%s");'.format(iconFileName)}width: ${this._size}px; height: ${this._size}px;`;
             } else {
                 this.actor.style = null;
                 this.actor.child = new St.Icon({ icon_name: 'avatar-default-symbolic',
-                                                    icon_size: this._size});
+                    icon_size: this._size });
             }
         }
 
     }
+
     _onDestroy() {
-        if (this._userLoadedId != 0) {
+        if (this._userLoadedId !== 0) {
             this._user.disconnect(this._userLoadedId);
             this._userLoadedId = 0;
         }
-        if (this._userChangedId != 0) {
+        if (this._userChangedId !== 0) {
             this._user.disconnect(this._userChangedId);
             this._userChangedId = 0;
         }
@@ -1359,9 +1383,9 @@ var UserMenuIcon = class Arc_Menu_UserMenuIcon{
 };
 
 // Menu pinned apps/favorites item class
-var FavoritesMenuItem = GObject.registerClass({
-    Signals: {  'saveSettings': {}, },
-}, class Arc_Menu_FavoritesMenuItem extends ArcMenuPopupBaseMenuItem{
+var FavoritesMenuItem = GObject.registerClass({ // eslint-disable-line no-unused-vars
+    Signals: {  'saveSettings': {} },
+}, class ArcMenuFavoritesMenuItem extends ArcMenuPopupBaseMenuItem {
     _init(menuLayout, name, icon, command) {
         super._init(menuLayout);
         this._menuLayout = menuLayout;
@@ -1373,44 +1397,43 @@ var FavoritesMenuItem = GObject.registerClass({
         this._app = Shell.AppSystem.get_default().lookup_app(this._command);
         this.hasContextMenu = true;
 
-        //Modifiy the Default Pinned Apps---------------------
-        if(this._name == "ArcMenu Settings"){
-            this._name = _("ArcMenu Settings");
-        }
-        else if(this._name == "Terminal"){
-            this._name = _("Terminal");
-        }
-        if(this._iconPath === "ArcMenu_ArcMenuIcon" || this._iconPath ===  Me.path + '/media/icons/arc-menu-symbolic.svg'){
-            this._iconString = this._iconPath = Me.path + '/media/icons/menu_icons/arc-menu-symbolic.svg';
-        }
-        //-------------------------------------------------------
+        // Modifiy the Default Pinned Apps---------------------
+        if (this._name === 'ArcMenu Settings')
+            this._name = _('ArcMenu Settings');
+        else if (this._name === 'Terminal')
+            this._name = _('Terminal');
 
-        if(this._app && this._iconPath === ''){
+        if (this._iconPath === 'ArcMenu_ArcMenuIcon' || this._iconPath ===  `${Me.path}/media/icons/arc-menu-symbolic.svg`)
+            this._iconString = this._iconPath = `${Me.path}/media/icons/menu_icons/arc-menu-symbolic.svg`;
+
+        // -------------------------------------------------------
+
+        if (this._app && this._iconPath === '') {
             let appIcon = this._app.create_icon_texture(MEDIUM_ICON_SIZE);
-            if(appIcon instanceof St.Icon){
+            if (appIcon instanceof St.Icon) {
                 this._iconString = appIcon.gicon ? appIcon.gicon.to_string() : appIcon.fallback_icon_name;
-                if(!this._iconString)
-                    this._iconString = "";
+                if (!this._iconString)
+                    this._iconString = '';
             }
         }
 
-        this.actor.style = "width: 80px; height: 95px; text-align: center; padding: 5px; spacing: 0px;";
+        this.actor.style = 'width: 80px; height: 95px; text-align: center; padding: 5px; spacing: 0px;';
         this.actor.style_class = null;
-        this.box.style = "width: 80px; padding: 0px; margin: 0px; spacing: 5px; font-size: 14px;";
+        this.box.style = 'width: 80px; padding: 0px; margin: 0px; spacing: 5px; font-size: 14px;';
 
         this._icon = new St.Icon({
             style_class: 'favorites-menu-item',
             track_hover: true,
             reactive: true,
             gicon: Gio.icon_new_for_string(this._iconString),
-            icon_size: 55
-        })
+            icon_size: 55,
+        });
         this.box.add_child(this._icon);
 
         this.label = new St.Label({
             text: _(this._name),
             y_expand: true,
-            y_align: Clutter.ActorAlign.CENTER
+            y_align: Clutter.ActorAlign.CENTER,
         });
         this.box.add_child(this.label);
 
@@ -1426,62 +1449,64 @@ var FavoritesMenuItem = GObject.registerClass({
         this.remove_child(this._ornamentLabel);
         this.setShouldShow();
     }
+
     _updateIcon() {
         this._icon.icon_size = 36;
     }
-    popupContextMenu(){
-        if(this.contextMenu == undefined){
+
+    popupContextMenu() {
+        if (this.contextMenu === undefined) {
             let app = this._app ? this._app : this._command;
             this.contextMenu = new ApplicationContextMenu(this.actor, app, this._menuLayout);
             this.contextMenu.centerBoxPointerPosition();
             this.contextMenu.isPinnedApp = true;
         }
-        if(this.tooltip!=undefined)
+        if (this.tooltip !== undefined)
             this.tooltip.hide();
-        if(!this.contextMenu.isOpen)
+        if (!this.contextMenu.isOpen)
             this.contextMenu.redisplay();
         this.contextMenu.toggle();
     }
 
-   _onDragBegin() {
-        if(this._menuButton.tooltipShowingID){
+    _onDragBegin() {
+        if (this._menuButton.tooltipShowingID) {
             GLib.source_remove(this._menuButton.tooltipShowingID);
             this._menuButton.tooltipShowingID = null;
             this._menuButton.tooltipShowing = false;
         }
-        if(this.tooltip){
+        if (this.tooltip) {
             this.tooltip.hide();
             this._menuButton.tooltipShowing = false;
         }
 
-        if(this.contextMenu && this.contextMenu.isOpen)
+        if (this.contextMenu && this.contextMenu.isOpen)
             this.contextMenu.toggle();
 
-        if(this._popupTimeoutId){
+        if (this._popupTimeoutId) {
             GLib.source_remove(this._popupTimeoutId);
             this._popupTimeoutId = null;
         }
 
         this._dragMonitor = {
-            dragMotion: (this, this._onDragMotion.bind(this))
+            dragMotion: (this, this._onDragMotion.bind(this)),
         };
 
         this._parentBox = this.actor.get_parent();
         DND.addDragMonitor(this._dragMonitor);
         DND.SNAP_BACK_ANIMATION_TIME = 0;
 
-        this.dragStartY = (this._draggable._dragStartY);
+        this.dragStartY = this._draggable._dragStartY;
         this._emptyDropTarget = new Dash.EmptyDropTargetItem();
         this._emptyDropTarget.setChild(new St.Bin({ style_class: 'arc-empty-dash-drop-target' }));
 
         let p = this._parentBox.get_transformed_position();
-        this.posY= p[1];
+        this.posY = p[1];
 
         this.rowHeight = this._parentBox.get_child_at_index(0).height;
 
         this.startIndex = 0;
-        for(let i = 0; i < this._parentBox.get_children().length; i++){
-            if(this.actor == this._parentBox.get_child_at_index(i))
+        for (let i = 0; i < this._parentBox.get_children().length; i++) {
+            if (this.actor === this._parentBox.get_child_at_index(i))
                 this.startIndex = i;
         }
         this._parentBox.insert_child_at_index(this._emptyDropTarget, this.startIndex);
@@ -1489,56 +1514,62 @@ var FavoritesMenuItem = GObject.registerClass({
         Main.overview.beginItemDrag(this);
         this._emptyDropTarget.show(true);
     }
-    _onDragMotion(dragEvent) {
-        this.newIndex = Math.floor((this._draggable._dragY - this.posY) / (this.rowHeight));
 
-        if(this.newIndex > this._parentBox.get_children().length -1)
-            this.newIndex = this._parentBox.get_children().length -1;
-        if(this.newIndex < 0)
+    _onDragMotion(/* dragEvent*/) {
+        this.newIndex = Math.floor((this._draggable._dragY - this.posY) / this.rowHeight);
+
+        if (this.newIndex > this._parentBox.get_children().length - 1)
+            this.newIndex = this._parentBox.get_children().length - 1;
+        if (this.newIndex < 0)
             this.newIndex = 0;
-        if(this._parentBox.get_child_at_index(this.newIndex) != this._emptyDropTarget)
+        if (this._parentBox.get_child_at_index(this.newIndex) !== this._emptyDropTarget)
             this._parentBox.set_child_at_index(this._emptyDropTarget, this.newIndex);
 
         return DND.DragMotionResult.CONTINUE;
     }
+
     _onDragCancelled() {
         Main.overview.cancelledItemDrag(this);
     }
+
     _onDragEnd() {
         this._parentBox.remove_child(this._emptyDropTarget);
         let index = this.newIndex;
-        if(index > this.startIndex)
+        if (index > this.startIndex)
             index--;
-        if(index > this._parentBox.get_children().length -1)
-            index = this._parentBox.get_children().length -1;
-        if(index < 0)
+        if (index > this._parentBox.get_children().length - 1)
+            index = this._parentBox.get_children().length - 1;
+        if (index < 0)
             index = 0;
-        if(index != this.startIndex){
-            this._parentBox.set_child_at_index(this.actor,index);
+        if (index !== this.startIndex) {
+            this._parentBox.set_child_at_index(this.actor, index);
             let temp = this._menuLayout.favoritesArray[this.startIndex];
-            this._menuLayout.favoritesArray.splice(this.startIndex,1);
-            this._menuLayout.favoritesArray.splice(index,0,temp);
+            this._menuLayout.favoritesArray.splice(this.startIndex, 1);
+            this._menuLayout.favoritesArray.splice(index, 0, temp);
         }
         Main.overview.endItemDrag(this);
         DND.removeDragMonitor(this._dragMonitor);
         this.emit('saveSettings');
     }
+
     getDragActor() {
         let icon = new St.Icon({
             gicon: Gio.icon_new_for_string(this._iconString),
             style_class: 'popup-menu-icon',
-            icon_size: 40
+            icon_size: 40,
         });
         icon.remove_style_class_name('arc-menu-action');
         return icon;
     }
+
     getDragActorSource() {
         return this.actor;
     }
+
     activate(event) {
-        if(this._app)
+        if (this._app)
             this._app.open_new_window(-1);
-        else if(this._command === "ArcMenu_ShowAllApplications")
+        else if (this._command === 'ArcMenu_ShowAllApplications')
             Main.overview.viewSelector._toggleAppsPage();
         else
             Util.spawnCommandLine(this._command);
@@ -1547,23 +1578,27 @@ var FavoritesMenuItem = GObject.registerClass({
         super.activate(event);
         this._icon.remove_style_pseudo_class('active');
     }
+
     vfunc_key_focus_in() {
         this._icon.add_style_pseudo_class('focus');
     }
+
     vfunc_key_focus_out() {
         this._icon.remove_style_pseudo_class('focus');
     }
+
     vfunc_button_press_event() {
         this._icon.add_style_pseudo_class('active');
 
         let event = Clutter.get_current_event();
         this.pressed = true;
-        if (event.get_button() == 1) {
+        if (event.get_button() === 1)
             this._menuLayout._blockActivateEvent = false;
-        }
+
         this.add_style_pseudo_class('active');
         return Clutter.EVENT_PROPAGATE;
     }
+
     vfunc_button_release_event() {
         this._icon.remove_style_pseudo_class('active');
         return super.vfunc_button_release_event();
@@ -1573,13 +1608,14 @@ var FavoritesMenuItem = GObject.registerClass({
         this._icon.remove_style_pseudo_class('active');
         return super.vfunc_leave_event(crossingEvent);
     }
+
     _onHover() {
         super._onHover();
         this._icon.remove_style_pseudo_class('focus');
     }
 });
 
-var ApplicationMenuItem = GObject.registerClass(class Arc_Menu_ApplicationMenuItem extends ArcMenuPopupBaseMenuItem {
+var ApplicationMenuItem = GObject.registerClass(class ArcMenuApplicationMenuItem extends ArcMenuPopupBaseMenuItem { // eslint-disable-line no-unused-vars
     _init(menuLayout, app, isIconGrid = false) {
         super._init(menuLayout);
         this._app = app;
@@ -1588,30 +1624,30 @@ var ApplicationMenuItem = GObject.registerClass(class Arc_Menu_ApplicationMenuIt
         this._isIconGrid = isIconGrid;
         this.hasContextMenu = true;
         let recentApps = this._settings.get_strv('recently-installed-apps');
-        this.isRecentlyInstalled = recentApps.some( (app) => app === this._app.get_id());
+        this.isRecentlyInstalled = recentApps.some(element => element === this._app.get_id());
 
         this._iconBin = new St.Bin();
         this.box.add_child(this._iconBin);
         this.label = new St.Label({
             text: app.get_name(),
             y_expand: true,
-            y_align: Clutter.ActorAlign.CENTER
+            y_align: Clutter.ActorAlign.CENTER,
         });
-        this.label.style = "font-size: 14px;";
+        this.label.style = 'font-size: 14px;';
         this.box.add_child(this.label);
-        this.box.style = "spacing: 12px; height: 43px;";
-        this.actor.style_class = "app-menu-item";
+        this.box.style = 'spacing: 12px; height: 43px;';
+        this.actor.style_class = 'app-menu-item';
 
         this.box.label_actor = this.label;
 
         if (this.isRecentlyInstalled) {
             this._indicator = new St.Label({
                 text: _('New'),
-                style_class: "arc-menu-menu-item-text-indicator",
-                style: "border-radius: 15px; margin: 0px; padding: 0px 10px;",
+                style_class: 'arc-menu-menu-item-text-indicator',
+                style: 'border-radius: 15px; margin: 0px; padding: 0px 10px;',
                 x_expand: true,
                 x_align: Clutter.ActorAlign.END,
-                y_align: Clutter.ActorAlign.CENTER
+                y_align: Clutter.ActorAlign.CENTER,
             });
             this.box.add_child(this._indicator);
         }
@@ -1640,14 +1676,14 @@ var ApplicationMenuItem = GObject.registerClass(class Arc_Menu_ApplicationMenuIt
         this._updateIcon();
     }
 
-    removeIndicator(){
-        if(this.isRecentlyInstalled){
+    removeIndicator() {
+        if (this.isRecentlyInstalled) {
             this.isRecentlyInstalled = false;
             let recentApps = this._settings.get_strv('recently-installed-apps');
             let index = recentApps.indexOf(this._app.get_id());
-            if(index > -1){
+            if (index > -1)
                 recentApps.splice(index, 1);
-            }
+
             this._settings.set_strv('recently-installed-apps', recentApps);
 
             this._indicator.hide();
@@ -1655,44 +1691,49 @@ var ApplicationMenuItem = GObject.registerClass(class Arc_Menu_ApplicationMenuIt
         }
     }
 
-    popupContextMenu(){
+    popupContextMenu() {
         this.removeIndicator();
-        if(this.contextMenu == undefined){
+        if (this.contextMenu === undefined) {
             this.contextMenu = new ApplicationContextMenu(this.actor, this._app, this._menuLayout);
-            if(this._isIconGrid)
+            if (this._isIconGrid)
                 this.contextMenu.centerBoxPointerPosition();
         }
-        if(this.tooltip!=undefined)
+        if (this.tooltip !== undefined)
             this.tooltip.hide();
-        if(!this.contextMenu.isOpen)
+        if (!this.contextMenu.isOpen)
             this.contextMenu.redisplay();
         this.contextMenu.toggle();
     }
-    get_app_id() {
+
+    getAppId() {
         return this._app.get_id();
     }
+
     _createIcon(iconSize) {
         return this._app.create_icon_texture(iconSize);
     }
+
     activate(event) {
         this.removeIndicator();
         this._app.open_new_window(-1);
         this._menuLayout.arcMenu.toggle();
         super.activate(event);
     }
+
     _onHover() {
         super._onHover();
         this.actor.remove_style_pseudo_class('focus');
     }
+
     grabKeyFocus() {
         this.actor.grab_key_focus();
     }
+
     _updateIcon() {
         if (this._isIconGrid) {
             let icon = this._app.create_icon_texture(36);
             this._iconBin.set_child(icon);
-        }
-        else {
+        } else {
             let icon = this._app.create_icon_texture(30);
             this._iconBin.set_child(icon);
         }
@@ -1700,25 +1741,25 @@ var ApplicationMenuItem = GObject.registerClass(class Arc_Menu_ApplicationMenuIt
 });
 
 // Menu Category item class
-var CategoryMenuItem = GObject.registerClass(class Arc_Menu_CategoryMenuItem extends ArcMenuPopupBaseMenuItem{
+var CategoryMenuItem = GObject.registerClass(class ArcMenuCategoryMenuItem extends ArcMenuPopupBaseMenuItem { // eslint-disable-line no-unused-vars
     _init(menuLayout, category) {
         super._init(menuLayout);
         this.appList = [];
         this._menuLayout = menuLayout;
         this._settings = this._menuLayout._settings;
         this._category = category;
-        this._name = "";
+        this._name = '';
 
         this._icon = new St.Icon({
             style_class: 'popup-menu-icon',
-            icon_size: MEDIUM_ICON_SIZE
+            icon_size: MEDIUM_ICON_SIZE,
         });
 
         let [name, gicon, iconName, fallbackIconName] = Utils.getCategoryDetails(this._category);
         this._name = _(name);
-        if(gicon)
+        if (gicon)
             this._icon.gicon = gicon;
-        else if(iconName)
+        else if (iconName)
             this._icon.icon_name = iconName;
         else
             this._icon.fallback_icon_name = fallbackIconName;
@@ -1728,11 +1769,11 @@ var CategoryMenuItem = GObject.registerClass(class Arc_Menu_CategoryMenuItem ext
         this.label = new St.Label({
             text: this._name,
             y_expand: true,
-            y_align: Clutter.ActorAlign.CENTER
+            y_align: Clutter.ActorAlign.CENTER,
         });
         this.box.add_child(this.label);
 
-        if(this.isRecentlyInstalled)
+        if (this.isRecentlyInstalled)
             this.setRecentlyInstalledIndicator(true);
 
         this._arrowIcon = new St.Icon({
@@ -1747,9 +1788,9 @@ var CategoryMenuItem = GObject.registerClass(class Arc_Menu_CategoryMenuItem ext
         this.box.label_actor = this.label;
     }
 
-    setRecentlyInstalledIndicator(shouldShow){
+    setRecentlyInstalledIndicator(shouldShow) {
         this.isRecentlyInstalled = shouldShow;
-        if(shouldShow){
+        if (shouldShow) {
             this._indicator = new St.Icon({
                 icon_name: 'message-indicator-symbolic',
                 style_class: 'arc-menu-menu-item-indicator',
@@ -1757,14 +1798,13 @@ var CategoryMenuItem = GObject.registerClass(class Arc_Menu_CategoryMenuItem ext
                 x_expand: true,
                 y_expand: false,
                 x_align: Clutter.ActorAlign.END,
-                y_align: Clutter.ActorAlign.CENTER
+                y_align: Clutter.ActorAlign.CENTER,
             });
             this.box.insert_child_at_index(this._indicator, this.box.get_n_children() - 1);
-            if(this._arrowIcon)
+            if (this._arrowIcon)
                 this._arrowIcon.x_expand = false;
-        }
-        else if(this._indicator && this.box.contains(this._indicator)){
-            if(this._arrowIcon)
+        } else if (this._indicator && this.box.contains(this._indicator)) {
+            if (this._arrowIcon)
                 this._arrowIcon.x_expand = true;
             this.box.remove_child(this._indicator);
         }
@@ -1772,17 +1812,19 @@ var CategoryMenuItem = GObject.registerClass(class Arc_Menu_CategoryMenuItem ext
 });
 
 // Place Info class
-var PlaceInfo = class Arc_Menu_PlaceInfo {
+var PlaceInfo = class ArcMenuPlaceInfo {
     constructor(file, name, icon) {
         this.file = file;
         this.name = name ? name : this._getFileName();
         this.icon = icon ? icon : null;
         this.gicon = icon ? null : this.getIcon();
     }
+
     launch(timestamp) {
         let launchContext = global.create_app_launch_context(timestamp, -1);
         Gio.AppInfo.launch_default_for_uri(this.file.get_uri(), launchContext);
     }
+
     getIcon() {
         try {
             let info = this.file.query_info('standard::symbolic-icon', 0, null);
@@ -1790,50 +1832,51 @@ var PlaceInfo = class Arc_Menu_PlaceInfo {
 
         } catch (e) {
             if (e instanceof Gio.IOErrorEnum) {
-                if (!this.file.is_native()) {
+                if (!this.file.is_native())
                     return new Gio.ThemedIcon({ name: 'folder-remote-symbolic' });
-                } else {
+                else
                     return new Gio.ThemedIcon({ name: 'folder-symbolic' });
-                }
+
             }
         }
     }
+
     _getFileName() {
         try {
             let info = this.file.query_info('standard::display-name', 0, null);
             return info.get_display_name();
         } catch (e) {
-            if (e instanceof Gio.IOErrorEnum) {
+            if (e instanceof Gio.IOErrorEnum)
                 return this.file.get_basename();
-            }
+
         }
     }
 };
 Signals.addSignalMethods(PlaceInfo.prototype);
 
 // Menu Place Shortcut item class
-var PlaceMenuItem = GObject.registerClass(class Arc_Menu_PlaceMenuItem extends ArcMenuPopupBaseMenuItem{
+var PlaceMenuItem = GObject.registerClass(class ArcMenuPlaceMenuItem extends ArcMenuPopupBaseMenuItem { // eslint-disable-line no-unused-vars
     _init(menuLayout, info) {
         super._init(menuLayout);
         this._menuLayout = menuLayout;
         this._info = info;
         this._icon = new St.Icon({
             gicon: info.gicon ? info.gicon : Gio.icon_new_for_string(info.icon),
-            icon_size: SMALL_ICON_SIZE
+            icon_size: SMALL_ICON_SIZE,
         });
 
         this.box.add_child(this._icon);
         this.label = new St.Label({
             text: _(info.name),
             y_expand: true,
-            y_align: Clutter.ActorAlign.CENTER
+            y_align: Clutter.ActorAlign.CENTER,
         });
         this.box.add_child(this.label);
         this._changedId = this._info.connect('changed', this._propertiesChanged.bind(this));
         this.connect('destroy', this._onDestroy.bind(this));
     }
 
-    setIconSizeLarge(){
+    setIconSizeLarge() {
         this._icon.icon_size = MEDIUM_ICON_SIZE;
     }
 
@@ -1847,11 +1890,13 @@ var PlaceMenuItem = GObject.registerClass(class Arc_Menu_PlaceMenuItem extends A
             this._changedId = 0;
         }
     }
+
     activate(event) {
         this._info.launch(event.get_time());
         this._menuLayout.arcMenu.toggle();
         super.activate(event);
     }
+
     _propertiesChanged(info) {
         this._icon.gicon = info.icon;
         this.label.text = info.name;
@@ -1861,11 +1906,11 @@ var PlaceMenuItem = GObject.registerClass(class Arc_Menu_PlaceMenuItem extends A
 /**
  * This class is responsible for the appearance of the menu button.
  */
-var MenuButtonWidget = class Arc_Menu_MenuButtonWidget{
+var MenuButtonWidget = class ArcMenuMenuButtonWidget { // eslint-disable-line no-unused-vars
     constructor() {
         this.actor = new St.BoxLayout({
             style_class: 'panel-status-menu-box',
-            pack_start: false
+            pack_start: false,
         });
         this._arrowIcon = PopupMenu.arrowIcon(St.Side.BOTTOM);
         this._arrowIcon.add_style_class_name('arc-menu-arrow');
@@ -1873,11 +1918,11 @@ var MenuButtonWidget = class Arc_Menu_MenuButtonWidget{
         this._icon = new St.Icon({
             icon_name: 'start-here-symbolic',
             style_class: 'arc-menu-icon',
-            track_hover:true,
+            track_hover: true,
             reactive: true,
         });
         this._label = new St.Label({
-            text: _("Applications"),
+            text: _('Applications'),
             y_expand: true,
             style_class: 'arc-menu-text',
             y_align: Clutter.ActorAlign.CENTER,
@@ -1889,20 +1934,19 @@ var MenuButtonWidget = class Arc_Menu_MenuButtonWidget{
 
     }
 
-    setActiveStylePseudoClass(enable){
-        if(enable){
+    setActiveStylePseudoClass(enable) {
+        if (enable) {
             this._arrowIcon.add_style_pseudo_class('active');
             this._icon.add_style_pseudo_class('active');
             this._label.add_style_pseudo_class('active');
-        }
-        else{
+        } else {
             this._arrowIcon.remove_style_pseudo_class('active');
             this._icon.remove_style_pseudo_class('active');
             this._label.remove_style_pseudo_class('active');
         }
     }
 
-    updateArrowIconSide(side){
+    updateArrowIconSide(side) {
         let iconName;
         switch (side) {
         case St.Side.TOP:
@@ -1928,44 +1972,45 @@ var MenuButtonWidget = class Arc_Menu_MenuButtonWidget{
     getPanelIcon() {
         return this._icon;
     }
+
     showArrowIcon() {
-        if (!this.actor.contains(this._arrowIcon)) {
+        if (!this.actor.contains(this._arrowIcon))
             this.actor.add_child(this._arrowIcon);
-        }
+
     }
 
     hideArrowIcon() {
-        if (this.actor.contains(this._arrowIcon)) {
+        if (this.actor.contains(this._arrowIcon))
             this.actor.remove_child(this._arrowIcon);
-        }
+
     }
 
     showPanelIcon() {
-        if (!this.actor.contains(this._icon)) {
+        if (!this.actor.contains(this._icon))
             this.actor.add_child(this._icon);
-        }
+
     }
 
     hidePanelIcon() {
-        if (this.actor.contains(this._icon)) {
+        if (this.actor.contains(this._icon))
             this.actor.remove_child(this._icon);
-        }
+
     }
 
     showPanelText() {
-        if (!this.actor.contains(this._label)) {
+        if (!this.actor.contains(this._label))
             this.actor.add_child(this._label);
-        }
+
     }
 
     hidePanelText() {
         this._label.style = '';
-        if (this.actor.contains(this._label)) {
+        if (this.actor.contains(this._label))
             this.actor.remove_child(this._label);
-        }
+
     }
 
-    setPanelTextStyle(style){
+    setPanelTextStyle(style) {
         this._label.style = style;
     }
 };
