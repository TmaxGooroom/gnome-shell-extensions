From: jiyun_ha <jiyun_ha@tmax.co.kr>
Date: Mon, 17 May 2021 17:03:04 +0900
Subject: [feat] dash-to-panel : rebuild appIcon context menu

 - rebuild appIcon context menu according to UI/UX guideline

[IMS] N/A
---
 extensions/dash-to-panel/appIcons.js | 193 ++++++++++++-----------------------
 1 file changed, 64 insertions(+), 129 deletions(-)

diff --git a/extensions/dash-to-panel/appIcons.js b/extensions/dash-to-panel/appIcons.js
index 0083f7e..204d00c 100644
--- a/extensions/dash-to-panel/appIcons.js
+++ b/extensions/dash-to-panel/appIcons.js
@@ -38,6 +38,7 @@ const DND = imports.ui.dnd;
 const Main = imports.ui.main;
 const PopupMenu = imports.ui.popupMenu;
 const Util = imports.misc.util;
+const AppFavorites = imports.ui.appFavorites;
 
 const Me = imports.misc.extensionUtils.getCurrentExtension();
 const Utils = Me.imports.utils;
@@ -1402,7 +1403,7 @@ var taskbarSecondaryMenu = Utils.defineClass({
         this.callParent('_init', source);
 
         let side = panel.getPosition();
-        // Change the initialized side where required.
+        //        // Change the initialized side where required.
         this._arrowSide = side;
         this._boxPointer._arrowSide = side;
         this._boxPointer._userArrowSide = side;
@@ -1413,143 +1414,55 @@ var taskbarSecondaryMenu = Utils.defineClass({
         metaWindow.delete(global.get_current_time());
     },
 
-    _dtpRedisplay(parentFunc) {
-        this.callParent(parentFunc);
-
-        function f(menuitem) {
-            if (menuitem instanceof PopupMenu.PopupSeparatorMenuItem || menuitem instanceof PopupMenu.PopupSubMenuMenuItem)
-                return;
-
-            let _icon = new St.Icon({ style_class: 'popup-menu-icon',
-                x_align: Clutter.ActorAlign.END });
-            menuitem.actor.insert_child_above(_icon, menuitem.actor.get_first_child());
-
-            let __ = imports.gettext.domain('gnome-shell').gettext;
-            if (menuitem.actor.label_actor.text === _('Show Details')) {
-                _icon.gicon = Gio.Icon.new_for_string('system-search-symbolic');
-            } else if (menuitem.actor.label_actor.text === __('Add to Favorites')) {
-            // compare label_actor's text with translations from gnome-shell. Generally, gnome-shell and dash-to-panel's translations are the same.
-            // but in this case, they are different. So first compare label_actor's text with gnome-shell's translation, and change it to dash-to-panel's.
-                _icon.gicon = Gio.Icon.new_for_string('view-pin-symbolic');
-                menuitem.actor.label_actor.text = _('Add to Dock');
-            } else if (menuitem.actor.label_actor.text === __('Remove from Favorites')) {
-                _icon.gicon = Gio.Icon.new_for_string('view-pin-symbolic');
-                menuitem.actor.label_actor.text = _('Remove from Dock');
-            } else {
-                // When the shell-window-tracker get app from window use .desktop file
-                // if the window created from a binary without .desktop file,
-                // the app info is null because the shell-window-tracker creates a dummy app
-                let appInfo = this._source.app.app_info;
-                if (appInfo)
-                    _icon.gicon = this._source.app.app_info.get_icon();
-            }
-        }
+    _dtpRedisplay() {
+        this.removeAll();
 
-        let addIconFunc = f.bind(this);
+        let appInfo = this._source.app.get_app_info();
+        let actions = appInfo ? appInfo.list_actions() : [];
 
-        for (let menuitem of this._getMenuItems())
-            addIconFunc(menuitem);
-
-        // Remove "Show Details" menu item
-        if (!Me.settings.get_boolean('secondarymenu-contains-showdetails')) {
-            let existingMenuItems = this._getMenuItems();
-            for (let idx in existingMenuItems) {
-                if (existingMenuItems[idx].actor.label_actor.text === _('Show Details')) {
-                    this.box.remove_child(existingMenuItems[idx].actor);
-                    if (existingMenuItems[idx - 1] instanceof PopupMenu.PopupSeparatorMenuItem)
-                        this.box.remove_child(existingMenuItems[idx - 1].actor);
-                    break;
-                }
-            }
-        }
+        let newWindowAction;
 
         // prepend items from the appMenu (for native gnome apps)
         if (Me.settings.get_boolean('secondarymenu-contains-appmenu')) {
-            let appMenu = this._source.app.menu;
-            if (appMenu) {
-                let remoteMenu = new imports.ui.remoteMenu.RemoteMenu(this._source.actor, this._source.app.menu, this._source.app.action_group);
-                let appMenuItems = remoteMenu._getMenuItems();
-                let seperatorIdx = 0;
-                for (var i = appMenuItems.length - 1 || 0; i >= 0; --i) {
-                    let menuItem = appMenuItems[i];
-                    let labelText = menuItem.actor.label_actor.text;
-                    if (labelText === _('New Window') || labelText === _('Quit'))
-                        continue;
-
-                    if (menuItem instanceof PopupMenu.PopupSeparatorMenuItem)
-                        continue;
-
-                    // this ends up getting called multiple times, and bombing due to the signal id's being invalid
-                    // on a 2nd pass. disconnect the base handler and attach our own that wraps the id's in if statements
-                    menuItem.disconnect(menuItem._popupMenuDestroyId);
-                    menuItem._popupMenuDestroyId = menuItem.connect('destroy', () => {
-                        if (menuItem._popupMenuDestroyId) {
-                            menuItem.disconnect(menuItem._popupMenuDestroyId);
-                            menuItem._popupMenuDestroyId = 0;
-                        }
-                        if (menuItem._activateId) {
-                            menuItem.disconnect(menuItem._activateId);
-                            menuItem._activateId = 0;
-                        }
-                        if (menuItem._activeChangeId) {
-                            menuItem.disconnect(menuItem._activeChangeId);
-                            menuItem._activeChangeId = 0;
-                        }
-                        if (menuItem._sensitiveChangeId) {
-                            menuItem.disconnect(menuItem._sensitiveChangeId);
-                            menuItem._sensitiveChangeId = 0;
-                        }
-                        this.disconnect(menuItem._parentSensitiveChangeId);
-                        if (menuItem === this._activeMenuItem)
-                            this._activeMenuItem = null;
-                    });
-
-                    menuItem.actor.get_parent().remove_child(menuItem.actor);
-                    if (menuItem instanceof PopupMenu.PopupSubMenuMenuItem) {
-                        let newSubMenuMenuItem = new PopupMenu.PopupSubMenuMenuItem(labelText);
-                        let appSubMenuItems = menuItem.menu._getMenuItems();
-                        for (let appSubMenuIdx in appSubMenuItems) {
-                            let subMenuItem = appSubMenuItems[appSubMenuIdx];
-                            subMenuItem.actor.get_parent().remove_child(subMenuItem.actor);
-                            newSubMenuMenuItem.menu.addMenuItem(subMenuItem);
-                        }
-                        this.addMenuItem(newSubMenuMenuItem, 0);
-                    } else {
-                        this.addMenuItem(menuItem, 0);
-
-                        // replace to new icon
-                        // FIXME : too complicated..?
-                        let oldIcon = menuItem.actor.get_children()[1];
-                        let _icon = new St.Icon({ style_class: 'popup-menu-icon',
-                            x_align: Clutter.ActorAlign.END });
-                        menuItem.actor.insert_child_below(_icon, oldIcon);
-
-                        let iconSize = _icon.get_theme_node().get_length('icon-size');
-
-                        _icon.gicon = oldIcon.gicon;
-                        _icon.set_size(iconSize, iconSize);
-                        _icon.show();
-                        menuItem.actor.remove_child(oldIcon);
-
-                        // move ornament position to right of text label
-                        let ornament = new St.Label();
-                        let oldOrnament = menuItem._ornament;
+            // app menu(actions)
+            for (let action of actions) {
+                if (action === 'new-window') {
+                    newWindowAction = event => {
+                        this._source.animateLaunch();
+                        this._source.app.launch_action(action, event.get_time(), -1);
+                    };
+                    continue;
+                }
 
-                        menuItem.actor.add(ornament);
+                let callback = event => {
+                    this._source.app.launch_action(action, event.get_time(), -1);
+                    this.emit('activate-window', null);
+                };
 
-                        menuItem.setOrnament(PopupMenu.Ornament.NONE);
+                this.addAction(appInfo.get_action_name(action), callback, appInfo.get_icon());
+            }
+        }
+        this._appendSeparator();
 
-                        menuItem._ornamentLabel = ornament;
-                        menuItem.setOrnament(oldOrnament);
-                    }
+        // dock에 추가/제거
+        let canFavorite = appInfo ? global.settings.is_writable('favorite-apps') &&
+                          this._parentalControlsManager.shouldShowApp(appInfo) : null;
 
-                    seperatorIdx++;
+        if (canFavorite) {
+            let isFavorite = AppFavorites.getAppFavorites().isFavorite(this._source.app.get_id());
 
-                }
-                if (seperatorIdx > 0) {
-                    let separator = new PopupMenu.PopupSeparatorMenuItem();
-                    this.addMenuItem(separator, seperatorIdx);
-                }
+            if (isFavorite) {
+                this.addAction(_('Remove from Dock'),
+                    () => {
+                        let favs = AppFavorites.getAppFavorites();
+                        favs.removeFavorite(this._source.app.get_id());
+                    }, 'view-pin-symbolic');
+            } else {
+                this.addAction(_('Add to Dock'),
+                    () => {
+                        let favs = AppFavorites.getAppFavorites();
+                        favs.addFavorite(this._source.app.get_id());
+                    }, 'view-pin-symbolic');
             }
         }
 
@@ -1557,8 +1470,21 @@ var taskbarSecondaryMenu = Utils.defineClass({
         let app = this._source.app;
         let window = this._source.window;
         let count = window ? 1 : getInterestingWindows(app).length;
+
+        // new window (there one or more opened window)
+        if (count > 0 && appInfo) {
+            if (!newWindowAction) {
+                newWindowAction = () => {
+                    this._source.animateLaunch();
+                    this._source.app.open_new_window(-1);
+                    this.emit('activate-window', null);
+                };
+            }
+            this.addAction(_('New Window'), newWindowAction, appInfo.get_icon());
+        }
+
+        // quit (one or more window opened) / open (no window)
         if (count > 0) {
-            this._appendSeparator();
             let quitFromTaskbarMenuText = '';
             if (count === 1)
                 quitFromTaskbarMenuText = _('Quit');
@@ -1572,6 +1498,15 @@ var taskbarSecondaryMenu = Utils.defineClass({
             };
 
             this.addAction(quitFromTaskbarMenuText, closeWindowFunc.bind(this), 'window-close-symbolic');
+        } else {
+            if (!newWindowAction) {
+                newWindowAction = () => {
+                    this._source.animateLaunch();
+                    this._source.app.open_new_window(-1);
+                    this.emit('activate-window', null);
+                };
+            }
+            this.addAction(_('New Window'), newWindowAction, appInfo.get_icon());
         }
     },
 });
