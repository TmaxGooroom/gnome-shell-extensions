From: Saehan Lee <saehan_lee@tmax.co.kr>
Date: Mon, 3 May 2021 12:22:56 +0900
Subject: [bugfix] Modify Key down & up handling logic,
 reimplment nextLine & previousLine function

  - Modify moving above row & below row logic
  - add annotation about moving row logic
  - rename variable in consideration of variable's usage range

[IMS] N/A
---
 extensions/alternate-tab/switcher.js | 74 +++++++++++++++++++++++++-----------
 1 file changed, 51 insertions(+), 23 deletions(-)

diff --git a/extensions/alternate-tab/switcher.js b/extensions/alternate-tab/switcher.js
index 9000bb8..7ddea84 100644
--- a/extensions/alternate-tab/switcher.js
+++ b/extensions/alternate-tab/switcher.js
@@ -161,10 +161,8 @@ class WindowSwitcherPopup extends SwitcherPopup.SwitcherPopup {
             this._select(this._previous());
         else if (keysym === Clutter.KEY_Right)
             this._select(this._next());
-        else if (keysym === Clutter.KEY_Down)
-            this._select(this._nextLine());
-        else if (keysym === Clutter.KEY_Up)
-            this._select(this._previousLine());
+        else if (keysym === Clutter.KEY_Down || keysym === Clutter.KEY_Up)
+            this._select(this._moveLine(keysym));
         else if (keysym === Clutter.KEY_w || keysym === Clutter.KEY_W || keysym === Clutter.KEY_F4)
             this._closeWindow(this._selectedIndex);
         else
@@ -184,21 +182,10 @@ class WindowSwitcherPopup extends SwitcherPopup.SwitcherPopup {
 
     // When Clutter.Key.Down pressed, Move Focus below the focused item.
     // If selected item is allocated Bottom Row, then move focus Top Row item
-    _nextLine() {
-        let [width, height] = this._items[this._selectedIndex].get_size();
-        let [x, y] = this._items[this._selectedIndex].get_transformed_position();
-        let target = this._items[this._selectedIndex].get_stage().get_actor_at_pos(Clutter.PickMode.REACTIVE, x + width / 3, y + height * 1.2);
-        return this._items.indexOf(target.get_child());
-
-    }
-
     // When Clutter.Key.Up pressed, Move Focus above the focused item.
     // If selected item is allocated Top Row, then move focus Bottom Row item
-    _previousLine() {
-        let [width, height] = this._items[this._selectedIndex].get_size();
-        let [x, y] = this._items[this._selectedIndex].get_transformed_position();
-        let target = this._items[this._selectedIndex].get_stage().get_actor_at_pos(Clutter.PickMode.REACTIVE, x + width / 2, y - height / 3);
-        return this._items.indexOf(target.get_child());
+    _moveLine(keysym) {
+        return this._switcherList.findVerticalItemIndex(this._selectedIndex, keysym);
     }
 });
 
@@ -389,7 +376,7 @@ var WindowSwitcher = GObject.registerClass({
     }
 
     // Find and return row index which include this._items[index]
-    findRowIndexFromItem(itemIndex) {
+    _findRowIndexFromItem(itemIndex) {
         let rowIndex = -1;
         for (let i = 0; i <= this._rows; i++) {
             if (this._lists[i].get_children().indexOf(this._items[itemIndex]) !== -1) {
@@ -400,8 +387,49 @@ var WindowSwitcher = GObject.registerClass({
         return rowIndex;
     }
 
-    highlight(index, justOutline) {
+    /* FindVerticalItemIndex
+    Find Vertically moved ItemIndex logic are as follows
+    1. Calculate center x-coordinate of previously selected item
+    2. Find below or above Row Index, if there are overflow or underflow, adjust top or bottom accordingly
+    3-1. if any item contains the calculated x-coordinate (1.), Return the index of that item
+    3-2. ir there are no item that contains the calculated x-coordinate, Return the index of the closest item.
+    */
+    findVerticalItemIndex(itemIndex, keysym) {
+        let itemIndexReturn = -1;
+        let itemAllocation = this._items[itemIndex].allocation;
+        let xMark = Math.floor((itemAllocation.x1 + itemAllocation.x2) / 2);
+
+        let rowIndex = this._findRowIndexFromItem(itemIndex);
+        let verticalIndex;
+        if (keysym === Clutter.KEY_Down)
+            verticalIndex = (rowIndex + 1) % (this._rows + 1);
+        else if (keysym === Clutter.KEY_Up)
+            verticalIndex = (rowIndex + this._rows) % (this._rows + 1);
+
+
+        let rowItemList = this._lists[verticalIndex].get_children();
+        let minDistance = -1;
 
+        for (let i = 0; i < rowItemList.length; i++) {
+            let candidateAllocation = rowItemList[i].allocation;
+            if (candidateAllocation.x1 <= xMark && candidateAllocation.x2 >= xMark)
+                return this._items.indexOf(rowItemList[i]);
+
+            if (minDistance < 0) {
+                minDistance = Math.min(Math.abs(candidateAllocation.x1 - xMark), Math.abs(candidateAllocation.x2 - xMark));
+                itemIndexReturn = i;
+            } else {
+                let newDistance = Math.min(Math.abs(candidateAllocation.x1 - xMark), Math.abs(candidateAllocation.x2 - xMark));
+                if (minDistance > newDistance) {
+                    minDistance  = newDistance;
+                    itemIndexReturn = i;
+                }
+            }
+        }
+        return this._items.indexOf(rowItemList[itemIndexReturn]);
+    }
+
+    highlight(index, justOutline) {
         if (this._items[this._highlighted]) {
             this._items[this._highlighted].remove_style_pseudo_class('outlined');
             this._items[this._highlighted].remove_style_pseudo_class('selected');
@@ -420,7 +448,7 @@ var WindowSwitcher = GObject.registerClass({
         let [value] = adjustment.get_values();
 
         // Find row boxlayout which index items belongs to
-        let rowIndex = this.findRowIndexFromItem(index);
+        let rowIndex = this._findRowIndexFromItem(index);
         let [absItemX_, absItemY] = this._items[index].get_transformed_position();
         this.transform_stage_point(absItemX_, absItemY);
         let [containerWidth_, containerHeight] = this.get_transformed_size();
@@ -435,7 +463,7 @@ var WindowSwitcher = GObject.registerClass({
         let adjustment = this._scrollView.vscroll.adjustment;
         let [value, lower_, upper, stepIncrement_, pageIncrement_, pageSize] = adjustment.get_values();
 
-        let rowIndex = this.findRowIndexFromItem(index);
+        let rowIndex = this._findRowIndexFromItem(index);
         let list = this._lists[rowIndex];
 
         if (list.allocation.y1 < value)
@@ -459,7 +487,7 @@ var WindowSwitcher = GObject.registerClass({
         let adjustment = this._scrollView.vscroll.adjustment;
         let [value, lower_, upper, stepIncrement_, pageIncrement_, pageSize] = adjustment.get_values();
 
-        let rowIndex = this.findRowIndexFromItem(index);
+        let rowIndex = this._findRowIndexFromItem(index);
         let list = this._lists[rowIndex];
 
         if (list.allocation.y1 < value)
@@ -510,7 +538,7 @@ var WindowSwitcher = GObject.registerClass({
         });
         if (index === -1)
             return;
-        let rowIndex = this.findRowIndexFromItem(index);
+        let rowIndex = this._findRowIndexFromItem(index);
         this.icons.splice(index, 1);
         this.removeItem(index);
         this._rearrangeGrid(rowIndex);
