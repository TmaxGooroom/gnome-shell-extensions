From: jiyun_ha <jiyun_ha@tmax.co.kr>
Date: Mon, 30 Aug 2021 15:09:16 +0900
Subject: [bugfix] tos-hotkey : cannot change display config to mirror mode
 when two or more monitors have different resolution

 - Mutter verify monitor configs before applying them. if two or more
monitors configs have different resolution, the verifying step will
dismiss the change.
 - When changing display config to mirror mode, force the monitors to
have same resolution.

[IMS] 268413
---
 extensions/tos-hotkey/switchMonitor.js | 75 +++++++++++++++++++++++++++++++++-
 1 file changed, 73 insertions(+), 2 deletions(-)

diff --git a/extensions/tos-hotkey/switchMonitor.js b/extensions/tos-hotkey/switchMonitor.js
index 539c691..3c5428d 100644
--- a/extensions/tos-hotkey/switchMonitor.js
+++ b/extensions/tos-hotkey/switchMonitor.js
@@ -85,6 +85,8 @@ class DisplayConfig {
                 temp['possibleModes'].push({
                     'modeID': mode[0],
                     'width': mode[1],
+                    'height': mode[2],
+                    'refreshRate': mode[3],
                     'preferredScale': mode[4],
                     'possibleScale': mode[5],
                     'isCurrent': mode[6]['is-current'] ? mode[6]['is-current'].deepUnpack() : false,
@@ -130,6 +132,72 @@ class DisplayConfig {
                 this._crtcs[crtcID]['transform'] = monitor[3];
         }
     }
+
+    _getClosestMode(modes, width, height, refreshRate) {
+        let best = null;
+
+        for (let mode of modes) {
+            if (mode.width !== width || mode.height !== height)
+                continue;
+
+            if (mode.refreshRate === refreshRate) {
+                best = mode;
+                break;
+            }
+
+            if (!best || mode.refreshRate < refreshRate)
+                best = mode;
+        }
+
+        return best;
+    }
+
+    _gatherMirrorModes() {
+        if (this._outputs.length < 2)
+            return null;
+        let modesInCommon = [];
+        for (let mode of this.primaryOutput.possibleModes) {
+            let [width, height, refreshRate] = [mode.width, mode.height, mode.refreshRate];
+
+            let possible = true;
+            for (let output of this._outputs) {
+                if (output.isPrimary)
+                    continue;
+
+                let closestMode = this._getClosestMode(output.possibleModes, width, height, refreshRate);
+
+                if (!closestMode) {
+                    possible = false;
+                    break;
+                }
+            }
+
+            if (possible)
+                modesInCommon.push(mode);
+
+        }
+
+        return modesInCommon;
+    }
+
+    getModeForMirror() {
+        // The mode priority is following.
+        // currentMode > preferredMode > the first element of modes in common.
+        // Remember that this is just the most resonable option at this point, so can be modified.
+        let modesInCommon = this._gatherMirrorModes();
+        let best = modesInCommon[0];
+
+        for (let mode of modesInCommon) {
+            if (mode.modeID === this.primaryOutput.currentMode)
+                best = mode;
+
+            if (mode.modeID === this.primaryOutput.preferredMode)
+                best = best || mode;
+        }
+
+        return best;
+    }
+
 }
 
 var SwitchMonitorManager = class { // eslint-disable-line no-unused-vars
@@ -160,9 +228,13 @@ var SwitchMonitorManager = class { // eslint-disable-line no-unused-vars
         let scale = displayConfig._crtcs[crtcID]['scale'];
         let transform = displayConfig._crtcs[crtcID]['transform'];
 
+        let mode = displayConfig.getModeForMirror();
+        if (!mode)
+            return;
+
         let logicalMonitor = [];
         displayConfig._outputs.forEach(output => {
-            let modeID = output['currentMode'] ? output['currentMode'] : output['preferredMode'];
+            let modeID = displayConfig._getClosestMode(output.possibleModes, mode.width, mode.height, mode.refreshRate).modeID;
 
             let properties = {
                 'enable_underscanning': output['underscanning'] ? output['underscanning'] : new GLib.Variant('b', false),
@@ -177,7 +249,6 @@ var SwitchMonitorManager = class { // eslint-disable-line no-unused-vars
         // x, y, scale, transform, is primary
         let logicalMonitors = [0, 0, scale, transform, true];
         logicalMonitors.push(logicalMonitor);
-
         try {
             await this._proxy.call('ApplyMonitorsConfig', [serial, method, [logicalMonitors], [new GLib.Variant('a{sv}', {})]]);
         } catch (e) {
