From: sohee_yoon <sohee_yoon@tmax.co.kr>
Date: Fri, 28 May 2021 17:50:49 +0900
Subject: [bugfix] Arc Menu : Solve issues that do not appear on applist when
 installing some(chrome, vm-helper) apps

- Modify to receive a "installed-changed" signal from shell-app-system.
- Check and add the missing app when performing reload after receiving the signal.
- Default view setup logic was unnecessary and removed.

[IMS] 260589
---
 extensions/arc-menu/baseMenuLayout.js | 18 +++++----
 extensions/arc-menu/controller.js     |  4 --
 extensions/arc-menu/menuButton.js     | 26 -------------
 extensions/arc-menu/menuLayout.js     | 70 ++++++++++++++++++++++++++---------
 4 files changed, 63 insertions(+), 55 deletions(-)

diff --git a/extensions/arc-menu/baseMenuLayout.js b/extensions/arc-menu/baseMenuLayout.js
index 39d9ea4..59f666b 100644
--- a/extensions/arc-menu/baseMenuLayout.js
+++ b/extensions/arc-menu/baseMenuLayout.js
@@ -56,18 +56,18 @@ var BaseLayout = class { // eslint-disable-line no-unused-vars
             this.needsReload = true;
         });
 
+        // NOTE(210527, sohee) : IMS260589
+        // In the case of google-chrome or vm-helper, GMenu.tree does not send "changed" signal
+        // because the binary is created later in the /usr/bin path than other apps.
+        this._installedChangedId = appSys.connect('installed-changed', () => {
+            this.needsReload = true;
+        });
+
         this.mainBox.vertical = false;
         this.createLayout();
         this.updateStyle();
     }
 
-    setDefaultMenuView() {
-        this._clearActorsFromBox(this.allAppsBox);
-
-        let appsScrollBoxAdj = this.applicationsScrollBox.get_vscroll_bar().get_adjustment();
-        appsScrollBoxAdj.set_value(0);
-    }
-
     reload() {
         let isReload = true;
         this.destroy(isReload);
@@ -376,6 +376,10 @@ var BaseLayout = class { // eslint-disable-line no-unused-vars
                 this._tree = null;
             }
 
+            if (this._installedChangedId > 0)
+                this._installedChangedId = 0;
+
+
             this.isRunning = false;
         }
 
diff --git a/extensions/arc-menu/controller.js b/extensions/arc-menu/controller.js
index a0f3cb4..8182a8f 100644
--- a/extensions/arc-menu/controller.js
+++ b/extensions/arc-menu/controller.js
@@ -82,10 +82,6 @@ var MenuSettingsController = class { // eslint-disable-line no-unused-vars
         this._menuButton.updateLocation();
     }
 
-    _setDefaultMenuView() {
-        this._menuButton.setDefaultMenuView();
-    }
-
     toggleMenus() {
         if (Main.overview.visible) {
             Main.overview.hide();
diff --git a/extensions/arc-menu/menuButton.js b/extensions/arc-menu/menuButton.js
index a62af0d..7aa0a47 100644
--- a/extensions/arc-menu/menuButton.js
+++ b/extensions/arc-menu/menuButton.js
@@ -98,17 +98,10 @@ var MenuButton = GObject.registerClass(class ArcMenuButton extends PanelMenu.But
         if (this.dashToPanel && this.dashToPanel.stateObj)
             this.syncWithDashToPanel();
 
-
-        this._iconThemeChangedId = St.TextureCache.get_default().connect('icon-theme-changed', this.reload.bind(this));
         this._monitorsChangedId = Main.layoutManager.connect('monitors-changed', () => {
             this.updateHeight();
         });
 
-        this._appList = this.listAllApps();
-        // Update Categories on 'installed-changed' event-------------------------------------
-        this._installedChangedId = appSys.connect('installed-changed', () => {
-            this._appList = this.listAllApps();
-        });
         this._setMenuPositionAlignment();
 
         // Create Basic Layout
@@ -163,18 +156,6 @@ var MenuButton = GObject.registerClass(class ArcMenuButton extends PanelMenu.But
         }
     }
 
-    listAllApps() {
-        let appList = appSys.get_installed().filter(appInfo => {
-            try {
-                appInfo.get_id(); // catch invalid file encodings
-            } catch (e) {
-                return false;
-            }
-            return appInfo.should_show();
-        });
-        return appList.map(app => app.get_id());
-    }
-
     createMenuLayout() {
         this.section = new PopupMenu.PopupMenuSection();
         this.arcMenu.addMenuItem(this.section);
@@ -423,11 +404,6 @@ var MenuButton = GObject.registerClass(class ArcMenuButton extends PanelMenu.But
             return this.MenuLayout.shouldLoadFavorites;
     }
 
-    setDefaultMenuView() {
-        if (this.MenuLayout)
-            this.MenuLayout.setDefaultMenuView();
-    }
-
     _onOpenStateChanged(menu, open) {
         if (open) {
             this.menuButtonWidget.setActiveStylePseudoClass(true);
@@ -491,7 +467,6 @@ var ArcMenu = class ArcMenu extends PopupMenu.PopupMenu {
         if (this._menuButton.MenuLayout && this._menuButton.MenuLayout.needsReload) {
             this._menuButton.MenuLayout.reload();
             this._menuButton.MenuLayout.needsReload = false;
-            this._menuButton.setDefaultMenuView();
         }
         this._menuButton.MenuLayout.displayRecentlyInstalledApps();
     }
@@ -501,7 +476,6 @@ var ArcMenu = class ArcMenu extends PopupMenu.PopupMenu {
             if (this._menuButton.MenuLayout.needsReload)
                 this._menuButton.MenuLayout.reload();
             this._menuButton.MenuLayout.needsReload = false;
-            this._menuButton.setDefaultMenuView();
         }
     }
 
diff --git a/extensions/arc-menu/menuLayout.js b/extensions/arc-menu/menuLayout.js
index 12d16b3..6952aca 100644
--- a/extensions/arc-menu/menuLayout.js
+++ b/extensions/arc-menu/menuLayout.js
@@ -23,17 +23,16 @@
 
 const Me = imports.misc.extensionUtils.getCurrentExtension();
 
-const { Clutter, GLib, Gio, St } = imports.gi;
+const { Clutter, GLib, Gio, Shell, St } = imports.gi;
 const BaseMenuLayout = Me.imports.baseMenuLayout;
 const Constants = Me.imports.constants;
 const Gettext = imports.gettext.domain(Me.metadata['gettext-domain']);
 const Main = imports.ui.main;
 const MW = Me.imports.menuWidgets;
 const PopupMenu = imports.ui.popupMenu;
+
 const _ = Gettext.gettext;
-// const Gtk = imports.gi;
-// const PlaceDisplay = Me.imports.placeDisplay;
-// const Utils =  Me.imports.utils;
+const appSys = Shell.AppSystem.get_default();
 
 // Favorites
 const COLUMN_SPACING = 10;
@@ -45,6 +44,12 @@ const MIN_RECENT_SIZE = 4;
 const MAX_RECENT_SIZE = 10;
 const TWO_WEEKS = 60 * 60 * 24 * 12;
 
+// Applist
+// NOTE(210527, sohee) : IMS260589
+// MISSING_APPS : Apps that are missing from the list of apps given by GMenu.Tree.
+// Check if these apps are installed during reload and add them if they are missing.
+const MISSING_APPS = ['google-chrome.desktop', 'vm-helper.desktop'];
+
 var createMenu = class extends BaseMenuLayout.BaseLayout { // eslint-disable-line no-unused-vars
     createLayout() {
         this.actionsBox = new St.BoxLayout({
@@ -215,15 +220,6 @@ var createMenu = class extends BaseMenuLayout.BaseLayout { // eslint-disable-lin
         this.leaveMenu.toggle();
     }
 
-    setDefaultMenuView() {
-        super.setDefaultMenuView();
-
-        this.displayAllApps();
-        this.displayFavorites();
-        let appsScrollBoxAdj = this.favoritesScrollBox.get_vscroll_bar().get_adjustment();
-        appsScrollBoxAdj.set_value(0);
-    }
-
     setActiveMenuItem(item) {
         this.activeMenuItem = item;
         if (this.arcMenu.isOpen)
@@ -280,11 +276,17 @@ var createMenu = class extends BaseMenuLayout.BaseLayout { // eslint-disable-lin
 
     getCreatedTime(appInfo) {
         let filename = appInfo.get_filename();
-        let file = Gio.File.new_for_path(filename);
-        let fileInfo = file.query_info('time::created', Gio.FileQueryInfoFlags.NONE, null);
-        let createdTime = fileInfo.get_attribute_uint64('time::created');
-
-        return createdTime;
+        try {
+            // NOTE(210531, sohee): When an app is deleted while performing logic,
+            // an error occurs that there is no such file or directory.
+            let file = Gio.File.new_for_path(filename);
+
+            let fileInfo = file.query_info('time::created', Gio.FileQueryInfoFlags.NONE, null);
+            let createdTime = fileInfo.get_attribute_uint64('time::created');
+            return createdTime;
+        } catch (e) {
+            return 0;
+        }
     }
 
     createRecentLabel() {
@@ -336,6 +338,25 @@ var createMenu = class extends BaseMenuLayout.BaseLayout { // eslint-disable-lin
             appList.push(key);
         });
 
+        let newAppList = this.listAllApps();
+        let newApps = newAppList.filter(appId => {
+            let app = appSys.lookup_app(appId);
+            return !appList.includes(app);
+        });
+
+        // NOTE(210527, sohee) : IMS260589
+        // Check and add missing apps from GMenu.Tree's list of apps.
+        newApps.forEach(newAppId => {
+            let missing = MISSING_APPS.some(element => {
+                return element === newAppId;
+            });
+
+            if (missing) {
+                let app = appSys.lookup_app(newAppId);
+                appList.push(app);
+            }
+        });
+
         appList.sort((a, b) => {
             return a.get_name().toLowerCase() > b.get_name().toLowerCase();
         });
@@ -343,6 +364,19 @@ var createMenu = class extends BaseMenuLayout.BaseLayout { // eslint-disable-lin
         this._displayAppList(appList);
     }
 
+    listAllApps() {
+        let appList = appSys.get_installed().filter(appInfo => {
+            try {
+                appInfo.get_id();
+            } catch (e) {
+                // NOTE(210531, sohee): type conversion error (gappinfo->gdesktopappinfo)
+                return false;
+            }
+            return appInfo.should_show();
+        });
+        return appList.map(app => app.get_id());
+    }
+
     _reload() {
         super.reload();
         let themeContext = St.ThemeContext.get_for_stage(global.stage);
