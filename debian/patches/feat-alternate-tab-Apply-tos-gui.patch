From: jungrae kim <jungrae_kim@tmax.co.kr>
Date: Wed, 31 Mar 2021 16:22:50 +0900
Subject: [feat] alternate-tab : Apply tos gui

 - add hover, focus effect
 - apply tos gui

[IMS] N/A
---
 extensions/alternate-tab/switcher.js | 179 ++++++++++++++++++++++++++++++-----
 1 file changed, 157 insertions(+), 22 deletions(-)

diff --git a/extensions/alternate-tab/switcher.js b/extensions/alternate-tab/switcher.js
index 1cdd9a8..02ad7e0 100644
--- a/extensions/alternate-tab/switcher.js
+++ b/extensions/alternate-tab/switcher.js
@@ -13,9 +13,9 @@ var THUMBNAIL_DEFAULT_SIZE = 256;
 var THUMBNAIL_POPUP_TIME = 500; // milliseconds
 var THUMBNAIL_FADE_TIME = 100; // milliseconds
 
-var WINDOW_PREVIEW_SIZE = 128;
-var APP_ICON_SIZE = 96;
-var APP_ICON_SIZE_SMALL = 48;
+var WINDOW_PREVIEW_SIZE = 256;
+var APP_ICON_SIZE = 128;
+var APP_ICON_SIZE_SMALL = 16;
 
 const baseIconSizes = [96, 64, 48, 32, 22];
 
@@ -51,6 +51,18 @@ function getWindows(workspace) {
     }).filter((w, i, a) => !w.skip_taskbar && a.indexOf(w) == i);
 }
 
+function primaryModifier(mask){
+	if(mask ==0)
+		return 0;
+
+	let primary = 1;
+	while(mask > 1) {
+		mask >>=1;
+		primary <<=1;
+	}
+	return primary;
+}
+
 var WindowSwitcherPopup = GObject.registerClass(
 class WindowSwitcherPopup extends SwitcherPopup.SwitcherPopup {
     _init() {
@@ -64,6 +76,66 @@ class WindowSwitcherPopup extends SwitcherPopup.SwitcherPopup {
         this._items = this._switcherList.icons;
     }
 
+    show(backward, binding, mask) {
+        if (this._items.length == 0)
+            return false;
+
+        if (!Main.pushModal(this)) {
+            // Probably someone else has a pointer grab, try again with keyboard only
+            if (!Main.pushModal(this, { options: Meta.ModalOptions.POINTER_ALREADY_GRABBED }))
+                return false;
+        }
+        this._haveModal = true;
+        this._modifierMask = primaryModifier(mask);
+
+        this.add_actor(this._switcherList);
+        this._switcherList.connect('item-activated', this._itemActivated.bind(this));
+        this._switcherList.connect('item-entered', this._itemEntered.bind(this));
+        this._switcherList.connect('item-removed', this._itemRemoved.bind(this));
+	this._switcherList.connect('item-pressed', this._itemPressed.bind(this));
+        // Need to force an allocation so we can figure out whether we
+        // need to scroll when selecting
+        this.opacity = 255;
+        this.visible = true;
+        this.get_allocation_box();
+
+        this._initialSelection(backward, binding);
+
+        // There's a race condition; if the user released Alt before
+        // we got the grab, then we won't be notified. (See
+        // https://bugzilla.gnome.org/show_bug.cgi?id=596695 for
+        // details.) So we check now. (Have to do this after updating
+        // selection.)
+        if (this._modifierMask) {
+            let [x_, y_, mods] = global.get_pointer();
+            if (!(mods & this._modifierMask)) {
+                this._finish(global.get_current_time());
+                return true;
+            }
+        } else {
+            this._resetNoModsTimeout();
+        }
+
+        // We delay showing the popup so that fast Alt+Tab users aren't
+        // disturbed by the popup briefly flashing.
+        this._initialDelayTimeoutId = GLib.timeout_add(
+            GLib.PRIORITY_DEFAULT,
+            POPUP_DELAY_TIMEOUT,
+            () => {
+                this._showImmediately();
+                return GLib.SOURCE_REMOVE;
+            });
+        GLib.Source.set_name_by_id(this._initialDelayTimeoutId, '[gnome-shell] Main.osdWindow.cancel');
+    }
+
+    _itemPressed(switcher, n){
+	    this._itemPressedHandler(n);
+    }
+
+    _itemPressedHandler(n){
+	    this._select(n);
+    }
+
     _getWindowList() {
         let workspace = null;
 
@@ -101,6 +173,15 @@ class WindowSwitcherPopup extends SwitcherPopup.SwitcherPopup {
         return Clutter.EVENT_STOP;
     }
 
+    _itemEnteredHandler(n){
+	this._hover(n)
+    }
+
+    _hover(num){
+	this._switcherList._hover(num);
+    }
+
+
     _finish() {
         Main.activateWindow(this._items[this._selectedIndex].window);
 
@@ -116,10 +197,13 @@ class WindowIcon extends St.BoxLayout {
 
         this.window = window;
 
+	this.child_actor =  new St.BoxLayout();
+	this.actor.add_actor(this.child_actor);
+
         this._icon = new St.Widget({ layout_manager: new Clutter.BinLayout() });
 
         this.add_child(this._icon);
-        this.label = new St.Label({ text: window.get_title() });
+        this.label = new St.Label({ text: window.get_title(), style_class: 'tos-text-label' });
 
         let tracker = Shell.WindowTracker.get_default();
         this.app = tracker.get_window_app(window);
@@ -142,7 +226,7 @@ class WindowIcon extends St.BoxLayout {
             this._icon.add_actor(_createWindowClone(mutterWindow, size * scaleFactor));
 
             if (this.app) {
-                this._icon.add_actor(this._createAppIcon(this.app,
+                this.child_actor.add_actor(this._createAppIcon(this.app,
                                                          APP_ICON_SIZE_SMALL));
             }
             break;
@@ -151,6 +235,7 @@ class WindowIcon extends St.BoxLayout {
             size = APP_ICON_SIZE;
             this._icon.add_actor(this._createAppIcon(this.app, size));
         }
+	this.child_actor.add_actor(this.label, {x_fill :true, y_fill :true});
 
         this._icon.set_size(size * scaleFactor, size * scaleFactor);
     }
@@ -159,24 +244,24 @@ class WindowIcon extends St.BoxLayout {
         let appIcon = app
             ? app.create_icon_texture(size)
             : new St.Icon({ icon_name: 'icon-missing', icon_size: size });
-        appIcon.x_expand = appIcon.y_expand = true;
-        appIcon.x_align = appIcon.y_align = Clutter.ActorAlign.END;
+        appIcon.y_expand = true;
+        appIcon.x_align = Clutter.ActorAlign.START;
+	appIcon.y_align = Clutter.ActorAlign.CENTER;
 
         return appIcon;
     }
 });
 
-var WindowSwitcher = GObject.registerClass(
-class WindowSwitcher extends SwitcherPopup.SwitcherList {
+var WindowSwitcher = GObject.registerClass({
+	Signals: {'item-leaved':{ param_types: [GObject.TYPE_INT] },
+		  'item-pressed':{ param_types: [GObject.TYPE_INT] } },
+}, class WindowSwitcher extends SwitcherPopup.SwitcherList {
     _init(windows, mode) {
         super._init(true);
 
-        this._label = new St.Label({ x_align: Clutter.ActorAlign.CENTER,
-                                     y_align: Clutter.ActorAlign.CENTER });
-        this.add_actor(this._label);
-
         this.windows = windows;
         this.icons = [];
+	this._hovered = -1;
 
         for (let i = 0; i < windows.length; i++) {
             let win = windows[i];
@@ -203,10 +288,9 @@ class WindowSwitcher extends SwitcherPopup.SwitcherList {
         let [minHeight, natHeight] = super.vfunc_get_preferred_height(forWidth);
 
         let spacing = this.get_theme_node().get_padding(St.Side.BOTTOM);
-        let [labelMin, labelNat] = this._label.get_preferred_height(-1);
 
-        minHeight += labelMin + spacing;
-        natHeight += labelNat + spacing;
+        minHeight += spacing;
+        natHeight += spacing;
 
         return [minHeight, natHeight];
     }
@@ -214,9 +298,8 @@ class WindowSwitcher extends SwitcherPopup.SwitcherList {
     vfunc_allocate(box) {
         let themeNode = this.get_theme_node();
         let contentBox = themeNode.get_content_box(box);
-        const labelHeight = this._label.height;
         const totalLabelHeight =
-            labelHeight + themeNode.get_padding(St.Side.BOTTOM);
+            themeNode.get_padding(St.Side.BOTTOM);
 
         box.y2 -= totalLabelHeight;
         super.vfunc_allocate(box);
@@ -226,19 +309,71 @@ class WindowSwitcher extends SwitcherPopup.SwitcherList {
         // correct size here.
         box.y2 += totalLabelHeight;
         this.set_allocation(box);
-
         const childBox = new Clutter.ActorBox();
         childBox.x1 = contentBox.x1;
         childBox.x2 = contentBox.x2;
         childBox.y2 = contentBox.y2;
-        childBox.y1 = childBox.y2 - labelHeight;
-        this._label.allocate(childBox);
+        childBox.y1 = childBox.y2;
+    }
+
+    addItem(item, label){
+	    let bbox = new SwitcherPopup.SwitcherButton(this._squareItems);
+
+	    bbox.set_style_class_name('tos-item-box');
+
+	    bbox.set_child(item);
+	    this._list.add_actor(bbox);
+
+	    bbox.connect('clicked', () => this._onItemClicked(bbox));
+	    bbox.connect('motion-event', () => this._onItemEnter(bbox));
+	    bbox.connect('button-press-event', () => this._onItemPress(bbox));
+	    bbox.connect('leave-event', () => this._onItemLeave(bbox));
+	    bbox.label_actor = label;
+
+	    this._items.push(bbox);
+
+	    return bbox;
+    }
+
+    _onItemPress(item){
+	    if(item !== this._items[this._highlighted])
+		    this._itemPressed(this._items.indexOf(item));
+
+	    return Clutter.EVENT_PROPAGATE;
+    }
+
+    _onItemLeave(item){
+	    global.log('item- leave');
+	    this._removeHover(this._items.indexOf(item));
     }
 
     highlight(index, justOutline) {
         super.highlight(index, justOutline);
+	this._items[index].remove_style_pseudo_class('tos-hover');
+
+    }
+
+    _hover(index){
+	    if(this._items[this._hovered]){
+		this._items[this._hovered].remove_style_pseudo_class('tos-hover');
+	    }
+
+	    if(index == this._highlighted){
+	    return;
+	    }
+
+	    this._items[index].add_style_pseudo_class('tos-hover');
+
+	    this._hovered = index;
+    }
+
+    _removeHover(index){
+	this._items[index].remove_style_pseudo_class('tos-hover');
+	this._hovered = -1;
+    }
 
-        this._label.set_text(index == -1 ? '' : this.icons[index].label.text);
+    _itemPressed(n) {
+	    this.emit('item-pressed', n);
     }
 
     _removeWindow(window) {
