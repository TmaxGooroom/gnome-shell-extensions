From: gangmo_seong <gangmo_seong@tmax.co.kr>
Date: Tue, 9 Nov 2021 19:08:11 +0900
Subject: [bugfix] notification-center: easysupport bluetooth fix

- removed callback functions which tracks changes in searched bluetooth device list
- code refactor, separated easysupport codes into independent js file

[IMS] N/A
---
 extensions/notification-center/easySupport.js | 424 ++++++++++++++++++++++
 extensions/notification-center/extension.js   | 487 +-------------------------
 extensions/notification-center/meson.build    |   3 +-
 3 files changed, 441 insertions(+), 473 deletions(-)
 create mode 100644 extensions/notification-center/easySupport.js

diff --git a/extensions/notification-center/easySupport.js b/extensions/notification-center/easySupport.js
new file mode 100644
index 0000000..0a17ac5
--- /dev/null
+++ b/extensions/notification-center/easySupport.js
@@ -0,0 +1,424 @@
+/* exported EasySupport */
+
+const { Clutter, Gio, GLib, GnomeBluetooth, GObject, St } = imports.gi;
+const _ = imports.gettext.domain('notification-center').gettext;
+
+const SystemActions = imports.misc.systemActions.getDefault();
+const Util = imports.misc.util;
+const Me = imports.misc.extensionUtils.getCurrentExtension();
+
+const { loadInterfaceXML } = imports.misc.fileUtils;
+const RfkillManagerInterface = loadInterfaceXML('org.gnome.SettingsDaemon.Rfkill');
+const RfkillManagerProxy = Gio.DBusProxy.makeProxyWrapper(RfkillManagerInterface);
+
+var EasySupport = GObject.registerClass(
+class EasySupport extends St.BoxLayout {
+    _init() {
+        super._init({
+            style_class: 'notification-center-easy-support',
+            vertical: true,
+            y_align: Clutter.ActorAlign.END,
+            y_expand: true,
+        });
+
+        this._syncId = 0;
+        this._adapter = null;
+
+        this._bluetoothHadSetupDevices  = global.settings.get_boolean('had-bluetooth-devices-setup');
+        this._proxy = new RfkillManagerProxy(Gio.DBus.session, 'org.gnome.SettingsDaemon.Rfkill', '/org/gnome/SettingsDaemon/Rfkill',
+            (proxy, error) => {
+                if (error) {
+                    log(error.message);
+                    return;
+                }
+                this._sync();
+            });
+        this._client = new GnomeBluetooth.Client();
+        this._model = this._client.get_model();
+
+        /* easySupport section is consist of supportControl (Row)  & supportIconRow (Row) ,
+           supportControl is used to control easySupport's mode
+           For example, simple mode, detail mode, edit mode can be used.
+        */
+        this.supportIconSimpleMode = true;
+
+        this.supportControl    = new St.BoxLayout({ style_class: 'notification-center-support-control-row' });
+
+        this.supportControlArrowButton = new St.Button({
+            reactive: true,
+            style_class: 'notification-center-support-control-button-arrow',
+        });
+        this.supportControlUpArrow  = new St.Icon({
+            gicon: Gio.icon_new_for_string(`${Me.path}/img/tos_desktop_ic_alarm_arrow_up.svg`),
+            icon_size: 24,
+        });
+        this.supportControlDownArrow  = new St.Icon({
+            gicon: Gio.icon_new_for_string(`${Me.path}/img/tos_desktop_ic_alarm_arrow_down.svg`),
+            icon_size: 24,
+        });
+
+        this.supportControlEditButton = new St.Button({ reactive: true,
+            style_class: 'notification-center-support-control-button-edit',
+            x_align: Clutter.ActorAlign.END,
+            x_expand: true });
+        this.supportControlEditButton.set_size(24, 24);
+
+        this.supportControlEdit = new St.Icon({
+            gicon: Gio.icon_new_for_string(`${Me.path}/img/tos_desktop_ic_alarm_edit.svg`),
+            icon_size: 18,
+        });
+
+        this.supportControlRefreshButton = new St.Button({
+            reactive: true,
+            style_class: 'notification-center-support-control-refresh',
+            x_align: Clutter.ActorAlign.END,
+            x_expand: true,
+        });
+        this.supportControlRefresh = new St.Icon({
+            gicon: Gio.icon_new_for_string(`${Me.path}/img/tos_desktop_ic_alarm_refresh.svg`),
+            icon_size: 24,
+        });
+
+        this.supportControlDoneButton = new St.Button({
+            reactive: true,
+            style_class: 'notification-center-support-control-done',
+        });
+        this.supportControlDone = new St.Label({
+            text: _('Done'),
+            x_align: Clutter.ActorAlign.END,
+        });
+
+        this.supportIconRow = new St.BoxLayout({ style_class: 'notification-center-support-icon-row' });
+
+        this.alarmIcon      = new SupportIcon('tos_desktop_ic_alarm_alarm.svg', _('Alarm'), true);
+        this.bluetoothIcon  = new SupportIcon('tos_ic_alram_blutooth.svg', _('Bluetooth'), true);
+    }
+
+    makeSection() {
+        this.add_child(this.supportControl);
+
+        this.supportControlArrowButton.set_child(this.supportControlUpArrow);
+        this.supportControl.add_child(this.supportControlArrowButton);
+        this.supportControlEditButton.set_child(this.supportControlEdit);
+        this.supportControlDoneButton.set_child(this.supportControlDone);
+        this.supportControlRefreshButton.set_child(this.supportControlRefresh);
+        this.supportControl.add_child(this.supportControlEditButton);
+        this.supportControl.add_actor(this.supportControlRefreshButton);
+        this.supportControl.add_actor(this.supportControlDoneButton);
+
+        this.supportControlRefreshButton.hide();
+        this.supportControlDoneButton.hide();
+
+        this.supportControlArrowButton.connect('clicked', () => this.changeEasySupportViewMode());
+        this.supportControlEditButton.connect('clicked', () => this.enterEasySupportEditMode());
+        this.supportControlRefreshButton.connect('clicked', () => this.refreshEasySupportLayout());
+        this.supportControlDoneButton.connect('clicked', () => this.leaveEasySupportEditMode());
+        this.add_child(this.supportIconRow);
+
+        this.supportIconRow.add_child(this.alarmIcon);
+        this.supportIconRow.add_child(this.bluetoothIcon);
+
+        this.supportIconRow.add_child(new SupportIcon('tos_desktop_ic_alarm_wifi.svg', _('Network'), false));
+        this.supportIconRow.add_child(new SupportIcon('tos_desktop_ic_alarm_setting.svg', _('Setting'), false));
+        this.supportIconRow.add_child(new SupportIcon('tos_desktop_ic_alarm_lock.svg', _('Lock Screen'), false));
+
+        // Because button is designed private property, we need to connectButton method in SupportIcon class.
+        this.bluetoothIcon._button.connect('clicked', () =>  {
+            this._proxy.BluetoothAirplaneMode =  !this._proxy.BluetoothAirplaneMode;
+        });
+
+        this.supportIconRow.get_child_at_index(2)._button.connect('clicked', () =>  Util.spawnCommandLine('gnome-control-center network'));
+        this.supportIconRow.get_child_at_index(3)._button.connect('clicked', () =>  Util.spawnCommandLine('gnome-control-center info-overview'));
+        this.supportIconRow.get_child_at_index(4)._button.connect('clicked', () =>  SystemActions.activateLockScreen());
+
+        // this._model.connect('row-deleted', this._queueSync.bind(this));
+        // this._model.connect('row-changed', this._queueSync.bind(this));
+        // this._model.connect('row-inserted', this._sync.bind(this));
+        this.propertyChangeId = this._proxy.connect('g-properties-changed', this._queueSync.bind(this));
+
+        this._sync();
+    }
+
+    destroySection() {
+        this.disconnectSignals();
+        this.destroy();
+    }
+
+    disconnectSignals() {
+
+        this._proxy.disconnect(this.propertyChangeId);
+        this._proxy.run_dispose();
+        this._proxy = null;
+        this._client.run_dispose();
+        this._client = null;
+    }
+
+    /* In EasySupport Box, we can enable & disable icon's view mode */
+    changeEasySupportViewMode() {
+        let supportIcons = this.supportIconRow.get_children();
+        this.supportIconSimpleMode = !this.supportIconSimpleMode;
+        if (this.supportIconSimpleMode) {
+            this.supportControlArrowButton.set_child(this.supportControlUpArrow);
+            this.remove_style_pseudo_class('detail');
+        } else {
+            this.supportControlArrowButton.set_child(this.supportControlDownArrow);
+            this.set_style_pseudo_class('detail');
+        }
+        for (let i = 0; i < supportIcons.length; i++)
+            supportIcons[i].setSimpleView(this.supportIconSimpleMode);
+    }
+
+    /* when EasySupport enter edit mode, we have to show all the information,
+    and also, we need to disable ArrowButton reactive logic.
+    Because, It fixed detail mode
+    */
+    enterEasySupportEditMode() {
+        let supportIcons = this.supportIconRow.get_children();
+
+        if (this.supportIconSimpleMode) {
+            this.supportControlArrowButton.set_child(this.supportControlDownArrow);
+            this.set_style_pseudo_class('detail');
+        }
+
+        for (let i = 0; i < supportIcons.length; i++)
+            supportIcons[i].enterEditView();
+
+        this.supportControlArrowButton.set_reactive(false);
+
+        this.supportControlEditButton.hide();
+        this.supportControlRefreshButton.show();
+        this.supportControlDoneButton.show();
+    }
+
+    /* when EasySupport leave edit mode, we need to restore EasySupport setting */
+    leaveEasySupportEditMode() {
+        let supportIcons = this.supportIconRow.get_children();
+
+        if (this.supportIconSimpleMode) {
+            this.supportControlArrowButton.set_child(this.supportControlUpArrow);
+            this.remove_style_pseudo_class('detail');
+        }
+
+        for (let i = 0; i < supportIcons.length; i++)
+            supportIcons[i].leaveEditView(this.supportIconSimpleMode);
+
+        this.supportControlArrowButton.set_reactive(true);
+
+        this.supportControlEditButton.show();
+        this.supportControlRefreshButton.hide();
+        this.supportControlDoneButton.hide();
+    }
+
+    refreshEasySupportLayout() {
+        let supportIcons = this.supportIconRow.get_children();
+
+        for (let i = 0; i < supportIcons.length; i++)
+            supportIcons[i].show();
+    }
+
+    _setBluetoothHadSetupDevices(value) {
+        if (this._bluetoothHadSetupDevices === value)
+            return;
+
+        this._bluetoothHadSetupDevices = value;
+        global.settings.set_boolean(
+            'had-bluetooth-devices-setup', this._bluetoothHadSetupDevices);
+    }
+
+    _getDefaultBluetoothAdapter() {
+        let [ret, iter] = this._model.get_iter_first();
+        while (ret) {
+            let isDefault = this._model.get_value(iter,
+                GnomeBluetooth.Column.DEFAULT);
+            let isPowered = this._model.get_value(iter,
+                GnomeBluetooth.Column.POWERED);
+            if (isDefault && isPowered)
+                return iter;
+            ret = this._model.iter_next(iter);
+        }
+        return null;
+    }
+
+    _getBluetoothDeviceInfos(adapter) {
+        if (!adapter)
+            return [];
+
+        let deviceInfos = [];
+        let [ret, iter] = this._model.iter_children(adapter);
+        while (ret) {
+            const isPaired = this._model.get_value(iter,
+                GnomeBluetooth.Column.PAIRED);
+            const isTrusted = this._model.get_value(iter,
+                GnomeBluetooth.Column.TRUSTED);
+
+            if (isPaired || isTrusted) {
+                deviceInfos.push({
+                    connected: this._model.get_value(iter,
+                        GnomeBluetooth.Column.CONNECTED),
+                    name: this._model.get_value(iter,
+                        GnomeBluetooth.Column.ALIAS),
+                });
+            }
+
+            ret = this._model.iter_next(iter);
+        }
+
+        return deviceInfos;
+    }
+
+    _queueSync() {
+        if (this._syncId)
+            return;
+        this._syncId = GLib.idle_add(GLib.PRIORITY_DEFAULT, () => {
+            this._syncId = 0;
+            this._sync();
+            return GLib.SOURCE_REMOVE;
+        });
+    }
+
+    _sync() {
+        let adapter = this._getDefaultBluetoothAdapter();
+        let devices = this._getBluetoothDeviceInfos(adapter);
+
+        if (adapter && this._adapter)
+            this._setBluetoothHadSetupDevices(devices.length > 0);
+        this._adapter = adapter;
+
+        // Remember if there were setup devices and show the menu
+        // if we've seen setup devices and we're not hard blocked
+        if (this._bluetoothHadSetupDevices)
+            this.bluetoothIcon.setStatus(!this._proxy.BluetoothHardwareAirplaneMode);
+        else
+            this.bluetoothIcon.setStatus(this._proxy.BluetoothHasAirplaneMode && !this._proxy.BluetoothAirplaneMode);
+    }
+});
+
+/*
+  SupportIcon is used to implment Easy support section
+  SupportIcon consists of its icon images, its title label, its status label.
+*/
+var SupportIcon = GObject.registerClass(
+class SupportIcon extends St.BoxLayout {
+    _init(iconName, name, isToggle) {
+        super._init({
+            style_class: 'notification-center-support-icon',
+            vertical: true,
+        });
+
+        // initialize inner component
+        // Buttons, Label, widget
+        this._canvas = new St.Widget({
+            reactive: true,
+            layout_manager: new Clutter.BinLayout(),
+        });
+
+        this._button = new St.Button({
+            reactive: true,
+        });
+        this._closeButton = new St.Button({
+            reactive: true,
+            x_expand: true,
+            y_expand: true,
+            x_align: Clutter.ActorAlign.END,
+            y_align: Clutter.ActorAlign.START,
+            style_class: 'notification-center-support-icon-close-button',
+        });
+
+        this._icon = new St.Icon({
+            gicon: Gio.icon_new_for_string(`${`${Me.path}/img/${iconName}`}`),
+            icon_size: 20,
+            x_expand: true,
+            y_expand: true,
+            x_align: Clutter.ActorAlign.CENTER,
+            y_align: Clutter.ActorAlign.CENTER,
+        });
+
+        this._closeIconBlack = Gio.icon_new_for_string(`${`${Me.path}/img/tos_desktop_ic_alarm_cancel_b.svg`}`);
+        this._closeIconWhite = Gio.icon_new_for_string(`${`${Me.path}/img/tos_desktop_ic_alarm_cancel_w.svg`}`);
+        this._closeIcon = new St.Icon({
+            reactive: true,
+            gicon: this._closeIconBlack,
+            icon_size: 18,
+        });
+
+        this._title = new St.Label({
+            style_class: 'notification-center-support-icon-label',
+            text: name,
+        });
+        this._status = new St.Label({
+            style_class: 'notification-center-support-icon-label',
+        });
+
+        if (isToggle)
+            this._button.set_style_class_name('notification-center-support-icon-toggle-button-on');
+        else
+            this._button.set_style_class_name('notification-center-support-icon-button');
+        this._isToggle = isToggle;
+        this._button.set_size(48, 48);
+
+
+        // allocate it's view tree.
+        this.add_child(this._canvas);
+
+        this._canvas.add_actor(this._button);
+        this._canvas.add_actor(this._closeButton);
+
+        this._button.set_child(this._icon);
+        this._closeButton.set_child(this._closeIcon);
+
+        this.add_child(this._title);
+        this.add_child(this._status);
+
+        if (isToggle) {
+            this._button.set_style_class_name('notification-center-support-icon-toggle-button-on');
+            this._status.set_text('On');
+        } else {
+            this._button.set_style_class_name('notification-center-support-icon-button');
+        }
+
+        this._title.hide();
+        this._status.hide();
+        this._closeButton.hide();
+
+        this._closeButton.connect('clicked', () => this.hide());
+        this._closeButton.connect('motion-event', () => this._closeIcon.set_gicon(this._closeIconWhite));
+        this._closeButton.connect('leave-event', () => this._closeIcon.set_gicon(this._closeIconBlack));
+    }
+
+    /* In case of toggle buttons, for example alarm & bluetooth, we have to apply different style depend on status */
+    setStatus(_status) {
+        if (this._isToggle) {
+            if (_status) {
+                this._button.set_style_class_name('notification-center-support-icon-toggle-button-on');
+                this._status.set_text('On');
+            } else {
+                this._button.set_style_class_name('notification-center-support-icon-toggle-button-off');
+                this._status.set_text('Off');
+            }
+        }
+    }
+
+    /* If SimpleView is enabled, Icon's labels are hidden */
+    setSimpleView(_isSimple) {
+        if (_isSimple) {
+            this._title.hide();
+            this._status.hide();
+        } else {
+            this._title.show();
+            this._status.show();
+        }
+    }
+
+    /* If Editode is enabled, we need to show all component */
+    enterEditView() {
+        this._title.show();
+        this._status.show();
+        this._closeButton.show();
+    }
+
+    /* If Editmode is disabled, we need to restore previous view */
+    leaveEditView(_isSimple) {
+        this.setSimpleView(_isSimple);
+        this._closeButton.hide();
+    }
+});
diff --git a/extensions/notification-center/extension.js b/extensions/notification-center/extension.js
index 34cf184..e4816b2 100644
--- a/extensions/notification-center/extension.js
+++ b/extensions/notification-center/extension.js
@@ -1,19 +1,15 @@
-
 /*
 Version 22.03
 =============
-
 */
 
 const { Clutter, Gio, GLib, GnomeBluetooth, GObject, Meta, Shell, St } = imports.gi;
 
-const SystemActions       = imports.misc.systemActions.getDefault();
-const Util                = imports.misc.util;
-const { loadInterfaceXML } = imports.misc.fileUtils;
 const Config              = imports.misc.config;
 const ExtensionUtils      = imports.misc.extensionUtils;
-const Me                  = imports.misc.extensionUtils.getCurrentExtension();
+const Me                  = ExtensionUtils.getCurrentExtension();
 const NoticeApplet = Me.imports.noticeApplet;
+const EasySupport = Me.imports.easySupport;
 
 const Gettext             = imports.gettext;
 const LangClass           = imports.lang.Class;
@@ -24,191 +20,48 @@ const Main                = imports.ui.main;
 const PanelMenuButton     = imports.ui.panelMenu.Button;
 const ShellActionMode     = Shell.ActionMode;
 
-const _                   = imports.gettext.domain('notification-center').gettext;
-
-const RfkillManagerInterface = loadInterfaceXML('org.gnome.SettingsDaemon.Rfkill');
-const RfkillManagerProxy = Gio.DBusProxy.makeProxyWrapper(RfkillManagerInterface);
+const _                   = Gettext.domain('notification-center').gettext;
 
 let notificationCenter = null;
 var UseNoticeApplet = true;
 
-function enable() {
+function init() { // eslint-disable-line no-unused-vars
+}
 
+function enable() {
     notificationCenter = new NotificationCenter();
     notificationCenter.startNotificationCenter();
     reloadExtensionOnPrefsChange();
     reloadApplicationProfilesOnPrefsChange();
-
 }
 
 function disable() {
     notificationCenter.undoChanges();
     notificationCenter.destroy();
-
 }
 
 function reloadApplicationProfilesOnPrefsChange() {
-
     // Reloads Application Profiles when preferences are changed.
     notificationCenter.reloadProfilesSignal = notificationCenter.prefs.connect('changed::reload-profiles-signal', () => notificationCenter.loadPreferences());
-
 }
 
 function reloadExtensionOnPrefsChange() {
-
     // Reloads the Extension when preferences are changed.
     notificationCenter.reloadSignal = notificationCenter.prefs.connect('changed::reload-signal', () => {
         disable();
         enable();
     });
-
 }
 
-/*
-  SupportIcon is used to implment Easy support section
-  SupportIcon consists of its icon images, its title label, its status label.
-*/
-
-var SupportIcon = GObject.registerClass(
-class SupportIcon extends St.BoxLayout {
-    _init(iconName, name, isToggle) {
-        super._init({
-            style_class: 'notification-center-support-icon',
-            vertical: true,
-        });
-
-        // initialize inner component
-        // Buttons, Label, widget
-
-        this._canvas = new St.Widget({
-            reactive: true,
-            layout_manager: new Clutter.BinLayout(),
-        });
-
-        this._button = new St.Button({
-            reactive: true,
-        });
-        this._closeButton = new St.Button({
-            reactive: true,
-            x_expand: true,
-            y_expand: true,
-            x_align: Clutter.ActorAlign.END,
-            y_align: Clutter.ActorAlign.START,
-            style_class: 'notification-center-support-icon-close-button',
-        });
-
-        this._icon = new St.Icon({
-            gicon: Gio.icon_new_for_string(`${`${Me.path}/img/${iconName}`}`),
-            icon_size: 20,
-            x_expand: true,
-            y_expand: true,
-            x_align: Clutter.ActorAlign.CENTER,
-            y_align: Clutter.ActorAlign.CENTER,
-        });
-
-        this._closeIconBlack = Gio.icon_new_for_string(`${`${Me.path}/img/tos_desktop_ic_alarm_cancel_b.svg`}`);
-        this._closeIconWhite = Gio.icon_new_for_string(`${`${Me.path}/img/tos_desktop_ic_alarm_cancel_w.svg`}`);
-        this._closeIcon = new St.Icon({
-            reactive: true,
-            gicon: this._closeIconBlack,
-            icon_size: 18,
-        });
-
-        this._title = new St.Label({
-            style_class: 'notification-center-support-icon-label',
-            text: name,
-        });
-        this._status = new St.Label({
-            style_class: 'notification-center-support-icon-label',
-        });
-
-        if (isToggle)
-            this._button.set_style_class_name('notification-center-support-icon-toggle-button-on');
-        else
-            this._button.set_style_class_name('notification-center-support-icon-button');
-        this._isToggle = isToggle;
-        this._button.set_size(48, 48);
-
-
-        // allocate it's view tree.
-
-        this.add_child(this._canvas);
-
-        this._canvas.add_actor(this._button);
-        this._canvas.add_actor(this._closeButton);
-
-        this._button.set_child(this._icon);
-        this._closeButton.set_child(this._closeIcon);
-
-        this.add_child(this._title);
-        this.add_child(this._status);
-
-        if (isToggle) {
-            this._button.set_style_class_name('notification-center-support-icon-toggle-button-on');
-            this._status.set_text('On');
-        } else {
-            this._button.set_style_class_name('notification-center-support-icon-button');
-        }
-
-        this._title.hide();
-        this._status.hide();
-        this._closeButton.hide();
-
-        this._closeButton.connect('clicked', () => this.hide());
-        this._closeButton.connect('motion-event', () => this._closeIcon.set_gicon(this._closeIconWhite));
-        this._closeButton.connect('leave-event', () => this._closeIcon.set_gicon(this._closeIconBlack));
-    }
-
-    /* In case of toggle buttons, for example alarm & bluetooth, we have to apply different style depend on status */
-    setStatus(_status) {
-        if (this._isToggle) {
-            if (_status) {
-                this._button.set_style_class_name('notification-center-support-icon-toggle-button-on');
-                this._status.set_text('On');
-            } else {
-                this._button.set_style_class_name('notification-center-support-icon-toggle-button-off');
-                this._status.set_text('Off');
-            }
-        }
-    }
-
-    /* If SimpleView is enabled, Icon's labels are hidden */
-    setSimpleView(_isSimple) {
-        if (_isSimple) {
-            this._title.hide();
-            this._status.hide();
-        } else {
-            this._title.show();
-            this._status.show();
-        }
-    }
-
-    /* If Editode is enabled, we need to show all component */
-    enterEditView() {
-        this._title.show();
-        this._status.show();
-        this._closeButton.show();
-    }
-
-    /* If Editmode is disabled, we need to restore previous view */
-    leaveEditView(_isSimple) {
-        this.setSimpleView(_isSimple);
-        this._closeButton.hide();
-    }
-});
-
 const NotificationCenter = new LangClass({
-
     Name: 'NotificationCenter',
     Extends: PanelMenuButton,
 
     _init() {
-
         Gettext.bindtextdomain('notification-center', Config.LOCALEDIR);
         this.prefs = ExtensionUtils.getSettings('org.gnome.shell.extensions.notification-center');
         this.parent(1 - 0.5 * this.prefs.get_enum('indicator-pos'), 'NotificationCenter');
 
-        this._systemActions         = SystemActions;
         this._messageList           = Main.panel.statusArea.dateMenu._messageList;
         this.mediaSection           = this._messageList._mediaSection;
         this.notificationSection    = this._messageList._notificationSection;
@@ -224,21 +77,6 @@ const NotificationCenter = new LangClass({
         this.reloadSignal         = null;
         this.reloadProfilesSignal = null;
 
-        this._syncId = 0;
-        this._adapter = null;
-
-        this._bluetoothHadSetupDevices  = global.settings.get_boolean('had-bluetooth-devices-setup');
-        this._proxy = new RfkillManagerProxy(Gio.DBus.session, 'org.gnome.SettingsDaemon.Rfkill', '/org/gnome/SettingsDaemon/Rfkill',
-            (proxy, error) => {
-                if (error) {
-                    log(error.message);
-                    return;
-                }
-                this._sync();
-            });
-        this._client = new GnomeBluetooth.Client();
-        this._model = this._client.get_model();
-
         this.textureCache         = St.TextureCache.get_default();
         this.iconThemeChangeSig   = null;
         this.notificationIconName = null;
@@ -273,63 +111,8 @@ const NotificationCenter = new LangClass({
 
         this.clearButton       = new St.Button({ style_class: 'notification-center-clear-button button', label: _('Clear'), can_focus: true, visible: false, x_expand: true });
 
-        /* easySupport section is consist of supportControl (Row)  & supportIconRow (Row) ,
-           supportControl is used to control easySupport's mode
-           For example, simple mode, detail mode, edit mode can be used.
-        */
-        this.supportIconSimpleMode = true;
-
-        this.easySupport       = new St.BoxLayout({ style_class: 'notification-center-easy-support', vertical: true, y_align: Clutter.ActorAlign.END, y_expand: true });
-        this.supportControl    = new St.BoxLayout({ style_class: 'notification-center-support-control-row' });
-
-        this.supportControlArrowButton = new St.Button({
-            reactive: true,
-            style_class: 'notification-center-support-control-button-arrow',
-        });
-        this.supportControlUpArrow  = new St.Icon({
-            gicon: Gio.icon_new_for_string(`${Me.path}/img/tos_desktop_ic_alarm_arrow_up.svg`),
-            icon_size: 24,
-        });
-        this.supportControlDownArrow  = new St.Icon({
-            gicon: Gio.icon_new_for_string(`${Me.path}/img/tos_desktop_ic_alarm_arrow_down.svg`),
-            icon_size: 24,
-        });
-
-        this.supportControlEditButton = new St.Button({ reactive: true,
-            style_class: 'notification-center-support-control-button-edit',
-            x_align: Clutter.ActorAlign.END,
-            x_expand: true });
-        this.supportControlEditButton.set_size(24, 24);
-
-        this.supportControlEdit = new St.Icon({
-            gicon: Gio.icon_new_for_string(`${Me.path}/img/tos_desktop_ic_alarm_edit.svg`),
-            icon_size: 18,
-        });
-
-        this.supportControlRefreshButton = new St.Button({
-            reactive: true,
-            style_class: 'notification-center-support-control-refresh',
-            x_align: Clutter.ActorAlign.END,
-            x_expand: true,
-        });
-        this.supportControlRefresh = new St.Icon({
-            gicon: Gio.icon_new_for_string(`${Me.path}/img/tos_desktop_ic_alarm_refresh.svg`),
-            icon_size: 24,
-        });
-
-        this.supportControlDoneButton = new St.Button({
-            reactive: true,
-            style_class: 'notification-center-support-control-done',
-        });
-        this.supportControlDone = new St.Label({
-            text: _('Done'),
-            x_align: Clutter.ActorAlign.END,
-        });
-
-        this.supportIconRow = new St.BoxLayout({ style_class: 'notification-center-support-icon-row' });
-
-        this.alarmIcon      = new SupportIcon('tos_desktop_ic_alarm_alarm.svg', _('Alarm'), true);
-        this.bluetoothIcon  = new SupportIcon('tos_ic_alram_blutooth.svg', _('Bluetooth'), true);
+        this.easySupport = new EasySupport.EasySupport();
+        // this.easySupport       = new St.BoxLayout({ style_class: 'notification-center-easy-support', vertical: true, y_align: Clutter.ActorAlign.END, y_expand: true });
 
         let scaleFactor     = St.ThemeContext.get_for_stage(global.stage).scale_factor;
         this.scrollView     = new St.ScrollView({
@@ -352,7 +135,6 @@ const NotificationCenter = new LangClass({
     },
 
     animateOnNewNotification(times, op = 254, angle = 3) {
-
         if (times === 0 || !this.animateIcon) {
             this.notificationIcon.ease({
                 duration: 150,
@@ -377,11 +159,9 @@ const NotificationCenter = new LangClass({
             rotation_angle_z: angle,
             onComplete: () =>  this.animateOnNewNotification(--times, op - 1, -angle),
         });
-
     },
 
     blinkIcon(blinkTimes, interval, opacity) {
-
         if (blinkTimes > 0) {
             this.notificationIcon.ease({
                 duration: interval,
@@ -389,20 +169,15 @@ const NotificationCenter = new LangClass({
                 onComplete: () => this.blinkIcon(--blinkTimes, interval, opacity === 255 ? 100 : 255),
             });
         }
-
     },
 
     blinkIconStopIfBlinking() {
-
         this.notificationIcon.remove_all_transitions();
         this.notificationIcon.set_opacity(255);
-
     },
 
     dndToggle() {
-
         this.dndpref.set_boolean('show-banners', !this.dndpref.get_boolean('show-banners'));
-
     },
 
     /*
@@ -414,7 +189,6 @@ const NotificationCenter = new LangClass({
   Above reason, isDndoff = get_value(show-banners)
 */
     loadDndStatus() {
-
         this.isDndOff = this.dndpref.get_boolean('show-banners');
 
         this.blinkIconStopIfBlinking();
@@ -427,7 +201,7 @@ const NotificationCenter = new LangClass({
             this.notificationIcon.gicon = Gio.icon_new_for_string(`${Me.path}/img/tos_ic_notification.svg`);
 
         if (this.isDndOff) {
-            this.alarmIcon.setStatus(true);
+            this.easySupport.alarmIcon.setStatus(true);
             this.notificationIcon.set_opacity(255);
             this.manageLabel();
             return false;
@@ -440,11 +214,9 @@ const NotificationCenter = new LangClass({
         this.notificationLabel.hide();
         this.eventsLabel.hide();
         return true;
-
     },
 
     loadPreferences() {
-
         this.autohide                     = this.prefs.get_int('autohide');
         this.mediaSectionToBeShown        = this.prefs.get_int('show-media') > 0;
         this.notificationSectionToBeShown = this.prefs.get_int('show-notification') > 0;
@@ -466,11 +238,9 @@ const NotificationCenter = new LangClass({
         this.blinkCount                   = this.prefs.get_int('blink-icon') * 2;
         this.showLabel                    = this.prefs.get_boolean('show-label');
         this.changeIcons                  = this.prefs.get_boolean('change-icons');
-
     },
 
     manageAutohide() {
-
         if (!this.menu.isOpen) {
             this.mediaIcon.visible        = this.mediaSection._shouldShow() && this.showThreeIcons && this.mediaSectionToBeShown;
             this.eventsIcon.visible       = this.shouldShowEventsSection() && this.showThreeIcons && this.eventsSectionToBeShown;
@@ -485,11 +255,9 @@ const NotificationCenter = new LangClass({
             }
             this.visible = false;
         }
-
     },
 
     manageEvents(action) {
-
         this.eventsSection.visible = this.shouldShowEventsSection() || this.hideEventsSectionIfEmpty;
 
         if (this.showEventsInCalendarAlso === true) {
@@ -509,47 +277,33 @@ const NotificationCenter = new LangClass({
                 this.box.remove_child(this.box.get_children()[this.showingSections.indexOf('events')]);
                 this.newEventsSectionParent.insert_child_at_index(this.eventsSection, 0);
                 this.eventsSectionhere = false;
-
             }
         }
     },
 
     manageLabel(nCount, eCount) {
-
         this.notificationLabel.visible = nCount * this.newNotificationAction;
         this.eventsLabel.visible = eCount * this.newNotificationAction && this.shouldShowEventsSection() > 0;
 
         if (this.changeIcons)
             this.manageIconChange(nCount > 0 || eCount > 0);
 
-
         if (this.newNotificationAction === 2) {
-
             if (nCount > 0)
                 this.notificationLabel.text = `${nCount.toString()} `;
-
             if (eCount > 0)
                 this.eventsLabel.text = `${eCount.toString()} `;
-
-
         }
-
     },
 
     manageIconChange(statusIcon) {
-
         let iconName = statusIcon ? 'notification-center-full' : 'notification-center-empty';
-
         this.notificationIcon.icon_name = iconName;
-
     },
 
     middleClickDndToggle(actor, event) {
-
         switch (event.get_button()) {
-
         case 2: // if middle click
-
             // close the menu, since it gets open on any click
             if (this.menu.isOpen)
                 this.menu.actor.hide();
@@ -558,13 +312,10 @@ const NotificationCenter = new LangClass({
             this.dndToggle();
             // reload dnd status
             this.loadDndStatus();
-
         }
-
     },
 
     newNotif(messageType) {
-
         Main.messageTray._bannerBin.visible = true;
         switch (messageType) {
         case 'media':
@@ -602,7 +353,6 @@ const NotificationCenter = new LangClass({
     },
 
     remNotif(messageType) {
-
         switch (messageType) {
         case 'media':
             this.mediaCount--;
@@ -610,20 +360,16 @@ const NotificationCenter = new LangClass({
         case 'notification':
             if (this.notificationCount > 0)
                 this.notificationCount--;
-
             break;
         case 'events':
             if (this.eventsCount > 0)
                 this.eventCount--;
-
             break;
         }
         this.resetIndicator();
-
     },
 
     _removeSection(section) {
-
         if (section === this.eventsSection) {
             this.newEventsSectionParent.remove_actor(this.eventsSection);
             return;
@@ -631,11 +377,9 @@ const NotificationCenter = new LangClass({
 
         this._messageList._sectionList.remove_actor(section);
         this._messageList._sync();
-
     },
 
     resetIndicator() {
-
         this.manageAutohide();
         this.clearButton.visible = this.notificationSection._canClear && this.notificationSectionToBeShown;
         this.emptyIcon.visible = !this.clearButton.visible;
@@ -644,12 +388,9 @@ const NotificationCenter = new LangClass({
 
         if (this.isDndOff)
             this.manageLabel(this.notificationCount + !this.showThreeIcons * this.eventsCount, this.showThreeIcons * this.eventsCount);
-
-
     },
 
     _onOpenStateChanged(menu, open) {
-
         if (!open) {
             this.resetIndicator();
             this.remove_style_pseudo_class('active');
@@ -669,104 +410,31 @@ const NotificationCenter = new LangClass({
         this.resetIndicator();
 
         this.menu.actor.height = 0.9 * Main.layoutManager.primaryMonitor.height;
-
     },
 
     setNotificationIconName() {
-
         this.notificationIconName = null;
         /* if (Gtk.IconTheme.get_default())
             this.notificationIconName = Gtk.IconTheme.get_default().has_icon('notification-symbolic') ? 'notification-symbolic' : 'preferences-system-notifications-symbolic';
-
         else
             this.notificationIconName = 'preferences-system-notifications-symbolic';*/
-
-
     },
 
     iconThemeChanged() {
-
         this.setNotificationIconName();
         this.loadDndStatus();
-
-    },
-
-    /* In EasySupport Box, we can enable & disable icon's view mode */
-    changeEasySupportViewMode() {
-        let supportIcons = this.supportIconRow.get_children();
-        this.supportIconSimpleMode = !this.supportIconSimpleMode;
-        if (this.supportIconSimpleMode) {
-            this.supportControlArrowButton.set_child(this.supportControlUpArrow);
-            this.easySupport.remove_style_pseudo_class('detail');
-        } else {
-            this.supportControlArrowButton.set_child(this.supportControlDownArrow);
-            this.easySupport.set_style_pseudo_class('detail');
-        }
-        for (let i = 0; i < supportIcons.length; i++)
-            supportIcons[i].setSimpleView(this.supportIconSimpleMode);
-    },
-
-    /* when EasySupport enter edit mode, we have to show all the information,
-    and also, we need to disable ArrowButton reactive logic.
-    Because, It fixed detail mode
-    */
-    enterEasySupportEditMode() {
-        let supportIcons = this.supportIconRow.get_children();
-
-        if (this.supportIconSimpleMode) {
-            this.supportControlArrowButton.set_child(this.supportControlDownArrow);
-            this.easySupport.set_style_pseudo_class('detail');
-        }
-
-        for (let i = 0; i < supportIcons.length; i++)
-            supportIcons[i].enterEditView();
-
-        this.supportControlArrowButton.set_reactive(false);
-
-        this.supportControlEditButton.hide();
-        this.supportControlRefreshButton.show();
-        this.supportControlDoneButton.show();
-    },
-
-    /* when EasySupport leave edit mode, we need to restore EasySupport setting */
-    leaveEasySupportEditMode() {
-        let supportIcons = this.supportIconRow.get_children();
-
-        if (this.supportIconSimpleMode) {
-            this.supportControlArrowButton.set_child(this.supportControlUpArrow);
-            this.easySupport.remove_style_pseudo_class('detail');
-        }
-
-        for (let i = 0; i < supportIcons.length; i++)
-            supportIcons[i].leaveEditView(this.supportIconSimpleMode);
-
-        this.supportControlArrowButton.set_reactive(true);
-
-        this.supportControlEditButton.show();
-        this.supportControlRefreshButton.hide();
-        this.supportControlDoneButton.hide();
-    },
-
-    refreshEasySupportLayout() {
-        let supportIcons = this.supportIconRow.get_children();
-
-        for (let i = 0; i < supportIcons.length; i++)
-            supportIcons[i].show();
     },
 
     shouldShowEventsSection() {
-
         switch (this.eventsSection._eventsList.get_children().length) {
         case 0:
             return 0;
         default:
             return this.eventsSection._eventsList.get_children()[0].text === _('No Events') ? 0 : this.eventsSection._eventsList.get_children().length;
         }
-
     },
 
     startNotificationCenter() {
-
         this.add_child(this._indicator);
 
         this._indicator.add_child(this.eventsIcon);
@@ -822,55 +490,15 @@ const NotificationCenter = new LangClass({
             this.menu.box.add_actor(this.noticeButton);
 
         this.menu.box.add_actor(this.easySupport);
-        this.menu.box.style = 'padding-bottom:0px;';
-
-        this.easySupport.add_child(this.supportControl);
-
-        this.supportControlArrowButton.set_child(this.supportControlUpArrow);
-        this.supportControl.add_child(this.supportControlArrowButton);
-        this.supportControlEditButton.set_child(this.supportControlEdit);
-        this.supportControlDoneButton.set_child(this.supportControlDone);
-        this.supportControlRefreshButton.set_child(this.supportControlRefresh);
-        this.supportControl.add_child(this.supportControlEditButton);
-        this.supportControl.add_actor(this.supportControlRefreshButton);
-        this.supportControl.add_actor(this.supportControlDoneButton);
-
-        this.supportControlRefreshButton.hide();
-        this.supportControlDoneButton.hide();
-
-        this.supportControlArrowButton.connect('clicked', () => this.changeEasySupportViewMode());
-        this.supportControlEditButton.connect('clicked', () => this.enterEasySupportEditMode());
-        this.supportControlRefreshButton.connect('clicked', () => this.refreshEasySupportLayout());
-        this.supportControlDoneButton.connect('clicked', () => this.leaveEasySupportEditMode());
-        this.easySupport.add_child(this.supportIconRow);
-
-        this.supportIconRow.add_child(this.alarmIcon);
-        this.supportIconRow.add_child(this.bluetoothIcon);
-
-        this.supportIconRow.add_child(new SupportIcon('tos_desktop_ic_alarm_wifi.svg', _('Network'), false));
-        this.supportIconRow.add_child(new SupportIcon('tos_desktop_ic_alarm_setting.svg', _('Setting'), false));
-        this.supportIconRow.add_child(new SupportIcon('tos_desktop_ic_alarm_lock.svg', _('Lock Screen'), false));
-
-        // Because button is designed private property, we need to connectButton method in SupportIcon class.
-        this.alarmIcon._button.connect('clicked', () => this.dndToggle());
-        this.bluetoothIcon._button.connect('clicked', () =>  {
-            this._proxy.BluetoothAirplaneMode =  !this._proxy.BluetoothAirplaneMode;
-        });
-
-        this.supportIconRow.get_child_at_index(2)._button.connect('clicked', () =>  Util.spawnCommandLine('gnome-control-center network'));
-        this.supportIconRow.get_child_at_index(3)._button.connect('clicked', () =>  Util.spawnCommandLine('gnome-control-center info-overview'));
-        this.supportIconRow.get_child_at_index(4)._button.connect('clicked', () =>  this._systemActions.activateLockScreen());
 
-        this._model.connect('row-deleted', this._queueSync.bind(this));
-        this._model.connect('row-changed', this._queueSync.bind(this));
-        this._model.connect('row-inserted', this._sync.bind(this));
-        // Main.sessionMode.connect('updated', this._sync.bind(this));
-        this._proxy.connect('g-properties-changed', this._queueSync.bind(this));
+        this.menu.box.style = 'padding-bottom:0px;';
 
+        // add easysupport section
+        this.menu.box.add_actor(this.easySupport);
+        this.easySupport.makeSection();
+        this.easySupport.alarmIcon._button.connect('clicked', () => this.dndToggle());
 
         this.loadDndStatus();
-        this._sync();
-
         this.resetIndicator();
 
         Main.messageTray.bannerAlignment = this.prefs.get_enum('banner-pos');
@@ -932,23 +560,19 @@ const NotificationCenter = new LangClass({
                 this.eventsCount = this.seenEvents ? 0 : this.eventsCount;
                 this.resetIndicator();
             }
-
         });
 
         if (this.menuAutoclose) {
             this.cmsig = global.display.connect('notify::focus-window', () => {
                 if (global.display.focus_window !== null && this.menu.isOpen)
                     this.menu.close(1);
-
             });
         }
 
         this.defaultWeatherItemVisibility = Main.panel.statusArea.dateMenu._weatherItem.visible;
         Main.panel.statusArea.dateMenu._weatherItem.visible = !this.prefs.get_boolean('hide-weather-section') && this.defaultWeatherItemVisibility;
-
         this.defaultClocksItemVisibility = Main.panel.statusArea.dateMenu._clocksItem.visible;
         Main.panel.statusArea.dateMenu._clocksItem.visible =  !this.prefs.get_boolean('hide-clock-section') && this.defaultClocksItemVisibility;
-
         this.defaultDateVisibility = Main.panel.statusArea.dateMenu._date.visible;
         Main.panel.statusArea.dateMenu._date.visible =  !this.prefs.get_boolean('hide-date-section') && this.defaultDateVisibility;
 
@@ -1114,15 +738,12 @@ const NotificationCenter = new LangClass({
         if (this.menuAutoclose)
             global.display.disconnect(this.cmsig);
 
-
         if (this.dndSig !== null)
             this.dndpref.disconnect(this.dndSig);
 
-
         if (this.iconThemeChangeSig !== null)
             this.textureCache.disconnect(this.iconThemeChangeSig);
 
-
         Main.panel.statusArea.dateMenu.get_children()[0].insert_child_at_index(this.dtActors[0], 0);
         Main.panel.statusArea.dateMenu.get_children()[0].add_actor(Main.panel.statusArea.dateMenu._indicator);
 
@@ -1145,89 +766,11 @@ const NotificationCenter = new LangClass({
         this.emptyIcon.destroy();
         this.emptyLabel.destroy();
         this.titleLabel.destroy();
-        this.easySupport.destroy();
+        this.easySupport.destroySection();
         this.titleBox.destroy();
 
         this.prefs.disconnect(this.reloadSignal);
         this.prefs.disconnect(this.reloadProfilesSignal);
-
-    },
-
-    _setBluetoothHadSetupDevices(value) {
-        if (this._bluetoothHadSetupDevices === value)
-            return;
-
-        this._bluetoothHadSetupDevices = value;
-        global.settings.set_boolean(
-            'had-bluetooth-devices-setup', this._bluetoothHadSetupDevices);
-    },
-
-    _getDefaultBluetoothAdapter() {
-        let [ret, iter] = this._model.get_iter_first();
-        while (ret) {
-            let isDefault = this._model.get_value(iter,
-                GnomeBluetooth.Column.DEFAULT);
-            let isPowered = this._model.get_value(iter,
-                GnomeBluetooth.Column.POWERED);
-            if (isDefault && isPowered)
-                return iter;
-            ret = this._model.iter_next(iter);
-        }
-        return null;
-    },
-
-    _getBluetoothDeviceInfos(adapter) {
-        if (!adapter)
-            return [];
-
-        let deviceInfos = [];
-        let [ret, iter] = this._model.iter_children(adapter);
-        while (ret) {
-            const isPaired = this._model.get_value(iter,
-                GnomeBluetooth.Column.PAIRED);
-            const isTrusted = this._model.get_value(iter,
-                GnomeBluetooth.Column.TRUSTED);
-
-            if (isPaired || isTrusted) {
-                deviceInfos.push({
-                    connected: this._model.get_value(iter,
-                        GnomeBluetooth.Column.CONNECTED),
-                    name: this._model.get_value(iter,
-                        GnomeBluetooth.Column.ALIAS),
-                });
-            }
-
-            ret = this._model.iter_next(iter);
-        }
-
-        return deviceInfos;
-    },
-
-
-    _queueSync() {
-        if (this._syncId)
-            return;
-        this._syncId = GLib.idle_add(GLib.PRIORITY_DEFAULT, () => {
-            this._syncId = 0;
-            this._sync();
-            return GLib.SOURCE_REMOVE;
-        });
-    },
-
-    _sync() {
-        let adapter = this._getDefaultBluetoothAdapter();
-        let devices = this._getBluetoothDeviceInfos(adapter);
-
-        if (adapter && this._adapter)
-            this._setBluetoothHadSetupDevices(devices.length > 0);
-        this._adapter = adapter;
-
-        // Remember if there were setup devices and show the menu
-        // if we've seen setup devices and we're not hard blocked
-        if (this._bluetoothHadSetupDevices)
-            this.bluetoothIcon.setStatus(!this._proxy.BluetoothHardwareAirplaneMode);
-        else
-            this.bluetoothIcon.setStatus(this._proxy.BluetoothHasAirplaneMode && !this._proxy.BluetoothAirplaneMode);
     },
 
     _setMessageLayout(message)  {
diff --git a/extensions/notification-center/meson.build b/extensions/notification-center/meson.build
index 2e23b83..63dda0d 100644
--- a/extensions/notification-center/meson.build
+++ b/extensions/notification-center/meson.build
@@ -8,7 +8,8 @@ extension_data += configure_file(
 extension_sources += files(
   'extension.js',
   'prefs.js',
-  'noticeApplet.js'
+  'noticeApplet.js',
+  'easySupport.js',
 )
 
 extension_dir = join_paths(extensiondir, uuid)
