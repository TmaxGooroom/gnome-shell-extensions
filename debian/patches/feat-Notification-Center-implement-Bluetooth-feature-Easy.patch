From: Saehan Lee <saehan_lee@tmax.co.kr>
Date: Tue, 22 Jun 2021 13:27:01 +0900
Subject: [feat] Notification Center : implement Bluetooth feature,
 EasySupport simple view

- implement linking Bluetooth status to Bluetooth Icon
- implement Bluetooth on & off feature
- implment EasySupport simple view enable & disable via click arrow button

[IMS] N/A
---
 extensions/notification-center/extension.js   | 202 +++++++++++++++++++++-----
 extensions/notification-center/stylesheet.css |  27 +++-
 2 files changed, 191 insertions(+), 38 deletions(-)

diff --git a/extensions/notification-center/extension.js b/extensions/notification-center/extension.js
index a7cefd8..35b3c85 100644
--- a/extensions/notification-center/extension.js
+++ b/extensions/notification-center/extension.js
@@ -5,21 +5,29 @@ Version 22.03
 
 */
 
-const { Clutter, Gio, GObject, Gtk, Meta, Shell, St } = imports.gi;
+const { Clutter, Gio, GLib, GnomeBluetooth, GObject, Gtk, Meta, Shell, St } = imports.gi;
+
 const SystemActions       = imports.misc.systemActions.getDefault();
 const Util                = imports.misc.util;
+const { loadInterfaceXML } = imports.misc.fileUtils;
 const Config              = imports.misc.config;
 const ExtensionUtils      = imports.misc.extensionUtils;
+const Me                  = imports.misc.extensionUtils.getCurrentExtension();
+
 const Gettext             = imports.gettext;
 const LangClass           = imports.lang.Class;
-const Main                = imports.ui.main;
-const Me                  = imports.misc.extensionUtils.getCurrentExtension();
+
 const MetaKeyBindingFlags = Meta.KeyBindingFlags;
+
+const Main                = imports.ui.main;
 const PanelMenuButton     = imports.ui.panelMenu.Button;
-const PopupMenu           = imports.ui.popupMenu;
 const ShellActionMode     = Shell.ActionMode;
+
 const _                   = imports.gettext.domain('notification-center').gettext;
 
+const RfkillManagerInterface = loadInterfaceXML('org.gnome.SettingsDaemon.Rfkill');
+const RfkillManagerProxy = Gio.DBusProxy.makeProxyWrapper(RfkillManagerInterface);
+
 let notificationCenter = null;
 
 function enable() {
@@ -97,10 +105,15 @@ class SupportIcon extends St.BoxLayout {
 
         if (isToggle)
             this._status.set_text('On');
+
         this.add_child(this._title);
         this.add_child(this._status);
+
+        this._title.hide();
+        this._status.hide();
     }
 
+    /* In case of toggle buttons, for example alarm & bluetooth, we have to apply different style depend on status */
     setStatus(_status) {
         if (this._isToggle) {
             if (_status) {
@@ -112,6 +125,17 @@ class SupportIcon extends St.BoxLayout {
             }
         }
     }
+
+    /* If SimpleView is enabled, Icon's labels are hidden */
+    setSimpleView(_isSimple) {
+        if (_isSimple) {
+            this._title.hide();
+            this._status.hide();
+        } else {
+            this._title.show();
+            this._status.show();
+        }
+    }
 });
 
 const NotificationCenter = new LangClass({
@@ -141,6 +165,21 @@ const NotificationCenter = new LangClass({
         this.reloadSignal         = null;
         this.reloadProfilesSignal = null;
 
+        this._syncId = 0;
+        this._adapter = null;
+
+        this._hadSetupDevices  = global.settings.get_boolean('had-bluetooth-devices-setup');
+        this._proxy = new RfkillManagerProxy(Gio.DBus.session, 'org.gnome.SettingsDaemon.Rfkill', '/org/gnome/SettingsDaemon/Rfkill',
+            (proxy, error) => {
+                if (error) {
+                    log(error.message);
+                    return;
+                }
+                this.sync();
+            });
+        this._client = new GnomeBluetooth.Client();
+        this._model = this._client.get_model();
+
         this.textureCache         = St.TextureCache.get_default();
         this.iconThemeChangeSig   = null;
         this.notificationIconName = null;
@@ -156,20 +195,27 @@ const NotificationCenter = new LangClass({
         this.eventsIcon        = new St.Icon({ style_class: 'system-status-icon', visible: false, icon_name: 'x-office-calendar-symbolic' });
         this.mediaIcon         = new St.Icon({ style_class: 'system-status-icon', visible: false, icon_name: 'audio-x-generic-symbolic'  });
         this.notificationIcon  = new St.Icon({ style_class: 'system-status-icon', visible: false });
-        let gicon              = Gio.icon_new_for_string(`${Me.path}/img/tos_img_alarm_none.png`);
-        this.emptyIcon         = new St.Icon({ gicon, style_class: 'notification-center-empty-icon', icon_size: 142, x_align: Clutter.ActorAlign.CENTER, visible: false });
+        this.emptyIcon         = new St.Icon({ style_class: 'notification-center-empty-icon',
+            gicon: Gio.icon_new_for_string(`${Me.path}/img/tos_img_alarm_none.png`),
+            icon_size: 142,
+            x_align: Clutter.ActorAlign.CENTER,
+            visible: false });
+
         this.emptyLabel        = new St.Label({ style_class: 'notification-center-empty-label', text: _('No New Notifications'), x_align: Clutter.ActorAlign.CENTER, visible: false });
         this.titleLabel        = new St.Label({ style_class: 'notification-center-title-label', text: _('Notification Center') });
         this.eventsLabel       = new St.Label({ text: '• ', visible: false });
         this.notificationLabel = new St.Label({ text: '• ', visible: false });
+
         this._indicator        = new St.BoxLayout({ style_class: 'panel-status-menu-box', style: 'spacing:0.0em' });
         this.box               = new St.BoxLayout({ style_class: 'notification-center-message-list', vertical: true });
         this.titleBox          = new St.BoxLayout({ style_class: 'notification-center-title-box', vertical: false, y_align: Clutter.ActorAlign.START, x_expand: true });
+
         this.clearButton       = new St.Button({ style_class: 'notification-center-clear-button button', label: _('Clear'), can_focus: true, visible: false, x_expand: true });
 
         this.easySupport       = new St.BoxLayout({ style_class: 'notification-center-easy-support', vertical: true, y_align: Clutter.ActorAlign.END, y_expand: true });
         this.supportControl    = new St.BoxLayout({ style_class: 'notification-center-support-control-row' });
 
+        this.supportControlArrowButton = new St.Button({ reactive: true, style_class: 'notification-center-support-control-button' });
         this.supportControlUpArrow  = new St.Icon({ gicon: Gio.icon_new_for_string(`${Me.path}/img/tos_desktop_ic_alarm_arrow_up.svg`),
             icon_size: 24 });
         this.supportControlDownArrow  = new St.Icon({
@@ -195,8 +241,9 @@ const NotificationCenter = new LangClass({
         });
 
         this.supportIconRow = new St.BoxLayout({ style_class: 'notification-center-support-icon-row' });
-        this.dndItem        = new PopupMenu.PopupSwitchMenuItem(this._messageList._dndButton.label_actor.text, false, {});
+        this.supportIconSimpleMode = true;
         this.alarmIcon      = new SupportIcon('tos_desktop_ic_alarm_alarm.svg', _('Alarm'), true);
+        this.bluetoothIcon  = new SupportIcon('tos_ic_alram_blutooth.svg', _('Bluetooth'), true);
 
         let scaleFactor     = St.ThemeContext.get_for_stage(global.stage).scale_factor;
         this.scrollView     = new St.ScrollView({ hscrollbar_policy: 2, style: `min-width:${this._messageList.width / scaleFactor}px;max-height: ${0.01 * this.prefs.get_int('max-height') * Main.layoutManager.monitors[0].height}px; max-width: ${this._messageList.width / scaleFactor}px; padding: 0px;` });
@@ -274,11 +321,6 @@ const NotificationCenter = new LangClass({
 
         this.isDndOff = this.dndpref.get_boolean('show-banners');
 
-        /*
-        if (this.dndPos < 0)
-            this.dndItem.setToggleState(!this.isDndOff);
-        */
-
         this.blinkIconStopIfBlinking();
         this.manageAutohide();
 
@@ -423,8 +465,6 @@ const NotificationCenter = new LangClass({
             // reload dnd status
             this.loadDndStatus();
 
-
-
         }
 
     },
@@ -566,6 +606,21 @@ const NotificationCenter = new LangClass({
 
     },
 
+    /* In EasySupport Box, we can enable & disable icon's view mode */
+    changeEasySupportViewMode() {
+        let supportIcons = this.supportIconRow.get_children();
+        this.supportIconSimpleMode = !this.supportIconSimpleMode;
+        if (this.supportIconSimpleMode) {
+            this.supportControlArrowButton.set_child(this.supportControlUpArrow);
+            this.easySupport.remove_style_pseudo_class('detail');
+        } else {
+            this.supportControlArrowButton.set_child(this.supportControlDownArrow);
+            this.easySupport.set_style_pseudo_class('detail');
+        }
+        for (let i = 0; i < supportIcons.length; i++)
+            supportIcons[i].setSimpleView(this.supportIconSimpleMode);
+    },
+
     shouldShowEventsSection() {
 
         switch (this.eventsSection._eventsList.get_children().length) {
@@ -633,46 +688,48 @@ const NotificationCenter = new LangClass({
         this.menu.box.add_actor(this.easySupport);
         this.menu.box.style = 'padding-bottom:0px;';
 
-        /*
-        if (this.dndPos < 0) {
-            this.dndItem._delegate = this;
-            this.dndItem.connect('toggled', () => this.dndToggle());
-            this._messageList._dndSwitch.hide();
-            this._messageList._dndButton.label_actor.hide();
-
-            this.easySupport.add_actor(this.dndItem);
-        }
-        */
-
         this.easySupport.add_child(this.supportControl);
 
-        // this.supportControl.add_actor(this.supportControlUpArrow);
-        this.supportControl.add_child(this.supportControlDownArrow);
-        // this.supportControl.add_actor(this.supportControlEdit);
+        this.supportControlArrowButton.set_child(this.supportControlUpArrow);
+        this.supportControl.add_child(this.supportControlArrowButton);
+        this.supportControl.add_actor(this.supportControlEdit);
         // this.supportControl.add_actor(this.supportControlRefresh);
         // this.supportControl.add_actor(this.supportControlDone);
 
-        // this.supportControlUpArrow.hide();
-        // this.supportControlEdit.hide();
-        // this.supportControlDownArrow.hide();
         // this.supportControlRefresh.hide();
         // this.supportControlDone.hide();
 
+        this.supportControlArrowButton.connect('clicked', () => this.changeEasySupportViewMode());
+
         this.easySupport.add_child(this.supportIconRow);
 
         this.supportIconRow.add_child(this.alarmIcon);
-        this.supportIconRow.add_child(new SupportIcon('tos_ic_alram_blutooth.svg', _('Bluetooth'), true));
+        this.supportIconRow.add_child(this.bluetoothIcon);
+
         this.supportIconRow.add_child(new SupportIcon('tos_desktop_ic_alarm_wifi.svg', _('Network'), false));
         this.supportIconRow.add_child(new SupportIcon('tos_desktop_ic_alarm_setting.svg', _('Setting'), false));
         this.supportIconRow.add_child(new SupportIcon('tos_desktop_ic_alarm_lock.svg', _('Lock Screen'), false));
 
         // Because button is designed private property, we need to connectButton method in SupportIcon class.
         this.alarmIcon._button.connect('clicked', () => this.dndToggle());
+        this.bluetoothIcon._button.connect('clicked', () =>  {
+            this._proxy.BluetoothAirplaneMode =  !this._proxy.BluetoothAirplaneMode;
+        });
+
         this.supportIconRow.get_child_at_index(2)._button.connect('clicked', () =>  Util.spawnCommandLine('gnome-control-center network'));
         this.supportIconRow.get_child_at_index(3)._button.connect('clicked', () =>  Util.spawnCommandLine('gnome-control-center info-overview'));
         this.supportIconRow.get_child_at_index(4)._button.connect('clicked', () =>  this._systemActions.activateLockScreen());
 
+        this._model.connect('row-deleted', this._queueSync.bind(this));
+        this._model.connect('row-changed', this._queueSync.bind(this));
+        this._model.connect('row-inserted', this._sync.bind(this));
+        Main.sessionMode.connect('updated', this._sync.bind(this));
+        this._proxy.connect('g-properties-changed', this._queueSync.bind(this));
+
+
         this.loadDndStatus();
+        this._sync();
+
         this.resetIndicator();
 
         Main.messageTray.bannerAlignment = this.prefs.get_enum('banner-pos');
@@ -827,10 +884,9 @@ const NotificationCenter = new LangClass({
             global.display.disconnect(this.cmsig);
 
 
-        if (this.dndSig !== null) {
+        if (this.dndSig !== null)
             this.dndpref.disconnect(this.dndSig);
-            this.dndItem.destroy();
-        }
+
 
         if (this.iconThemeChangeSig !== null)
             this.textureCache.disconnect(this.iconThemeChangeSig);
@@ -866,4 +922,80 @@ const NotificationCenter = new LangClass({
 
     },
 
+    _setHadSetupDevices(value) {
+        if (this._hadSetupDevices === value)
+            return;
+
+        this._hadSetupDevices = value;
+        global.settings.set_boolean(
+            'had-bluetooth-devices-setup', this._hadSetupDevices);
+    },
+
+    _getDefaultAdapter() {
+        let [ret, iter] = this._model.get_iter_first();
+        while (ret) {
+            let isDefault = this._model.get_value(iter,
+                GnomeBluetooth.Column.DEFAULT);
+            let isPowered = this._model.get_value(iter,
+                GnomeBluetooth.Column.POWERED);
+            if (isDefault && isPowered)
+                return iter;
+            ret = this._model.iter_next(iter);
+        }
+        return null;
+    },
+
+    _getDeviceInfos(adapter) {
+        if (!adapter)
+            return [];
+
+        let deviceInfos = [];
+        let [ret, iter] = this._model.iter_children(adapter);
+        while (ret) {
+            const isPaired = this._model.get_value(iter,
+                GnomeBluetooth.Column.PAIRED);
+            const isTrusted = this._model.get_value(iter,
+                GnomeBluetooth.Column.TRUSTED);
+
+            if (isPaired || isTrusted) {
+                deviceInfos.push({
+                    connected: this._model.get_value(iter,
+                        GnomeBluetooth.Column.CONNECTED),
+                    name: this._model.get_value(iter,
+                        GnomeBluetooth.Column.ALIAS),
+                });
+            }
+
+            ret = this._model.iter_next(iter);
+        }
+
+        return deviceInfos;
+    },
+
+
+    _queueSync() {
+        if (this._syncId)
+            return;
+        this._syncId = GLib.idle_add(GLib.PRIORITY_DEFAULT, () => {
+            this._syncId = 0;
+            this._sync();
+            return GLib.SOURCE_REMOVE;
+        });
+    },
+
+    _sync() {
+        let adapter = this._getDefaultAdapter();
+        let devices = this._getDeviceInfos(adapter);
+
+        if (adapter && this._adapter)
+            this._setHadSetupDevices(devices.length > 0);
+        this._adapter = adapter;
+
+        // Remember if there were setup devices and show the menu
+        // if we've seen setup devices and we're not hard blocked
+        if (this._hadSetupDevices)
+            this.bluetoothIcon.setStatus(!this._proxy.BluetoothHardwareAirplaneMode);
+        else
+            this.bluetoothIcon.setStatus(this._proxy.BluetoothHasAirplaneMode && !this._proxy.BluetoothAirplaneMode);
+    },
 });
diff --git a/extensions/notification-center/stylesheet.css b/extensions/notification-center/stylesheet.css
index d6e225a..82e4545 100644
--- a/extensions/notification-center/stylesheet.css
+++ b/extensions/notification-center/stylesheet.css
@@ -57,8 +57,15 @@
 .notification-center-easy-support {
   background-color: rgba(41, 41, 41, 255);
   border-radius: 14px;
-  padding: 4px 20px;
-  spacing: 3px
+  padding: 10px 20px;
+  spacing: 5px
+}
+
+.notification-center-easy-support:detail {
+  background-color: rgba(41, 41, 41, 255);
+  border-radius: 14px;
+  padding: 15px 20px;
+  spacing: 10px
 }
 
 .notification-center-support-control-row {
@@ -66,12 +73,26 @@
     spacing: 5px;
 }
 
+.notification-center-support-control-button {
+    border-radius: 12px;
+}
+
+.notification-center-support-control-button:hover {
+    background-color: rgba(237, 237, 242, 0.25);
+    border-radius: 12px;
+}
+
+.notification-center-support-control-button:active {
+    background-color: rgba(237, 237, 242, 0.15);
+    border-radius: 12px;
+}
+
 .notification-center-support-icon-row {
     spacing: 11px;
 }
 
 .notification-center-support-control-done {
-    padding : 5px 15px;
+    padding: 3px 10px 3px 10px;
     border-radius: 12px;
     background-color: #3961CA;
     font-size: 14px;
